{"api": "Mac.doFinal", "question": "How to generate an HMAC in Java equivalent to a Python example?: I'm looking at implementing an app getting Twitter authorization via Oauth in Java.\nThe first step is getting a request token.\nI've seen an example of HMAC in Java:\ntry {\n    // Generate a key for the HMAC-MD5 keyed-hashing algorithm; see RFC 2104\n    // In practice, you would save this key.\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"HmacMD5\");\n    SecretKey key = keyGen.generateKey();\n\n    // Create a MAC object using HMAC-MD5 and initialize with key\n    Mac mac = Mac.getInstance(key.getAlgorithm());\n    mac.init(key);\n\n    String str = \"This message will be digested\";\n\n    // Encode the string into bytes using utf-8 and digest it\n    byte[] utf8 = str.getBytes(\"UTF8\");\n    byte[] digest = mac.doFinal(utf8);\n\n    // If desired, convert the digest into a string\n    String digestB64 = new sun.misc.BASE64Encoder().encode(digest);\n} catch (InvalidKeyException e) {\n} catch (NoSuchAlgorithmException e) {\n} catch (UnsupportedEncodingException e) {\n}\nIt uses javax.crypto.Mac, all good. However, the SecretKey constructors take bytes and an algorithm.\nHow can one create a Java secret key without an algorithm?\n", "code": "SecretKeySpec keySpec = new SecretKeySpec(\n        \"qnscAdgRlkIhAUPY44oiexBKtQbGY0orf7OV1I50\".getBytes(),\n        \"HmacSHA1\");\n\nMac mac = Mac.getInstance(\"HmacSHA1\");\nmac.init(keySpec);\ntry {\n    byte[] result = mac.doFinal(\"foo\".getBytes());\n} catch (IllegalStateException e) {\n    System.out.println(e.getMessage());\n}\n\nBASE64Encoder encoder = new BASE64Encoder();\nSystem.out.println(encoder.encode(result));", "explanation": "Use try catch to get unexpected errors.", "origin": "stackoverflow.com/questions/3208160"}