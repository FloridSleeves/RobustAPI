{"api": "PrintWriter.write", "question": "Java Sockets: Send multiple lines and receive multiple lines [duplicate]:\nI am sending multiple lines to a ServerSocket using a PrintWriter.\nPrintWriter printWriter = ...\nprintWriter.write(\"1\");\nprintWriter.write(\"2\");\nprintWriter.write(\"3\");\nThen I am trying to receive it with a BufferedReader\nServerSocket serverSocket = ...\nSocket socket = serverSocket.accept();\nBufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\nSystem.out.println(bufferedReader.readLine());\nI am of course closing all the resources, I wrote this code only to visualize the problem. That prints 123 but it is supposed to print 1. How can I fix that?\n", "code": "try { printWriter.write(\"1\n\"); } catch (Exception e) { e.printStackTrace(); }", "explanation": "The problem is that you are writing string without a line break. But BufferedReader expects one of the line characters mentioned above which you are not providing. It does output the whole buffer once the end of the stream is reached though.", "origin": "stackoverflow.com/questions/57934429", "rule": "Write data to a PrintWriter, and if an Exception occurs, manage it by catching the Exception.\nWrite data to a PrintWriter, then close it, and if an Exception occurs during this process, handle it by catching the Exception.\nWrite data to a PrintWriter, then close it.\n"}