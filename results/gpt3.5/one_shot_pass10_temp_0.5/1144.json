{
    "id": "chatcmpl-8HW4ZFOzmJtQGl5PhNrGKzG4xHwLm",
    "object": "chat.completion",
    "created": 1699185555,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class AverageFamilyIncomeByState {\n  \n  public void familyAverageIncomeFile() throws IOException {\n    File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n    Scanner scanner = new Scanner(income);\n    String year = scanner.nextLine();\n    \n    System.out.println(year + \"     Average\");\n    System.out.println(\"-------------------------------------------------------\");\n    \n    while (scanner.hasNextLine()) {\n      String line = scanner.nextLine();\n      StringTokenizer st = new StringTokenizer(line);\n      \n      String state = st.nextToken();\n      double sum = 0;\n      int count = 0;\n      \n      while (st.hasMoreTokens()) {\n        double incomeValue = Double.parseDouble(st.nextToken());\n        sum += incomeValue;\n        count++;\n      }\n      \n      double average = sum / count;\n      System.out.println(state + \"    \" + average);\n    }\n    \n    scanner.close();\n  }\n}\n  \npublic class Launcher {\n  \n  public static void main(String[] args) throws IOException {\n    FamilyIncomeByState familyIncomeByState = new FamilyIncomeByState();\n    familyIncomeByState.familyIncomeFile();\n    \n    AverageFamilyIncomeByState familyAverageIncomeByState = new AverageFamilyIncomeByState();\n    familyAverageIncomeByState.familyAverageIncomeFile();\n  }\n}\n  \n<<<explanation>>>: In the code provided, I have made changes to the `familyAverageIncomeFile()` method in the `AverageFamilyIncomeByState` class. Instead of using `scanner.next()` and `scanner.nextDouble()` to read the values, I have used `StringTokenizer` to split each line into tokens and then parse the income values as doubles. This way, it will correctly handle lines with multiple words and values. I have also added a loop to calculate the sum of the income values and count the number of values. Finally, I calculate the average by dividing the sum by the count and print it along with the state name."
            },
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class AverageFamilyIncomeByState {\n  \n  public void familyAverageIncomeFile() throws IOException {\n    File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n    Scanner scanner = new Scanner(income);\n    String year = scanner.nextLine();\n    System.out.println(year + \"     Average\");\n    System.out.println(\"-------------------------------------------------------\");\n    \n    while (scanner.hasNextLine()) {\n      String line = scanner.nextLine();\n      StringTokenizer st = new StringTokenizer(line);\n      \n      String state = st.nextToken();\n      double num1 = Double.parseDouble(st.nextToken());\n      double num2 = Double.parseDouble(st.nextToken());\n      double num3 = Double.parseDouble(st.nextToken());\n      double averageD = (num1 + num2 + num3) / 3;\n      BigDecimal average = BigDecimal.valueOf(averageD);\n      \n      System.out.println(state + \"    \" + average);\n      System.out.println(\" \");\n    }\n    \n    scanner.close();\n  }\n}\n  \npublic static void main(String[] args) throws IOException {\n  AverageFamilyIncomeByState familyAverageIncomeByState = new AverageFamilyIncomeByState();\n  familyAverageIncomeByState.familyAverageIncomeFile();\n}\n  \n<<<explanation>>>: In the code you provided, you are using the `Scanner` class to read each line of the file. However, you are encountering an `InputMismatchException` because you are trying to read a `double` value using `scanner.nextDouble()` after reading a `String` value using `scanner.next()`. This causes the scanner to incorrectly interpret the next value as a `double` when it is actually a `String`.\n\nTo fix this issue, you can use the `StringTokenizer` class to tokenize each line of the file and extract the necessary values. The `StringTokenizer.nextToken()` method can be used to iterate through the tokens in each line.\n\nIn the modified code, I have replaced the `scanner.next()` and `scanner.nextDouble()` calls with `StringTokenizer.nextToken()` and `Double.parseDouble()` respectively. This ensures that the correct type conversion is performed for each token in the line.\n\nAdditionally, I have added the necessary code to calculate the average and display it alongside the state name.\n\nPlease note that the `StringTokenizer` class is considered to be legacy and its use is discouraged. It is recommended to use the `String.split()` method or other modern alternatives for tokenizing strings in Java."
            },
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>: public class AverageFamilyIncomeByState {\n  \n  public void familyAverageIncomeFile() throws IOException {\n    File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n    Scanner scanner = new Scanner(income);\n    String year = scanner.nextLine();\n    System.out.println(year + \"     Average\");\n    System.out.println(\"-------------------------------------------------------\");\n  \n    while (scanner.hasNextLine()) {\n      String line = scanner.nextLine();\n      StringTokenizer st = new StringTokenizer(line);\n  \n      String state = st.nextToken();\n      double num1 = Double.parseDouble(st.nextToken());\n      double num2 = Double.parseDouble(st.nextToken());\n      double num3 = Double.parseDouble(st.nextToken());\n  \n      double averageD = (num1 + num2 + num3) / 3;\n      BigDecimal average = BigDecimal.valueOf(averageD);\n  \n      System.out.println(state + \"    \" + average);\n    }\n  \n    scanner.close();\n  }\n}\n  \npublic static void main(String[] args) throws IOException {\n  AverageFamilyIncomeByState familyAverageIncomeByState = new AverageFamilyIncomeByState();\n  familyAverageIncomeByState.familyAverageIncomeFile();\n}\n  \n<<<explanation>>>: In your code, you're using the Scanner class to read the lines from the text file. However, when you call scanner.next(), it only reads the next token, which is separated by whitespace by default. In your case, the state names contain spaces, so it won't work correctly.\n\nTo solve this issue, you can use the StringTokenizer class to tokenize each line of the file. This way, you can specify the delimiter as whitespace and retrieve each token separately.\n\nIn the updated code, I have modified the familyAverageIncomeFile() method to use StringTokenizer. After reading each line from the file, I create a new instance of StringTokenizer and pass the line as the input string.\n\nThen, I use st.nextToken() to retrieve each token separately. The first token is the state name, and the subsequent tokens are the income values. I parse them as double using Double.parseDouble().\n\nFinally, I calculate the average and print it along with the state name.\n\nNote: Make sure to import the necessary classes (e.g., File, IOException, Scanner, StringTokenizer, BigDecimal) at the beginning of your code."
            },
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>: public class AverageFamilyIncomeByState {\n    public void familyAverageIncomeFile() throws IOException {\n        File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n        Scanner scanner = new Scanner(income);\n        String year = scanner.nextLine();\n        System.out.println(year + \"     Average\");\n        System.out.println(\"-------------------------------------------------------\");\n\n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \" \");\n            String state = st.nextToken();\n            while (st.hasMoreTokens()) {\n                double num = Double.parseDouble(st.nextToken());\n                System.out.println(state + \"    \" + num);\n            }\n            double average = calculateAverage(st);\n            System.out.println(state + \"    \" + average);\n            System.out.println(\" \");\n        }\n        scanner.close();\n    }\n\n    private double calculateAverage(StringTokenizer st) {\n        double sum = 0;\n        int count = 0;\n        while (st.hasMoreTokens()) {\n            double num = Double.parseDouble(st.nextToken());\n            sum += num;\n            count++;\n        }\n        return sum / count;\n    }\n}\n<<<explanation>>>: In the code, I have modified the `familyAverageIncomeFile` method to use `StringTokenizer` to tokenize each line of the input file. The first token is extracted as the state name, and then the remaining tokens are parsed as doubles to calculate the average. The `calculateAverage` method takes a `StringTokenizer` as input and calculates the average by summing up the numbers and dividing by the count."
            },
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class AverageFamilyIncomeByState {\n    public void familyAverageIncomeFile() throws IOException {\n        File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n        Scanner scanner = new Scanner(income);\n        String year = scanner.nextLine();\n        System.out.println(year + \"     Average\");\n        System.out.println(\"-------------------------------------------------------\");\n\n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \" \");\n\n            String words = st.nextToken();\n            double num1 = Double.parseDouble(st.nextToken());\n            double num2 = Double.parseDouble(st.nextToken());\n            double num3 = Double.parseDouble(st.nextToken());\n            double averageD = (num1 + num2 + num3) / 3;\n            BigDecimal average = BigDecimal.valueOf(averageD);\n            System.out.println(words + \"    \" + average);\n            System.out.println(\" \");\n        }\n\n        scanner.close();\n    }\n}\n<<<explanation>>>: In your code, you are using the Scanner class to read the input file line by line. However, to extract the words and numbers from each line, you can use the StringTokenizer class. \n\nInside the while loop, you can create a new StringTokenizer object with the line as the input string and \" \" (space) as the delimiter. Then, you can use the nextToken() method to extract the words and numbers from the line. \n\nTo convert the extracted numbers from strings to doubles, you can use the Double.parseDouble() method. Finally, you can calculate the average and display it along with the words using the BigDecimal class for precision."
            },
            "finish_reason": "stop"
        },
        {
            "index": 5,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class AverageFamilyIncomeByState {\n  \n  public void familyAverageIncomeFile() throws IOException {\n    File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n    Scanner scanner = new Scanner(income);\n    String year = scanner.nextLine();\n    System.out.println(year + \"     Average\");\n    System.out.println(\"-------------------------------------------------------\");\n\n    while (scanner.hasNextLine()) {\n      String line = scanner.nextLine();\n      StringTokenizer st = new StringTokenizer(line);\n      String state = st.nextToken();\n      double num1 = Double.parseDouble(st.nextToken());\n      double num2 = Double.parseDouble(st.nextToken());\n      double num3 = Double.parseDouble(st.nextToken());\n      double averageD = (num1 + num2 + num3) / 3;\n      BigDecimal average = BigDecimal.valueOf(averageD);\n      System.out.println(state + \"    \" + average);\n      System.out.println(\" \");\n    }\n    scanner.close();\n  }\n}\n  \npublic class Launcher {\n  \n  public static void main(String[] args) throws IOException {\n    FamilyIncomeByState familyIncomeByState = new FamilyIncomeByState();\n    familyIncomeByState.familyIncomeFile();\n    AverageFamilyIncomeByState familyAverageIncomeByState = new AverageFamilyIncomeByState();\n    familyAverageIncomeByState.familyAverageIncomeFile();\n  }\n}\n  \n<<<explanation>>>: In your code, you were using the `Scanner` class to read the input file. However, the `Scanner` class uses whitespace as the default delimiter, so it was causing issues when trying to read lines with multiple words. To solve this, I have used the `StringTokenizer` class to tokenize each line of the file. The `StringTokenizer` class allows you to specify a custom delimiter, which in this case is whitespace. By using `st.nextToken()` multiple times, you can retrieve each token from the line. In this code, I have assumed that the format of each line is consistent, with the state name followed by three numbers. I have also used `Double.parseDouble()` to convert the number tokens to `double` values for calculation. Finally, I have calculated the average and displayed it along with the state name."
            },
            "finish_reason": "stop"
        },
        {
            "index": 6,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class AverageFamilyIncomeByState {\n    \n    public void familyAverageIncomeFile() throws IOException {\n        File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n        Scanner scanner = new Scanner(income);\n        String year = scanner.nextLine();\n        System.out.println(year + \"     Average\");\n        System.out.println(\"-------------------------------------------------------\");\n\n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine();\n            StringTokenizer st = new StringTokenizer(line);\n\n            String state = st.nextToken();\n            double num1 = Double.parseDouble(st.nextToken());\n            double num2 = Double.parseDouble(st.nextToken());\n            double num3 = Double.parseDouble(st.nextToken());\n            double averageD = (num1 + num2 + num3) / 3;\n            BigDecimal average = BigDecimal.valueOf(averageD);\n            System.out.println(state + \"    \" + average);\n        }\n\n        scanner.close();\n    }\n}\n  \n<<<explanation>>>: In your code, you are using `scanner.next()` to read the state name, which only reads until the first whitespace. To fix this, you can use `StringTokenizer.nextToken()` to read each token (word or number) in a line. This will allow you to read the state name even if it contains multiple words. You can then use `Double.parseDouble()` to convert the number tokens to doubles for calculation."
            },
            "finish_reason": "stop"
        },
        {
            "index": 7,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class AverageFamilyIncomeByState {\n    public void familyAverageIncomeFile() throws IOException {\n        File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n        Scanner scanner = new Scanner(income);\n        String year = scanner.nextLine();\n        System.out.println(year + \"     Average\");\n        System.out.println(\"-------------------------------------------------------\");\n\n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine();\n            StringTokenizer st = new StringTokenizer(line);\n            String words = st.nextToken();\n            double num1 = Double.parseDouble(st.nextToken());\n            double num2 = Double.parseDouble(st.nextToken());\n            double num3 = Double.parseDouble(st.nextToken());\n            double averageD = (num1 + num2 + num3) / 3;\n            BigDecimal average = BigDecimal.valueOf(averageD);\n            System.out.println(words + \"    \" + average);\n            System.out.println(\" \");\n        }\n\n        scanner.close();\n    }\n}\n<<<explanation>>>: In your code, you are using the Scanner class to read the input file. However, the issue you are facing is that the next() method of the Scanner class only reads the next word, not the entire line. To solve this issue, you can use the StringTokenizer class to tokenize each line of the input file and extract the required values.\n\nIn the code provided, I have modified your familyAverageIncomeFile() method to use the StringTokenizer class. After reading each line using the Scanner class, I create a new StringTokenizer object and pass the line as the input string. Then, I use the nextToken() method of the StringTokenizer class to extract the required values.\n\nI convert the extracted values to doubles using the Double.parseDouble() method and calculate the average. Finally, I print the state name and the average value.\n\nNote that you need to import the java.util.StringTokenizer class in order to use it in your code."
            },
            "finish_reason": "stop"
        },
        {
            "index": 8,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class AverageFamilyIncomeByState {\n    public void familyAverageIncomeFile() throws IOException {\n        File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n        Scanner scanner = new Scanner(income);\n        String year = scanner.nextLine();\n        System.out.println(year + \"     Average\");\n        System.out.println(\"-------------------------------------------------------\");\n\n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine();\n            StringTokenizer st = new StringTokenizer(line);\n\n            String state = st.nextToken();\n            double num1 = Double.parseDouble(st.nextToken());\n            double num2 = Double.parseDouble(st.nextToken());\n            double num3 = Double.parseDouble(st.nextToken());\n            double averageD = (num1 + num2 + num3) / 3;\n            BigDecimal average = BigDecimal.valueOf(averageD);\n            System.out.println(state + \"    \" + average);\n        }\n\n        scanner.close();\n    }\n}\n<<<explanation>>>: In the code, we are using the StringTokenizer to tokenize each line of the input file. The first token is the state name, and the next three tokens are the income values. We convert these tokens to doubles using Double.parseDouble() and calculate the average. Finally, we print the state name and the average value."
            },
            "finish_reason": "stop"
        },
        {
            "index": 9,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class AverageFamilyIncomeByState {\n  \n  public void familyAverageIncomeFile() throws IOException {\n    File income = new File(\"src\\\\hw2p2\\\\FamilyIncome.txt\");\n    Scanner scanner = new Scanner(income);\n    String year = scanner.nextLine();\n    System.out.println(year + \"     Average\");\n    System.out.println(\"-------------------------------------------------------\");\n    \n    while (scanner.hasNextLine()) {\n      String line = scanner.nextLine();\n      StringTokenizer st = new StringTokenizer(line, \" \");\n      String state = st.nextToken();\n      double num1 = Double.parseDouble(st.nextToken());\n      double num2 = Double.parseDouble(st.nextToken());\n      double num3 = Double.parseDouble(st.nextToken());\n      double averageD = (num1 + num2 + num3) / 3;\n      BigDecimal average = BigDecimal.valueOf(averageD);\n      System.out.println(state + \"    \" + average);\n      System.out.println(\" \");\n    }\n    \n    scanner.close();\n  }\n}\n  \npublic static void main(String[] args) throws IOException {\n  AverageFamilyIncomeByState familyAverageIncomeByState = new AverageFamilyIncomeByState();\n  familyAverageIncomeByState.familyAverageIncomeFile();\n}\n<<<explanation>>>: In your code, you are using the `Scanner` class to read the input file line by line. However, you are not correctly handling the lines that contain multiple words. The `Scanner` class's `next()` method only reads until the next whitespace, so it stops at the first word of the state name.\n\nTo fix this, you can use the `StringTokenizer` class to tokenize each line and extract the required values. The `StringTokenizer.nextToken()` method can be used to read each token (word or number) from the line. You can then convert the numbers to `double` using `Double.parseDouble()`.\n\nIn the modified code, I have added the necessary changes to correctly read the lines with multiple words. The `StringTokenizer` is used to tokenize each line, and the state name is extracted using `st.nextToken()`. The three numbers are then extracted using `Double.parseDouble(st.nextToken())`, and the average is calculated as before.\n\nNote: Make sure to import the necessary classes (`java.io.IOException`, `java.util.Scanner`, and `java.util.StringTokenizer`)."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 1939,
        "completion_tokens": 3871,
        "total_tokens": 5810
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Java StringTokenizer.nextToken() skips over empty fields:I am using a tab (/t) as delimiter and I know there are some empty fields in my data e.g.:\n\none->two->->three\nWhere -> equals the tab. As you can see an empty field is still correctly surrounded by tabs. Data is collected using a loop :\n\n while ((strLine = br.readLine()) != null) {\n    StringTokenizer st = new StringTokenizer(strLine, \"\t\");\n    String test = st.nextToken();\n    ...\n    }\nYet Java ignores this \"empty string\" and skips the field.\n\nIs there a way to circumvent this behaviour and force java to read in empty fields anyway?\nPlease using this api: StringTokenizer.nextToken.\nAnswer:<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class TestStringTokenStrict {\n\n/**\n * Strict implementation of StringTokenizer\n * \n * @param str\n * @param delim\n * @param strict\n *            true = include NULL Token\n * @return\n */\nstatic StringTokenizer getStringTokenizerStrict(String str, String delim, boolean strict) {\n    StringTokenizer st = new StringTokenizer(str, delim, strict);\n    StringBuffer sb = new StringBuffer();\n\n    while (st.hasMoreTokens()) {\n        String s = st.nextToken();\n        if (s.equals(delim)) {\n            sb.append(\" \").append(delim);\n        } else {\n            sb.append(s).append(delim);\n            if (st.hasMoreTokens())\n                st.nextToken();\n        }\n    }\n    return (new StringTokenizer(sb.toString(), delim));\n}\n\nstatic void altStringTokenizer(StringTokenizer st) {\n    while (st.hasMoreTokens()) {\n        String type = st.nextToken();\n        String one = st.nextToken();\n        String two = st.nextToken();\n        String three = st.nextToken();\n        String four = st.nextToken();\n        String five = st.nextToken();\n\n        System.out.println(\n                \"[\" + type + \"] [\" + one + \"] [\" + two + \"] [\" + three + \"] [\" + four + \"] [\" + five + \"]\");\n    }\n}\n\npublic static void main(String[] args) {\n    String input = \"Record|One||Three||Five\";\n    altStringTokenizer(getStringTokenizerStrict(input, \"|\", true));\n}}\n<<<explanation>>>: The object your method decompressGZIP() needs is a byte[].\n\nSo the basic, technical answer to the question you have asked is:\nQuestion: Read multi line text file containing word and integer combinations, then calculate and display average: :First time posting here, so please bear with me! I have a programming project due and I need help figuring out how to read through a text file (using a scanner) that contains multiple words and integers on a single line. The text file is a list of state names and their respective Average Family Incomes over a 3 year span. I need to get those values and calculate the average over the three years and display it all back in a nice table.My problem is that I can get the average of the first few lines because they only have one word and three values. Using scanner.next() gets me past the first few lines, but there are multiple lines that contain 2 or more words and then the three values.Currently, I get an InputMismatchException after the scanner reaches \"District of Colombia\" and it won't get the next value since scanner.next() only gets me to the word \"of\". Is there any way around this? Here is the first part of the project that just outputs all of the data (without an average):Part 1 (works)public class FamilyIncomeByState {          public void familyIncomeFile() throws IOException {                 File income = new File (\"src\\\\hw2p2\\\\FamilyIncome.txt\");                    Scanner scanner = new Scanner (income);                 String year = scanner.nextLine();                   System.out.println(year);           System.out.println(\"--------------------------------------------\");        while (scanner.hasNextLine()){            String line = scanner.nextLine();                           System.out.println(line);            System.out.println(\" \");        }                   scanner.close();    }       }Part 2 (doesn't work) EDIT: Put in the wrong code the first time, this is the correct code. public class AverageFamilyIncomeByState {           public void familyAverageIncomeFile() throws IOException {        File income = new File (\"src\\\\hw2p2\\\\FamilyIncome.txt\");        Scanner scanner = new Scanner (income);        String year = scanner.nextLine();        System.out.println(year + \"     Average\");        System.out.println(\"-------------------------------------------------------\");                  while(scanner.hasNextLine()) {            String words = scanner.next();              double num1 = scanner.nextDouble();            double num2 = scanner.nextDouble();            double num3 = scanner.nextDouble();            double averageD = (num1 + num2 + num3) / 3;            BigDecimal average = BigDecimal.valueOf(averageD);            System.out.println(words + \"    \" + average);            System.out.println(\" \");            scanner.nextLine();                     }        scanner.close();    }}And here is the content of the text file: State           2002    2003    2004Alabama         53754   54594   51451Alaska          69868   71395   66874Arizuna         56857   56067   55663Arkansas        49551   47838   44537California      65766   63761   63206Colorado        68089   67634   66624Connecticut     81891   82517   82702Delaware        69469   73301   69360District of Columbia    55692   61799   63406Florida         57473   56824   55351Georgia         60676   59497   59489Hawaii          67564   66014   65872Idaho           54279   51098   53722Illinois        69168   66507   68117Indiana         63022   63573   62079Iowa            61238   61656   57921Kanses          61926   61686   56784Kentucky        54030   54319   51249Louisiana       52299   51234   47363Maine           58802   58425   56186Maryland        77938   82879   77562Massachusetts       78312   80247   78025Michigan        67995   68337   68740Minnesota       72379   72635   70553Mississippi     47847   46810   46331Missouri        59764   61036   61173Montana         51791   48078   46142Nebraska        60129   60626   57040Nevada          59588   59283   59614New Hampshire       72369   72606   71661New Jersey      82406   80577   78560New Mexico      48422   46596   47314New York        65461   66498   64520North Carolina      58227   56500   57203North Dakta     57070   55138   53140Ohio            63934   64282   62251Oklahoma        51377   53949   48459Oregon          60262   58737   58315Pennsylvania        64310   66130   65411Rhode Island        67646   70446   68418South Carolina      56110   59212   56294South Dakota        55359   59718   55150Tennessee       55605   56052   54899Texas           56278   56606   53513Utah            59864   59035   57043Vermont         62331   62938   59125Virginia        66889   69616   68054Warshington     66531   65997   63568West Virginia       47550   49470   46270Wisconsin       66988   65441   66725Wyoming         57148   58541   55859And here is my main method:    package hw2p2;import java.io.IOException;public class Launcher {    public static void main(String[] args) throws IOException {        FamilyIncomeByState familyIncomeByState = new FamilyIncomeByState();        familyIncomeByState.familyIncomeFile();        AverageFamilyIncomeByState familyAverageIncomeByState = new AverageFamilyIncomeByState();        familyAverageIncomeByState.familyAverageIncomeFile();    }}The part I'm stuck on should have an output that lists the Average values as a Fifth Column, but it just won't cycle past the 2nd word in a state name.  Let me know if there's any more relevant information you need. Thanks!\nPlease using this api: StringTokenizer.nextToken.\nAnswer:"
}