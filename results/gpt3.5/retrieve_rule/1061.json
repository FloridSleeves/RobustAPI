{"api": "StringTokenizer.nextToken", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nFor API StringTokenizer.nextToken, the API usage rule is: Create a StringTokenizer with a specified string and delimiter, and then obtain the next token as long as there are more tokens available.\n\nQuestion: Java Program: Not printing as it should using methods: :As you can see near the end of the code, i use \"list.printList\" that calls the printLink method. It should output \"book name: ... book author:.. etc. \" instead, it shows raw text file data. What am i doing wrong? Also, any recommendations are welcome. thanksEDIT:  this is the the content of the text file:antrea ggfg 65 64antrea ggfg 65 64antrea ggfg 65 64antrea ggfg 65 64This is the output:antrea ggfg 65 64antrea ggfg 65 64antrea ggfg 65 64antrea ggfg 65 64Also i believe there is something wrong with the tokenizer. from your experience, what is SHOULD do as written below? import java.io.* ;import java.util.* ;class Link{    public String isbn ;    public String bookName ;    public String bookAuthor ;     public String publicYear;    public Link nextLink;    public Link ()    {    }    //Link constructor    public Link(String bookNameIn, String bookAuthorIn, String isbnIn, String publicYearIn)     {        setIsbn (isbnIn) ;        setBookName (bookNameIn) ;        setBookAuthor (bookAuthorIn) ;        setPublicYear (publicYearIn) ;        //isbn = isbnIn ;        //bookAuthor = bookAuthorIn ;        //publicYear = publicYearIn ;    }  // Set Methods    public void setIsbn(String isbnIn)    {        isbn = isbnIn ;    }    public void setBookName(String bookNameIn)    {        bookName = bookNameIn ;    }    public void setBookAuthor(String bookAuthorIn)    {        bookAuthor = bookAuthorIn ;    }    public void setPublicYear(String publicYearIn)    {        publicYear = publicYearIn ;    }  // Get Methods    public String getIsbn()    {        return isbn ;    }    public String getBookName()    {        return bookName;    }    public String getBookAuthor()    {        return bookAuthor ;    }    public String getPublicYear()    {        return publicYear ;    }       //Print Link data    public void printLink()    {            System.out.print(\"Book Name: \" + getBookName() + \"\\n\" + \"Book's Author: \" + getBookAuthor() + \"\\n\" + \"Year Published: \" + getPublicYear() + \"\\n\" + \"ISBN: \" + getIsbn() +\"\\n\");            System.out.println(\"\") ;    }}class LinkList {    private Link first;    //LinkList constructor    public LinkList()    {            first = null;    }    //Returns true if list is empty    public boolean isEmpty()     {            return first == null;    }    //Inserts a new Link at the first of the list    public void insert(String bookNameIn, String bookAuthorIn, String isbnIn, String publicYearIn)     {            Link link = new Link(bookNameIn, bookAuthorIn, isbnIn, publicYearIn) ;            link.nextLink = first;            first = link;    }    //Deletes the link at the first of the list    public Link delete()     {            Link temp = first;            first = first.nextLink;            return temp;    }    //Prints list data    public void printList()    {            Link currentLink = new Link() ;            currentLink = first;            while(currentLink != null) {                    currentLink.printLink();                    currentLink = currentLink.nextLink;            }            System.out.println(\"\");    }}  public class TheList {    public static void main(String[] args) throws Exception    {            //Scanner kb = new Scanner (System.in);             LinkList list = new LinkList();            File outputFile ;            //int numberOfBooks = 0 ;         // Create the new text file. If exists, it will continue to the next commands            do            {                outputFile = new File(\"db.txt\") ;                    if(!outputFile.exists())                    {                        outputFile.createNewFile ();                                            System.out.println(\"The file was created as db.txt\");                        System.out.println(\"\");                    }            }while (!outputFile.exists()) ;            try            {                // Define which file to stream in from                FileInputStream fileIn = new FileInputStream(\"db.txt\") ;                DataInputStream input = new DataInputStream (fileIn) ;                BufferedReader br = new BufferedReader (new InputStreamReader (input)) ;                String line ;                // Read each line of the file                while ((line = br.readLine()) != null)                {                    // insert code to break input to pieces                    StringTokenizer tokenizer = new StringTokenizer(line) ;                    while (tokenizer.hasMoreElements())                    {                        Link record = new Link() ;                        record.setBookName(tokenizer.nextToken()) ;                        record.setBookAuthor(tokenizer.nextToken()) ;                        record.setIsbn(tokenizer.nextToken()) ;                        record.setPublicYear(tokenizer.nextToken()) ;                    }                    System.out.println (line) ;                }                input.close() ;            }catch (Exception e){                System.err.println(\"Error. Could not read the file\") ;            }            list.printList();            /**list.insert(123456, \"kostis\", \"kostis\", 1900);            list.insert(123456, \"kostis\", \"kostis\", 1900);            list.insert(123456, \"kostis\", \"kostis\", 1900);            list.insert(123456, \"kostis\", \"kostis\", 1900);            list.insert(123456, \"kostis\", \"kostis\", 1900);            **/    }}\nPlease using this api: StringTokenizer.nextToken.\nAnswer:", "response": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: The code is using StringTokenizer.nextToken to break each line of the file into separate tokens and assign them to the corresponding fields of the Link object.\n<<<explanation>>>: The issue with the code is that it is not adding the created Link object to the LinkList. Inside the while loop where the tokens are assigned to the Link object, you need to add the record to the list using the insert method. Here's the modified code:\n\n```java\nwhile ((line = br.readLine()) != null) {\n    StringTokenizer tokenizer = new StringTokenizer(line);\n    while (tokenizer.hasMoreElements()) {\n        Link record = new Link();\n        record.setBookName(tokenizer.nextToken());\n        record.setBookAuthor(tokenizer.nextToken());\n        record.setIsbn(tokenizer.nextToken());\n        record.setPublicYear(tokenizer.nextToken());\n        list.insert(record.getBookName(), record.getBookAuthor(), record.getIsbn(), record.getPublicYear());\n    }\n    System.out.println(line);\n}\n```\n\nThis will add each created Link object to the LinkList. Then, when you call `list.printList()`, it will print the data in the desired format.", "gpt_response": {"id": "chatcmpl-8WhhEGgdHlYb1GYy8xd84u6tDgThH", "object": "chat.completion", "created": 1702805156, "model": "gpt-3.5-turbo-0613", "choices": [{"index": 0, "message": {"role": "assistant", "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: The code is using StringTokenizer.nextToken to break each line of the file into separate tokens and assign them to the corresponding fields of the Link object.\n<<<explanation>>>: The issue with the code is that it is not adding the created Link object to the LinkList. Inside the while loop where the tokens are assigned to the Link object, you need to add the record to the list using the insert method. Here's the modified code:\n\n```java\nwhile ((line = br.readLine()) != null) {\n    StringTokenizer tokenizer = new StringTokenizer(line);\n    while (tokenizer.hasMoreElements()) {\n        Link record = new Link();\n        record.setBookName(tokenizer.nextToken());\n        record.setBookAuthor(tokenizer.nextToken());\n        record.setIsbn(tokenizer.nextToken());\n        record.setPublicYear(tokenizer.nextToken());\n        list.insert(record.getBookName(), record.getBookAuthor(), record.getIsbn(), record.getPublicYear());\n    }\n    System.out.println(line);\n}\n```\n\nThis will add each created Link object to the LinkList. Then, when you call `list.printList()`, it will print the data in the desired format."}, "logprobs": null, "finish_reason": "stop"}], "usage": {"prompt_tokens": 1315, "completion_tokens": 238, "total_tokens": 1553}, "system_fingerprint": null}}