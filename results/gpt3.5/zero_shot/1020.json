{
    "id": "chatcmpl-7lxUTxEE7aciZsJL9F8geClxBTLjn",
    "object": "chat.completion",
    "created": 1691664453,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: \nThe code provided is missing the main method and the necessary code to call the inputLineData() method. Here is an example of how you can modify the code to make it work:\n\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main {\n    public static void main(String[] args) {\n        inputLineData();\n    }\n\n    public static void inputLineData() {\n        Scanner key = new Scanner(System.in);\n        System.out.println(\"Plz enter your all numbers\");\n        String strAll = key.nextLine();\n        StringTokenizer st = new StringTokenizer(strAll);\n        int n1 = Integer.parseInt(st.nextToken());\n        String str = st.nextToken();\n        int n2 = Integer.parseInt(st.nextToken());\n        switch (str.charAt(0)) {\n            case '+':\n                PlusCalc P = new PlusCalc(n1, n2);\n                System.out.println(\"Result: \" + P.func());\n                break;\n            case '-':\n                MinusCalc M = new MinusCalc(n1, n2);\n                System.out.println(\"Result: \" + M.func());\n                break;\n            default:\n                System.out.println(\"Error!\");\n        }\n    }\n}\n\nclass MinusCalc extends Calc {\n    public MinusCalc(int n1, int n2) {\n        super(n1, n2);\n    }\n\n    @Override\n    public int func() {\n        return n1 - n2;\n    }\n}\n\nclass PlusCalc extends Calc {\n    public PlusCalc(int n1, int n2) {\n        super(n1, n2);\n    }\n\n    @Override\n    public int func() {\n        return n1 + n2;\n    }\n}\n\nabstract class Calc {\n    int n1, n2;\n\n    public Calc(int n1, int n2) {\n        this.n1 = n1;\n        this.n2 = n2;\n    }\n\n    public abstract int func();\n}\n\n<<<explanation>>>: \nThe modified code includes the main method and the necessary code to call the inputLineData() method. The inputLineData() method prompts the user to enter a string containing two numbers and an operator. It then uses the StringTokenizer class to extract the numbers and operator from the input string. Based on the operator, it creates an instance of either the PlusCalc or MinusCalc class and calls the func() method to perform the calculation. The result is then printed to the console."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 521,
        "completion_tokens": 500,
        "total_tokens": 1021
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: A Program With StringTokenizer in Java: :Closed. This question needs debugging details. It is not currently accepting answers.                                                             Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.Closed 6 years ago.                        Improve this question                    I wrote a simple calculation program. I want users to enter their request as 12+12 and return the answer. I used StringTokenizer, but I got an error and it doesn't show me any result. There was a mention that Calc is a superclass and MinusCalc and PlusCalc are subclasses. Does anyone have any idea?    void inputLineData() { // This is just the function that use for this case                                    System.out.println(\" Plz enter your all numbers\");    String strAll = key.next();    StringTokenizer st = new StringTokenizer(strAll);    int n1 = Integer.parseInt(st.nextToken());    String str = st.nextToken();    int n2 =  Integer.parseInt(st.nextToken());    switch (str.charAt(0)) {        case '+':            PlusCalc P = new PlusCalc(n1, n2);            listCalc[indexCalc] = P;            indexCalc++;            break;        case '-':            MinusCalc M = new MinusCalc(n1, n2);            listCalc[indexCalc] = M;            indexCalc++;            break;        default:            System.out.println(\"Error!\");      }  }And this is  MinusCalc class:   public class MinusCalc extends Calc {@Overridepublic int func(){    return n1 - n2 ; }public MinusCalc(int n1, int n2) {    super(n1, n2);   } }And this is  PlusCalc class:   public class PlusCalc extends Calc { @Overridepublic int func(){    return n1 + n2;}public PlusCalc(int n1, int n2) {    super(n1, n2);  }}And this is Calc class:    public abstract class Calc {   public Calc(int n1, int n2) { // constructor with parameters!!    this.n1 = n1;    this.n2 = n2;}int n1,n2;public abstract int func();}\nPlease using this api: StringTokenizer.nextToken.\nAnswer:"
}