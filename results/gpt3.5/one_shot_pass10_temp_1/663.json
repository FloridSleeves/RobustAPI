{
    "id": "chatcmpl-8HetqkG9y0wwQfOSK0L32Dj0Bg3OH",
    "object": "chat.completion",
    "created": 1699219486,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try {\n    FileReader fr = new FileReader(\"Library.txt\");\n    BufferedReader br = new BufferedReader(fr);\n    String line;\n    while ((line = br.readLine()) != null) {\n        String[] manualData = line.split(\":\");\n        if (manualData.length >= 2) {\n            String serial = manualData[1].trim();\n            String title = manualData[3].trim();\n            String author = manualData[5].trim();\n            String publicationYear = manualData[7].trim();\n            String status = manualData[9].trim();\n            String borrower = manualData[11].trim();\n            String borrowDate = manualData[13].trim();\n            String returnDate = manualData[15].trim();\n            Manual newManual = new Manual(serial, title, author, publicationYear, status, borrower, borrowDate, returnDate);\n            ManualList.add(newManual);\n        }\n    }\n    br.close();\n} catch (IOException e) {\n    System.out.println(\"Error! File not found\");\n}\n<<<explanation>>>: In order to load the saved manuals from the text file into the \"ManualList\" array, you need to read the file line by line using a BufferedReader. Then, you can split each line into separate variables using the \":\" delimiter. Finally, you can create a new instance of the Manual class with the extracted data and add it to the ManualList array."
            },
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try {\n    FileReader fr = new FileReader(\"Library.txt\");\n    BufferedReader br = new BufferedReader(fr);\n    String line;\n    while ((line = br.readLine()) != null) {\n        Manual manual = new Manual();\n        manual.serial = line.substring(line.indexOf(\"Serial Number: ........... \") + \"Serial Number: ........... \".length());\n        line = br.readLine();\n        manual.title = line.substring(line.indexOf(\"Title: ................... \") + \"Title: ................... \".length());\n        line = br.readLine();\n        manual.author = line.substring(line.indexOf(\"Author: .................. \") + \"Author: .................. \".length());\n        line = br.readLine();\n        manual.publicationYear = line.substring(line.indexOf(\"Publication Year: ........ \") + \"Publication Year: ........ \".length());\n        line = br.readLine();\n        manual.status = line.substring(line.indexOf(\"Status: .................. \") + \"Status: .................. \".length());\n        line = br.readLine();\n        manual.borrower = line.substring(line.indexOf(\"Borrower: ................ \") + \"Borrower: ................ \".length());\n        line = br.readLine();\n        manual.borrowDate = line.substring(line.indexOf(\"Date Borrowed: ........... \") + \"Date Borrowed: ........... \".length());\n        line = br.readLine();\n        manual.returnDate = line.substring(line.indexOf(\"Return date: ............. \") + \"Return date: ............. \".length());\n        line = br.readLine();\n        Library.ManualList.add(manual);\n    }\n    br.close();\n} catch (IOException e) {\n    System.out.println(\"Error! File not found\");\n}\n<<<explanation>>>: In order to load the saved manuals into the ManualList array, you can use a FileReader and BufferedReader to read the contents of the \"Library.txt\" file. You can then parse each line of the file and assign the values to a new Manual object, and add that object to the ManualList array.\n\n\nHere is the modified code that loads the saved manuals into the ManualList array:\n\ntry {\n    FileReader fr = new FileReader(\"Library.txt\");\n    BufferedReader br = new BufferedReader(fr);\n    String line;\n    while ((line = br.readLine()) != null) {\n        Manual manual = new Manual();\n        manual.serial = line.substring(line.indexOf(\"Serial Number: ........... \") + \"Serial Number: ........... \".length());\n        line = br.readLine();\n        manual.title = line.substring(line.indexOf(\"Title: ................... \") + \"Title: ................... \".length());\n        line = br.readLine();\n        manual.author = line.substring(line.indexOf(\"Author: .................. \") + \"Author: .................. \".length());\n        line = br.readLine();\n        manual.publicationYear = line.substring(line.indexOf(\"Publication Year: ........ \") + \"Publication Year: ........ \".length());\n        line = br.readLine();\n        manual.status = line.substring(line.indexOf(\"Status: .................. \") + \"Status: .................. \".length());\n        line = br.readLine();\n        manual.borrower = line.substring(line.indexOf(\"Borrower: ................ \") + \"Borrower: ................ \".length());\n        line = br.readLine();\n        manual.borrowDate = line.substring(line.indexOf(\"Date Borrowed: ........... \") + \"Date Borrowed: ........... \".length());\n        line = br.readLine();\n        manual.returnDate = line.substring(line.indexOf(\"Return date: ............. \") + \"Return date: ............. \".length());\n        line = br.readLine();\n        Library.ManualList.add(manual);\n    }\n    br.close();\n} catch (IOException e) {\n    System.out.println(\"Error! File not found\");\n}\n\nThis code reads each line from the \""
            },
            "finish_reason": "length"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try {\n    FileReader fr = new FileReader(\"Library.txt\");\n    BufferedReader br = new BufferedReader(fr);\n    String line;\n    while ((line = br.readLine()) != null) {\n        // Split the line into separate fields\n        String[] fields = line.split(\":\");\n        // Store the fields into variables\n        String serial = fields[1].trim();\n        String title = fields[3].trim();\n        String author = fields[5].trim();\n        String publicationYear = fields[7].trim();\n        String status = fields[9].trim();\n        String borrower = fields[11].trim();\n        String borrowDate = fields[13].trim();\n        String returnDate = fields[15].trim();\n        \n        // Create a new Manual object and add it to the ManualList array\n        Manual newManual = new Manual();\n        newManual.serial = serial;\n        newManual.title = title;\n        newManual.author = author;\n        newManual.publicationYear = publicationYear;\n        newManual.status = status;\n        newManual.borrower = borrower;\n        newManual.borrowDate = borrowDate;\n        newManual.returnDate = returnDate;\n        Library.ManualList.add(newManual);\n    }\n    br.close();\n} catch (IOException e) {\n    System.out.println(\"Error! File not found\");\n}\n\n<<<explanation>>>: In order to store the saved manuals into the manual array, you need to read the file line by line and split each line into separate fields. Then, you can create a new Manual object and assign each field value to the corresponding attributes of the Manual object. Finally, you can add the Manual object to the ManualList array."
            },
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try { \n                FileReader fr = new FileReader(\"Library.txt\"); \n                BufferedReader br = new BufferedReader(fr); \n                \n                String str; \n                while ((str = br.readLine()) != null) { \n                    String[] manualInfo = str.split(\"\\\\s+\"); \n                    Manual manual = new Manual(); \n                    manual.serial = manualInfo[4]; \n                    manual.title = manualInfo[12]; \n                    manual.author = manualInfo[17]; \n                    manual.publicationYear = manualInfo[25]; \n                    manual.status = manualInfo[33]; \n                    manual.borrower = manualInfo[43]; \n                    manual.borrowDate = manualInfo[56]; \n                    manual.returnDate = manualInfo[58]; \n                    \n                    Library.ManualList.add(manual); \n                } \n                \n                br.close(); \n            } catch (IOException e) { \n                System.out.println(\"Error! File not found\"); \n            }\n<<<explanation>>>: You can read the saved manuals from the text file line by line using BufferedReader. Split each line into an array of strings using the appropriate delimiter (whitespace in this case). Extract the relevant information and create a new Manual object. Add the manual to the ManualList ArrayList. Repeat this process until all lines have been read."
            },
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try {\n   FileReader fr = new FileReader(\"Library.txt\");\n   BufferedReader br = new BufferedReader(fr);\n   String line;\n   while ((line = br.readLine()) != null) {\n      String[] manualInfo = line.split(\":\");\n      Manual manual = new Manual();\n      manual.serial = manualInfo[1].trim();\n      manual.title = manualInfo[3].trim();\n      manual.author = manualInfo[5].trim();\n      manual.publicationYear = manualInfo[7].trim();\n      manual.status = manualInfo[9].trim();\n      manual.borrower = manualInfo[11].trim();\n      manual.borrowDate = manualInfo[13].trim();\n      manual.returnDate = manualInfo[15].trim();\n      Library.ManualList.add(manual);\n   }\n   br.close();\n} catch (IOException e) {\n   System.out.println(\"Error! File not found\");\n}\n<<<explanation>>>: This code reads each line from the \"Library.txt\" file, splits it by the \":\" character, and assigns the values to the corresponding fields of a new Manual object. The Manual object is then added to the ManualList ArrayList in the Library class."
            },
            "finish_reason": "stop"
        },
        {
            "index": 5,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try {\n    FileReader fr = new FileReader(\"Library.txt\");\n    BufferedReader br = new BufferedReader(fr);\n    String line;\n    while ((line = br.readLine()) != null) {\n        String[] attributes = line.split(\":\");\n        Manual newManual = new Manual();\n        newManual.serial = attributes[1].trim();\n        newManual.title = attributes[3].trim();\n        newManual.author = attributes[5].trim();\n        newManual.publicationYear = attributes[7].trim();\n        newManual.status = attributes[9].trim();\n        newManual.borrower = attributes[11].trim();\n        newManual.borrowDate = attributes[13].trim();\n        newManual.returnDate = attributes[15].trim();\n        Library.ManualList.add(newManual);\n    }\n    br.close();\n} catch (IOException e) {\n    System.out.println(\"Error! File not found\");\n}\n<<<explanation>>>: The code reads each line from the text file and splits it into an array of attributes. Then, a new Manual object is created and the attributes are assigned accordingly. Finally, the new Manual object is added to the ManualList ArrayList in the Library class."
            },
            "finish_reason": "stop"
        },
        {
            "index": 6,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try {\n            FileReader fr = new FileReader(\"Library.txt\");\n            BufferedReader br = new BufferedReader(fr);\n            String line;\n            while ((line = br.readLine()) != null) {\n                String[] manualInfo = line.split(\":\");\n                Manual newManual = new Manual();\n                newManual.serial = manualInfo[1].trim();\n                newManual.title = manualInfo[3].trim();\n                newManual.author = manualInfo[5].trim();\n                newManual.publicationYear = manualInfo[7].trim();\n                newManual.status = manualInfo[9].trim();\n                newManual.borrower = manualInfo[11].trim();\n                newManual.borrowDate = manualInfo[13].trim();\n                newManual.returnDate = manualInfo[15].trim();\n                Library.ManualList.add(newManual);\n            }\n            br.close();\n        } catch (IOException e) {\n            System.out.println(\"Error! File not found\");\n        }\n<<<explanation>>>: To load the text file data back into the ManualList array, you can use a FileReader and BufferedReader to read each line of the file. Then, split each line by \":\" to separate the different Manual fields and trim whitespace from the values. Create a new Manual object and set its fields using the split values. Finally, add the new Manual to the ManualList array."
            },
            "finish_reason": "stop"
        },
        {
            "index": 7,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try { \n   FileReader fr = new FileReader(\"Library.txt\"); \n   BufferedReader br = new BufferedReader(fr); \n   String line; \n   while ((line = br.readLine()) != null) { \n       // Split the line into parts and extract the relevant information \n       String[] parts = line.split(\":\"); \n       String serial = parts[1].trim(); \n       String title = parts[3].trim(); \n       String author = parts[5].trim(); \n       String publicationYear = parts[7].trim(); \n       String status = parts[9].trim(); \n       String borrower = parts[11].trim(); \n       String borrowDate = parts[13].trim(); \n       String returnDate = parts[15].trim(); \n       \n       // Create a new Manual object and add it to the ManualList\n       Manual manual = new Manual();\n       manual.serial = serial;\n       manual.title = title;\n       manual.author = author;\n       manual.publicationYear = publicationYear;\n       manual.status = status;\n       manual.borrower = borrower;\n       manual.borrowDate = borrowDate;\n       manual.returnDate = returnDate;\n       Library.ManualList.add(manual);\n   }\n   br.close();\n} catch (IOException e) {\n   System.out.println(\"Error! File not found\");\n}\n<<<explanation>>>: The code reads each line from the text file using BufferedReader and splits it into parts using the colon as a delimiter. Then, it extracts the relevant information from each part and creates a new Manual object with the extracted data. Finally, it adds the Manual object to the ManualList ArrayList."
            },
            "finish_reason": "stop"
        },
        {
            "index": 8,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try {\n    FileReader fr = new FileReader(\"Library.txt\");\n    BufferedReader br = new BufferedReader(fr);\n    String line;\n    while ((line = br.readLine()) != null) {\n        String[] parts = line.split(\":\"); // assuming each line has a colon separating the key from the value\n        String key = parts[0].trim();\n        String value = parts[1].trim();\n        // store the values into the Manual object\n        if (key.equals(\"Serial Number\")) {\n            serial = value;\n        } else if (key.equals(\"Title\")) {\n            title = value;\n        } else if (key.equals(\"Author\")) {\n            author = value;\n        } else if (key.equals(\"Publication Year\")) {\n            publicationYear = value;\n        } else if (key.equals(\"Status\")) {\n            status = value;\n        } else if (key.equals(\"Borrower\")) {\n            borrower = value;\n        } else if (key.equals(\"Date Borrowed\")) {\n            borrowDate = value;\n        } else if (key.equals(\"Return date\")) {\n            returnDate = value;\n        }\n    }\n    br.close();\n} catch (IOException e) {\n    System.out.println(\"Error! File not found\");\n}\n<<<explanation>>>: The code reads each line from the text file and splits it into key-value pairs using the colon. It then assigns the values to the corresponding fields in the Manual object. Make sure the text file is formatted properly with each line containing a key-value pair."
            },
            "finish_reason": "stop"
        },
        {
            "index": 9,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: try {\n            FileReader fr = new FileReader(\"Library.txt\");\n            BufferedReader br = new BufferedReader(fr);\n            String str;\n            while ((str = br.readLine()) != null) {\n                String[] manualInfo = str.split(\":\");\n                Manual newManual = new Manual();\n                newManual.serial = manualInfo[1].trim();\n                newManual.title = manualInfo[2].trim();\n                newManual.author = manualInfo[3].trim();\n                newManual.publicationYear = manualInfo[4].trim();\n                newManual.status = manualInfo[5].trim();\n                newManual.borrower = manualInfo[6].trim();\n                newManual.borrowDate = manualInfo[7].trim();\n                newManual.returnDate = manualInfo[8].trim();\n                Library.ManualList.add(newManual);\n            }\n            br.close();\n        } catch (IOException e) {\n            System.out.println(\"Error! File not found\");\n        }\n<<<explanation>>>: In the load code, you need to read each line from the BufferedReader and then split that line into separate fields using a delimiter (in this case, \":\"). After splitting the line, you can assign the values to the Manual object's fields and add it to the ManualList ArrayList."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 3349,
        "completion_tokens": 3365,
        "total_tokens": 6714
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Java Sockets: Send multiple lines and receive multiple lines [duplicate]:\nI am sending multiple lines to a ServerSocket using a PrintWriter.\nPrintWriter printWriter = ...\nprintWriter.write(\"1\");\nprintWriter.write(\"2\");\nprintWriter.write(\"3\");\nThen I am trying to receive it with a BufferedReader\nServerSocket serverSocket = ...\nSocket socket = serverSocket.accept();\nBufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\nSystem.out.println(bufferedReader.readLine());\nI am of course closing all the resources, I wrote this code only to visualize the problem. That prints 123 but it is supposed to print 1. How can I fix that?\n\nPlease using this api: PrintWriter.write.\nAnswer:<<<api>>>: PrintWriter.write\n<<<code>>>: try { printWriter.write(\"1\n\"); } catch (Exception e) { e.printStackTrace(); }\n<<<explanation>>>: The problem is that you are writing string without a line break. But BufferedReader expects one of the line characters mentioned above which you are not providing. It does output the whole buffer once the end of the stream is reached though.\nQuestion: Storing text file data into array: :I am working on a small library application which allows technical manuals to be stored, borrowed, returned and deleted.Currently I have implemented a save feature to save the library contents to an external text file. I wish for this then to be loaded each time the application has started, but currently when I try and load the text file back into my application, it just prints the contents to the console.Heres an example of what I mean:Here is the save code from my Manuals class:import java.io.*;import java.util.Scanner;public class Manual {String serial;String title;String author;String publicationYear;String status;String borrower;String borrowDate;String returnDate;  Scanner userInput = new Scanner(System.in); /** * Display the Manual: * @return ManualInfo */final String displayManual(){        String ManualInfo =\"\\nSerial Number: ........... \"+serial+                     \"\\nTitle: ................... \"+title+                    \"\\nAuthor: .................. \"+author+                    \"\\nPublication Year: ........ \"+publicationYear+                    \"\\nStatus: .................. \"+status+                    \"\\nBorrower: ................ \"+borrower+                    \"\\nDate Borrowed: ........... \"+borrowDate+                    \"\\nReturn date: ............. \"+returnDate+                    \"\\n\";    return ManualInfo;  }   /** * Creates the Manual. */final void createManual(){    serial = Console.readString(Messages.enterSerialMessage, Messages.tooShortMessage, 3);    title = Console.readString(Messages.enterTitleMessage, Messages.tooShortMessage, 2);    author = Console.readString(Messages.enterAuthorMessage, Messages.tooShortMessage, 3);    publicationYear = Console.readString(Messages.enterPublicationYearMessage, Messages.tooShortMessage, 4);        borrower = \"N/A\";    borrowDate = \"N/A\";    returnDate = \"N/A\";        status = \"Available\";}   /*** * Runs the main part of the program and terminates if the choice is 0. */public void run(){        User.addUser();    Menu.displayMenu();//Displays the main menu and ask for choice.        exit:                   while(Menu.menuChoice != 0){                                    if(Menu.menuChoice == 1 && Library.ManualList.size() > 0){                                      Library.displayManualList();                boolean saveYesNo = Console.readYesNo(\"The ManualKeeper\u00ae app is able to save your current library to a '.txt' \\nfile in your workspace directory.\\n\\nWould you like to save the current library? (Y/N):\\n\");                if(saveYesNo){                    try {                        FileWriter fw = new FileWriter(\"Library.txt\");                        PrintWriter pw = new PrintWriter(fw);                        for (int i1 = 0; i1 < Library.ManualList.size(); i1++){                            pw.println(\"-------------------- Index Number: \" + i1 + \" --------------------\");                            pw.println(Library.ManualList.get(i1).displayManual());                            pw.println(\"---------------------------------------------------------\\n\");                        }                        pw.close();                    } catch (IOException e) {                        System.out.println(\"Error! Library unable to save.\");                    }                    System.out.println(\"\\n\\n--------------------------------------------------------------------------\");                    System.out.println(\"\\n                              Library saved!\\n\");                    System.out.println(\"--------------------------------------------------------------------------\\n\");                }                    else if(saveYesNo){                        System.out.println(\"\\n\");                }                   Menu.displayMenu();            }                        if(Menu.menuChoice == 1 && Library.ManualList.isEmpty()){                System.out.println(Messages.addManualFirst);                Menu.displayMenu();            }            if(Menu.menuChoice == 1 && Library.ManualList.size() > 0){                                      Library.displayManualList();                boolean saveYesNo = Console.readYesNo(\"The ManualKeeper\u00ae app is able to save your current library to a '.txt' \\nfile in your workspace directory.\\n\\nWould you like to save the current library? (Y/N):\\n\");                if(saveYesNo){                    try {                        FileWriter fw = new FileWriter(\"Library.txt\");                        PrintWriter pw = new PrintWriter(fw);                        for (int i1 = 0; i1 < Library.ManualList.size(); i1++){                            pw.println(\"-------------------- Index Number: \" + i1 + \" --------------------\");                            pw.println(Library.ManualList.get(i1).displayManual());                            pw.println(\"---------------------------------------------------------\\n\");                        }                        pw.close();                    } catch (IOException e) {                        System.out.println(\"Error! Library unable to save.\");                    }                    System.out.println(\"\\n\\n--------------------------------------------------------------------------\");                    System.out.println(\"\\n                              Library saved!\\n\");                    System.out.println(\"--------------------------------------------------------------------------\\n\");                }                    else if(saveYesNo){                        System.out.println(\"\\n\");                }                   Menu.displayMenu();            }                        if(Menu.menuChoice == 1 && Library.ManualList.isEmpty()){                System.out.println(Messages.addManualFirst);                Menu.displayMenu();            }Here is the load code from my startLibary class:public static void main(String[] args){    System.out.println(\"\\n--------------------------------------------------------------------------\");    System.out.println(\"\\n                 Welcome to the ManualKeeper\u00ae library app!\");    System.out.println(\"\\n--------------------------------------------------------------------------\\n\");    boolean loadYesNo = Console.readYesNo(\"The ManualKeeper\u00ae app is able to load any 'Library.txt' files found in \\nyour workspace directory.\\n\\nWould you like to load a library? (Y/N):\\n\");    if(loadYesNo){    try {        FileReader fr = new FileReader(\"Library.txt\");        BufferedReader br = new BufferedReader(fr);                String str;        while ((str = br.readLine()) != null) {            System.out.println(str + \"\\n\");        }                br.close();    } catch (IOException e) {        System.out.println(\"Error! File not found\");    }    }        Manual newManual = new Manual();    newManual.run();            }//End of Main Method.}Here is the code from my \"Library\" class:package library;import java.util.ArrayList;public class Library {  /** The Manual choice. */public static int ManualChoice;static String returnManualTitle;    /** The status1. */static String status1 = \"Available\";/** The status2. */static String status2 = \"Borrowed\"; /** The Manual list. */static ArrayList<Manual> ManualList = new ArrayList<Manual>();static ArrayList<Manual> borrowedManuals = new ArrayList<Manual>();/** * Adds the Manual. */static void addManual(){    Manual newManual = new Manual(); //create new Manual object with status \"Available.\"    newManual.createManual();    ManualList.add(newManual);//add the Manual to the ManualList ArrayList.    System.out.println(\"\\n\\n--------------------------------------------------------------------------\");    System.out.println(\"\\n                          Manual added to library!\\n\");    System.out.println(\"--------------------------------------------------------------------------\\n\");}/** * Display Manual list. */static void displayManualList(){    if (ManualList.isEmpty()){//If the library is empty, it goes back to main menu and choice.        System.out.println(\"-------------------------------------------------------------\");        System.out.println(Messages.empltyLibraryMessage + Messages.tryAgainMessage);        System.out.println(\"-------------------------------------------------------------\");        Menu.menuChoice = 7;            } else {            System.out.printf(\"\\n\\nHere are the Manual/s currently stored in the library:\\n\\n\\n\");        for (int i = 0; i < ManualList.size(); i++){            System.out.printf(\"-------------------- Index Number: %s --------------------\\n\",i);            System.out.println(ManualList.get(i).displayManual());              System.out.println(\"---------------------------------------------------------\\n\");            }        }//End of For Loop.             }// End of Else Statement.          static void displayBorrowedManuals(){    if (ManualList.isEmpty()){//If the library is empty, it goes back to main menu and choice.        System.out.println(\"-------------------------------------------------------------\");        System.out.println(Messages.empltyLibraryMessage + Messages.tryAgainMessage);        System.out.println(\"-------------------------------------------------------------\");        Menu.menuChoice = 7;            } else {                            for (int i = 0; i < borrowedManuals.size(); i++){            System.out.printf(\"-------------------- Index Number: %s --------------------\\n\",i);            System.out.println(borrowedManuals.get(i).displayManual());             System.out.println(\"---------------------------------------------------------\");        }//End of For Loop.             }// End of Else Statement.          }//End of if Statement./** * Borrow Manual. */public static void borrowManual(){    //register user's Manual choice.    displayManualList();    ManualChoice = (Console.readInteger(Messages.enterManualIndexMessage, Messages.ManualIndexNotInListMessage, 0, Library.ManualList.size() - 1));        borrowLoop:    while(Menu.menuChoice == 3){        //Check if the Manual to be borrowed is available.        //ManualChoice = (Console.readInteger(Messages.enterManualIndexMessage, Messages.ManualIndexNotInListMessage, 1, Library.ManualList.size()));        if ((ManualList.get(ManualChoice).status.equalsIgnoreCase(status1)) && (ManualList.size() >= ManualChoice)){            //Print the borrowed Manual information and change the Manual status to borrowed.            ManualList.get(ManualChoice).status = \"Borrowed\";            ManualList.get(ManualChoice).borrower = User.userName;            ManualList.get(ManualChoice).borrowDate = \"Today.\";            ManualList.get(ManualChoice).returnDate = \"In two weeks.\";            //Add the borrowed Manual to the borrowedManuals arraylist:            borrowedManuals.add(ManualList.get(ManualChoice));            System.out.println(\"\\n--------------------------------------------------------------------------\");            System.out.println(\"\\n                             Manual borrowed!\\n\");            System.out.println(\"--------------------------------------------------------------------------\\n\");            break borrowLoop;                    }else if(ManualList.get(ManualChoice).status.equalsIgnoreCase(status2) && ManualList.size() >= ManualChoice){            System.out.println(\"\\n--------------------------------------------------------------------------\");            System.out.println(\"\\n            \"                    + \" The Manual you wish to borrow is already on loan.\");            System.out.println(\"\\n--------------------------------------------------------------------------\\n\");            break borrowLoop;                    }else if(ManualChoice > ManualList.size()-1){            System.out.println(Messages.noSuchManualMessage);            break borrowLoop;        }    if(ManualList.size() > 1){        displayManualList();    }    else if(ManualList.size() == 1){        ManualList.get(ManualChoice).status = \"Borrowed\";        ManualList.get(ManualChoice).borrower = User.userName;        ManualList.get(ManualChoice).borrowDate = \"Today.\";        ManualList.get(ManualChoice).returnDate = \"In two weeks.\";        borrowedManuals.add(ManualList.get(ManualChoice));        System.out.printf(\"\\n\\nOSCAR YOU SHOULD NOT BE SEEING THIS!!!!!!!\\n\\n %s\\n\\n\", ManualList.get(ManualChoice).displayManual());        System.out.println(\"Please return the Manual within two weeks!\\n\");        displayManualList();        }    }    Menu.displayMenu();}/** * Return Manual. */static void returnManual(){    System.out.printf(\"\\n\\nHere are the Manual/s currently out on loan:\\n\\n\");        if(borrowedManuals.size() > 0){    for (int i = 0; i < borrowedManuals.size(); i++)        System.out.println(borrowedManuals.get(i).displayManual());        returnManualTitle = Console.readString(Messages.enterManualSerial, Messages.tooShortMessage, 3);    }        int x = 0;    boolean serialExistance = false;    while (x < ManualList.size()){//Search for the Manual by title, if it exists change it's status,                                //it's borrower and borrowDate.                if (ManualList.get(x).serial.equalsIgnoreCase(returnManualTitle)){                        ManualList.get(x).status = \"Available\";            ManualList.get(x).borrower = \"N/A\";            ManualList.get(x).borrowDate = \"N/A\";            ManualList.get(x).returnDate = \"N/A\";                        int p = 0;                while (p < borrowedManuals.size()) {                    Manual borrowed = borrowedManuals.get(p); // guessing the name of this class                    if (borrowed.serial.equalsIgnoreCase(returnManualTitle)) {                        borrowedManuals.remove(p);                        break;                    }                    p++;                }                           System.out.println(Messages.successReturnMessage);            serialExistance = true;                        break;//if a title is found, break out of the loop and display choice menu.        }        x = x+1;    }//end of while loop.    if(serialExistance == false){        boolean repeatReturnManual = Console.readYesNo(\"\\n--------------------------------------------------------------------------\" + \"\\n\\nThe Manual with the title \"+\"\\\"\"+returnManualTitle +\"\\\"\"+ \" wasn't found!\"                                                        +\"\\n\\nDo you want to try again? (Y/N):\\n\");        System.out.println(\"\\n--------------------------------------------------------------------------\");        if(repeatReturnManual){            returnManual();        }    }else if(serialExistance){        Menu.menuChoice = 7;    }               }/** * Removes the Manual. */public static void removeManual(){        if(ManualList.size() >0){        displayManualList();        ManualChoice = Console.readInteger(Messages.enterRemoveManualIndex ,Messages.ManualIndexNotInListMessage, 0, ManualList.size());                int p = 0;        while (p < borrowedManuals.size()){//Search for the Manual by title, if it exists change it's status,            //it's borrower and borrowDate.            if (borrowedManuals.get(p).title.equalsIgnoreCase(returnManualTitle)){                borrowedManuals.remove(p);            }        }        ManualList.remove(ManualChoice);        System.out.print(Messages.successRemovedManualMessages);        Menu.menuChoice = 7;    }               }/** * Empty library. */static void emptyLibrary(){    System.out.println(\"\\n                                 WARNING!\");    System.out.println(\"\\n           You have chosen to delete all Manuals in the library.\\n\");     System.out.println(\"--------------------------------------------------------------------------\");    boolean emptyLibraryChoice = Console.readYesNo(\"\\nAre you sure you wish to destroy the library? (Y/N): \\n\");    System.out.println(\"\\n--------------------------------------------------------------------------\\n\");    if(emptyLibraryChoice){        Library.ManualList.clear();        System.out.println(Messages.successEmptyLibraryMesssage);        System.out.println(\"--------------------------------------------------------------------------\\n\");        Menu.menuChoice = 7;        }            }}If anyone has an idea of how to store the saved manuals into the manuals array, please let me know. I am new to Java and have been struggling with this for some time!\nPlease using this api: PrintWriter.write.\nAnswer:"
}