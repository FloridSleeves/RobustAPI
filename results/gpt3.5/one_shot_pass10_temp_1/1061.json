{
    "id": "chatcmpl-8HgFCDGnP4lLgSDplxygRVxV4My4S",
    "object": "chat.completion",
    "created": 1699224654,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>: while (tokenizer.hasMoreTokens()) {\n                Link record = new Link();\n                record.setBookName(tokenizer.nextToken());\n                record.setBookAuthor(tokenizer.nextToken());\n                record.setIsbn(tokenizer.nextToken());\n                record.setPublicYear(tokenizer.nextToken());\n            }\n<<<explanation>>>: The issue with your code is that you are not properly handling the case where there are not enough tokens in the line. In your code, you assume that there will always be four tokens in each line. However, if there are empty fields, there will be fewer than four tokens. \n\nTo fix this, you need to use the `hasMoreTokens()` method to check if there are more tokens before calling `nextToken()`. This will ensure that you don't encounter a `NoSuchElementException` when there are not enough tokens. By using a `while` loop, you can iterate through all the tokens in the line, regardless of the number of tokens."
            },
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: \n\n// Instead of using StringTokenizer, you can split the line using the delimiter and then assign the values to the Link object.\nString[] tokens = line.split(\" \") ;\nLink record = new Link() ;                    \nrecord.setBookName(tokens[0]) ;                     \nrecord.setBookAuthor(tokens[1]) ;                     \nrecord.setIsbn(tokens[2]) ;                     \nrecord.setPublicYear(tokens[3]) ;\n\n<<<explanation>>>: The issue with the code is that StringTokenizer is not splitting the line correctly. By using the split() method of String class, you can split the line into an array of tokens. Then you can assign the values to the Link object accordingly."
            },
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>:     while (tokenizer.hasMoreTokens()) {\n                    Link record = new Link();\n                    record.setBookName(tokenizer.nextToken());\n                    record.setBookAuthor(tokenizer.nextToken());\n                    record.setIsbn(tokenizer.nextToken());\n                    record.setPublicYear(tokenizer.nextToken());\n                    list.insert(record.getBookName(), record.getBookAuthor(), record.getIsbn(), record.getPublicYear());\n                }\n                System.out.println (line) ;\n<<<explanation>>>: The issue with your code is that you are not adding the newly created `Link` object to the `LinkList` `list`. In the `while` loop, you need to create a `Link` object with the token values and then insert it into the `list` using the `insert()` method. Additionally, you can print the line after processing the tokens using `System.out.println(line)`."
            },
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: while (tokenizer.hasMoreElements()) {\n                Link record = new Link();\n                record.setBookName(tokenizer.nextToken());\n                record.setBookAuthor(tokenizer.nextToken());\n                record.setIsbn(tokenizer.nextToken());\n                record.setPublicYear(tokenizer.nextToken());\n            }\n            System.out.println(line);\n            list.printList();\n            \n            // Add this code to initialize the StringTokenizer with the correct delimiter\n            StringTokenizer tokenizer = new StringTokenizer(line, \" \");\n            \n            // Modify the StringTokenizer creation to include the delimiter\n            StringTokenizer tokenizer = new StringTokenizer(line, \" \");\n            \n            // Modify the printLink() method to match the desired output format\n            public void printLink() {\n                System.out.println(\"Book Name: \" + getBookName());\n                System.out.println(\"Book's Author: \" + getBookAuthor());\n                System.out.println(\"Year Published: \" + getPublicYear());\n                System.out.println(\"ISBN: \" + getIsbn());\n                System.out.println();\n            }\n            \n            // Modify the insert() method to set the correct values in the Link object\n            public void insert(String bookNameIn, String bookAuthorIn, String isbnIn, String publicYearIn) {\n                Link link = new Link(bookNameIn, bookAuthorIn, isbnIn, publicYearIn);\n                link.nextLink = first;\n                first = link;\n            }\n            \n            // Modify the delete() method to check for empty list before deleting\n            public Link delete() {\n                if (isEmpty()) {\n                    return null;\n                }\n                Link temp = first;\n                first = first.nextLink;\n                return temp;\n            }\n            \n            // Modify the printList() method to check for empty list before printing\n            public void printList() {\n                if (isEmpty()) {\n                    System.out.println(\"List is empty\");\n                } else {\n                    Link currentLink = first;\n                    while (currentLink != null) {\n                        currentLink.printLink();\n                        currentLink = currentLink.nextLink;\n                    }\n                }\n            }\n            \n            // Modify the Link constructor to initialize nextLink to null\n            public Link() {\n                nextLink = null;\n            }"
            },
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public void printLink() {\n        System.out.print(\"Book Name: \" + getBookName() + \"\\n\" + \"Book's Author: \" + getBookAuthor() + \"\\n\" + \"Year Published: \" + getPublicYear() + \"\\n\" + \"ISBN: \" + getIsbn() + \"\\n\");\n        System.out.println(\"\");\n    }\n\n    class LinkList {\n        private Link first;\n\n        //...\n\n        //Prints list data\n        public void printList() {\n            Link currentLink = first;\n            while (currentLink != null) {\n                currentLink.printLink();\n                currentLink = currentLink.nextLink;\n            }\n            System.out.println(\"\");\n        }\n    }\n\n    public class TheList {\n        public static void main(String[] args) throws Exception {\n            //...\n\n            while ((line = br.readLine()) != null) {\n                StringTokenizer tokenizer = new StringTokenizer(line);\n                Link record = new Link();\n                record.setBookName(tokenizer.nextToken());\n                record.setBookAuthor(tokenizer.nextToken());\n                record.setIsbn(tokenizer.nextToken());\n                record.setPublicYear(tokenizer.nextToken());\n                list.insert(record.getBookName(), record.getBookAuthor(), record.getIsbn(), record.getPublicYear());\n            }\n            //...\n\n            list.printList();\n        }\n    }\n    \n<<<explanation>>>: In your code, you are not adding the Link objects with the data from the StringTokenizer to the LinkList. As a result, when you call list.printList(), it just prints the uninitialized Link objects. To fix this, you need to add the Link objects to the LinkList after setting their data from the StringTokenizer."
            },
            "finish_reason": "stop"
        },
        {
            "index": 5,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>: import java.io.*;\nimport java.util.*;\n\nclass Link{\n    public String isbn ;\n    public String bookName ;\n    public String bookAuthor ;\n    public String publicYear;\n    public Link nextLink;\n    \n    public Link ()    {    }\n    \n    public Link(String bookNameIn, String bookAuthorIn, String isbnIn, String publicYearIn)     {\n        setIsbn (isbnIn) ;\n        setBookName (bookNameIn) ;\n        setBookAuthor (bookAuthorIn) ;\n        setPublicYear (publicYearIn) ;\n    }\n  \n    public void setIsbn(String isbnIn)    {\n        isbn = isbnIn ;\n    }\n    \n    public void setBookName(String bookNameIn)    {\n        bookName = bookNameIn ;\n    }\n    \n    public void setBookAuthor(String bookAuthorIn)    {\n        bookAuthor = bookAuthorIn ;\n    }\n    \n    public void setPublicYear(String publicYearIn)    {\n        publicYear = publicYearIn ;\n    }\n  \n    public String getIsbn()    {\n        return isbn ;\n    }\n    \n    public String getBookName()    {\n        return bookName;\n    }\n    \n    public String getBookAuthor()    {\n        return bookAuthor ;\n    }\n    \n    public String getPublicYear()    {\n        return publicYear ;\n    }   \n  \n    public void printLink()    {\n        System.out.print(\"Book Name: \" + getBookName() + \"\\n\" + \"Book's Author: \" + getBookAuthor() + \"\\n\" + \"Year Published: \" + getPublicYear() + \"\\n\" + \"ISBN: \" + getIsbn() +\"\\n\");\n        System.out.println(\"\") ;\n    }\n}\n\nclass LinkList {\n    private Link first;\n  \n    public LinkList()    {\n        first = null;\n    }\n  \n    public boolean isEmpty()     {\n        return first == null;\n    }\n  \n    public void insert(String bookNameIn, String bookAuthorIn, String isbnIn, String publicYearIn)     {\n        Link link = new Link(bookNameIn, bookAuthorIn, isbnIn, publicYearIn) ;\n        link.nextLink = first;\n        first = link;\n    }\n    \n    public Link delete()     {\n        Link temp = first;\n        first = first.nextLink;\n        return temp;\n    }\n  \n    public void printList()    {\n        Link currentLink = new Link() ;\n        currentLink = first;\n        while(currentLink != null) {\n            currentLink.printLink();\n            currentLink = currentLink.nextLink;\n        }\n        System.out.println(\"\");\n    }\n}\n\npublic class TheList {\n    public static void main(String[] args) throws Exception    {\n        LinkList list = new LinkList();\n        File outputFile;\n        \n        do {\n            outputFile = new File(\"db.txt\");\n            if(!outputFile.exists()) {\n                outputFile.createNewFile ();\n                System.out.println(\"The file was created as db.txt\");\n                System.out.println(\"\");\n            }\n        } while (!outputFile.exists());\n        \n        try {\n            FileInputStream fileIn = new FileInputStream(\"db.txt\");\n            DataInputStream input = new DataInputStream (fileIn);\n            BufferedReader br = new BufferedReader (new InputStreamReader (input));\n            String line;\n            \n            while ((line = br.readLine()) != null) {\n                StringTokenizer tokenizer = new StringTokenizer(line);\n                \n                while (tokenizer.hasMoreElements()) {\n                    Link record = new Link();\n                    record.setBookName(tokenizer.nextToken());\n                    record.setBookAuthor(tokenizer.nextToken());\n                    record.setIsbn(tokenizer.nextToken());\n                    record.setPublicYear(tokenizer.nextToken());\n                }\n                System.out.println (line) ;\n            }\n            input.close();\n        } catch (Exception e){\n            System.err.println(\"Error. Could not read the file\") ;\n        }\n        list.printList();\n    }\n}\n  \n<<<explanation>>>: In the provided code, the StringTokenizer is correctly used to tokenize the string read from the file. However, there is a small mistake in the way the Link objects are created. Currently, the Link objects are created inside the while loop, which means they are not being added to the LinkList. To fix this, you can create a new LinkList outside the while loop and add the Link objects to it inside the loop using the insert() method. Then, you can call the printList() method to print the contents of the LinkList."
            },
            "finish_reason": "stop"
        },
        {
            "index": 6,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: // Change the line inside your while loop to:\nwhile (tokenizer.hasMoreElements()) {\n    Link record = new Link() ;\n    record.setBookName(tokenizer.nextToken()) ;\n    record.setBookAuthor(tokenizer.nextToken()) ;\n    record.setIsbn(tokenizer.nextToken()) ;\n    record.setPublicYear(tokenizer.nextToken()) ;\n    record.printLink(); // Add this line to print the record\n}\n<<<explanation>>>: The issue you're experiencing is that you're not printing the records correctly. You need to call the `printLink()` method on each `record` object after extracting the values using `nextToken()`. This will print the data in the desired format."
            },
            "finish_reason": "stop"
        },
        {
            "index": 7,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>: // Changes made to the printList() method\npublic void printList() {\n    Link currentLink = first;\n    while(currentLink != null) {\n        currentLink.printLink();\n        currentLink = currentLink.nextLink;\n    }\n}\n\n// Changes made to the main method\npublic static void main(String[] args) throws Exception {\n    LinkList list = new LinkList();\n    File outputFile;\n    \n    // Create the new text file. If exists, it will continue to the next commands\n    do {\n        outputFile = new File(\"db.txt\");\n        if(!outputFile.exists()) {\n            outputFile.createNewFile();\n            System.out.println(\"The file was created as db.txt\");\n            System.out.println(\"\");\n        }\n    } while (!outputFile.exists());\n\n    try {\n        // Define which file to stream in from\n        FileInputStream fileIn = new FileInputStream(\"db.txt\");\n        DataInputStream input = new DataInputStream(fileIn);\n        BufferedReader br = new BufferedReader(new InputStreamReader(input));\n        String line;\n        // Read each line of the file\n        while ((line = br.readLine()) != null) {\n            // insert code to break input to pieces\n            StringTokenizer tokenizer = new StringTokenizer(line);\n            String bookName = tokenizer.nextToken();\n            String bookAuthor = tokenizer.nextToken();\n            String isbn = tokenizer.nextToken();\n            String publicYear = tokenizer.nextToken();\n            // create a new Link object\n            Link record = new Link(bookName, bookAuthor, isbn, publicYear);\n            list.insert(record);\n        }\n        input.close();\n    } catch (Exception e) {\n        System.err.println(\"Error. Could not read the file\");\n    }\n    \n    list.printList();\n}\n\n<<<explanation>>>: In the provided code, the printList() method is modified to correctly iterate over the links and call the printLink() method on each link. In the main method, the code is updated to properly tokenize each line of the file and create a new Link object with the extracted data. This object is then inserted into the LinkList using the insert() method. Finally, the printList() method is called to print the contents of the list."
            },
            "finish_reason": "stop"
        },
        {
            "index": 8,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class TestStringTokenizer {\n    public static void main(String[] args) {\n        String line = \"antrea ggfg 65 64\";\n        StringTokenizer tokenizer = new StringTokenizer(line);\n\n        String bookName = tokenizer.nextToken();\n        String bookAuthor = tokenizer.nextToken();\n        String isbn = tokenizer.nextToken();\n        String publicYear = tokenizer.nextToken();\n\n        System.out.println(\"Book Name: \" + bookName);\n        System.out.println(\"Book's Author: \" + bookAuthor);\n        System.out.println(\"Year Published: \" + publicYear);\n        System.out.println(\"ISBN: \" + isbn);\n    }\n}\n<<<explanation>>>: In your provided code, the issue is with how you are using StringTokenizer. You need to call nextToken() for each piece of data you want to retrieve from the string. In the code I've provided, I've shown how you can use StringTokenizer to extract the book name, book author, ISBN, and year published from the line \"antrea ggfg 65 64\". Replace this line with the line you have read from the file in your code."
            },
            "finish_reason": "stop"
        },
        {
            "index": 9,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>:\nimport java.io.*;\nimport java.util.*;\n\nclass Link{\n    public String isbn;\n    public String bookName;\n    public String bookAuthor;\n    public String publicYear;\n    public Link nextLink;\n    \n    public Link(){\n    }\n    \n    public Link(String bookNameIn, String bookAuthorIn, String isbnIn, String publicYearIn){\n        setIsbn(isbnIn);\n        setBookName(bookNameIn);\n        setBookAuthor(bookAuthorIn);\n        setPublicYear(publicYearIn);\n    }\n    \n    public void setIsbn(String isbnIn){\n        isbn = isbnIn;\n    }\n    \n    public void setBookName(String bookNameIn){\n        bookName = bookNameIn;\n    }\n    \n    public void setBookAuthor(String bookAuthorIn){\n        bookAuthor = bookAuthorIn;\n    }\n    \n    public void setPublicYear(String publicYearIn){\n        publicYear = publicYearIn;\n    }\n    \n    public String getIsbn(){\n        return isbn;\n    }\n    \n    public String getBookName(){\n        return bookName;\n    }\n    \n    public String getBookAuthor(){\n        return bookAuthor;\n    }\n    \n    public String getPublicYear(){\n        return publicYear;\n    }\n    \n    public void printLink(){\n        System.out.print(\"Book Name: \" + getBookName() + \"\\n\" + \"Book's Author: \" + getBookAuthor() + \"\\n\" + \"Year Published: \" + getPublicYear() + \"\\n\" + \"ISBN: \" + getIsbn() +\"\\n\");\n        System.out.println(\"\");\n    }\n}\n\nclass LinkList {\n    private Link first;\n    \n    public LinkList(){\n        first = null;\n    }\n    \n    public boolean isEmpty(){\n        return first == null;\n    }\n    \n    public void insert(String bookNameIn, String bookAuthorIn, String isbnIn, String publicYearIn){\n        Link link = new Link(bookNameIn, bookAuthorIn, isbnIn, publicYearIn);\n        link.nextLink = first;\n        first = link;\n    }\n    \n    public Link delete(){\n        Link temp = first;\n        first = first.nextLink;\n        return temp;\n    }\n    \n    public void printList(){\n        Link currentLink = first;\n        while(currentLink != null) {\n            currentLink.printLink();\n            currentLink = currentLink.nextLink;\n        }\n        System.out.println(\"\");\n    }\n}\n\npublic class TheList {\n    public static void main(String[] args) throws Exception {\n        LinkList list = new LinkList();\n        File outputFile;\n        \n        do {\n            outputFile = new File(\"db.txt\");\n            if (!outputFile.exists()) {\n                outputFile.createNewFile();\n                System.out.println(\"The file was created as db.txt\");\n                System.out.println(\"\");\n            }\n        } while (!outputFile.exists());\n        \n        try {\n            FileInputStream fileIn = new FileInputStream(\"db.txt\");\n            DataInputStream input = new DataInputStream(fileIn);\n            BufferedReader br = new BufferedReader(new InputStreamReader(input));\n            String line;\n            \n            while ((line = br.readLine()) != null) {\n                StringTokenizer tokenizer = new StringTokenizer(line);\n                \n                while (tokenizer.hasMoreTokens()) {\n                    Link record = new Link();\n                    record.setBookName(tokenizer.nextToken());\n                    record.setBookAuthor(tokenizer.nextToken());\n                    record.setIsbn(tokenizer.nextToken());\n                    record.setPublicYear(tokenizer.nextToken());\n                }\n                \n                System.out.println(line);\n            }\n            input.close();\n        } catch (Exception e) {\n            System.err.println(\"Error. Could not read the file\");\n        }\n        \n        list.printList();\n    }\n}\n<<<explanation>>>: In your code, it seems that you are not adding the records obtained from the StringTokenizer to your LinkList. The records are created but not added to the list. Additionally, you are not printing the records from the list, which is why you are seeing the raw text file data.\n\nTo fix this, you need to add the created records to your LinkList by calling the insert method. You can do this inside the while loop where you are creating the records. Also, make sure to remove the print statement that outputs the raw text file data.\n\nAfter making these changes, the printList method of your LinkList will correctly print the records in the desired format."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 1755,
        "completion_tokens": 3941,
        "total_tokens": 5696
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Java StringTokenizer.nextToken() skips over empty fields:I am using a tab (/t) as delimiter and I know there are some empty fields in my data e.g.:\n\none->two->->three\nWhere -> equals the tab. As you can see an empty field is still correctly surrounded by tabs. Data is collected using a loop :\n\n while ((strLine = br.readLine()) != null) {\n    StringTokenizer st = new StringTokenizer(strLine, \"\t\");\n    String test = st.nextToken();\n    ...\n    }\nYet Java ignores this \"empty string\" and skips the field.\n\nIs there a way to circumvent this behaviour and force java to read in empty fields anyway?\nPlease using this api: StringTokenizer.nextToken.\nAnswer:<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class TestStringTokenStrict {\n\n/**\n * Strict implementation of StringTokenizer\n * \n * @param str\n * @param delim\n * @param strict\n *            true = include NULL Token\n * @return\n */\nstatic StringTokenizer getStringTokenizerStrict(String str, String delim, boolean strict) {\n    StringTokenizer st = new StringTokenizer(str, delim, strict);\n    StringBuffer sb = new StringBuffer();\n\n    while (st.hasMoreTokens()) {\n        String s = st.nextToken();\n        if (s.equals(delim)) {\n            sb.append(\" \").append(delim);\n        } else {\n            sb.append(s).append(delim);\n            if (st.hasMoreTokens())\n                st.nextToken();\n        }\n    }\n    return (new StringTokenizer(sb.toString(), delim));\n}\n\nstatic void altStringTokenizer(StringTokenizer st) {\n    while (st.hasMoreTokens()) {\n        String type = st.nextToken();\n        String one = st.nextToken();\n        String two = st.nextToken();\n        String three = st.nextToken();\n        String four = st.nextToken();\n        String five = st.nextToken();\n\n        System.out.println(\n                \"[\" + type + \"] [\" + one + \"] [\" + two + \"] [\" + three + \"] [\" + four + \"] [\" + five + \"]\");\n    }\n}\n\npublic static void main(String[] args) {\n    String input = \"Record|One||Three||Five\";\n    altStringTokenizer(getStringTokenizerStrict(input, \"|\", true));\n}}\n<<<explanation>>>: The object your method decompressGZIP() needs is a byte[].\n\nSo the basic, technical answer to the question you have asked is:\nQuestion: Java Program: Not printing as it should using methods: :As you can see near the end of the code, i use \"list.printList\" that calls the printLink method. It should output \"book name: ... book author:.. etc. \" instead, it shows raw text file data. What am i doing wrong? Also, any recommendations are welcome. thanksEDIT:  this is the the content of the text file:antrea ggfg 65 64antrea ggfg 65 64antrea ggfg 65 64antrea ggfg 65 64This is the output:antrea ggfg 65 64antrea ggfg 65 64antrea ggfg 65 64antrea ggfg 65 64Also i believe there is something wrong with the tokenizer. from your experience, what is SHOULD do as written below? import java.io.* ;import java.util.* ;class Link{    public String isbn ;    public String bookName ;    public String bookAuthor ;     public String publicYear;    public Link nextLink;    public Link ()    {    }    //Link constructor    public Link(String bookNameIn, String bookAuthorIn, String isbnIn, String publicYearIn)     {        setIsbn (isbnIn) ;        setBookName (bookNameIn) ;        setBookAuthor (bookAuthorIn) ;        setPublicYear (publicYearIn) ;        //isbn = isbnIn ;        //bookAuthor = bookAuthorIn ;        //publicYear = publicYearIn ;    }  // Set Methods    public void setIsbn(String isbnIn)    {        isbn = isbnIn ;    }    public void setBookName(String bookNameIn)    {        bookName = bookNameIn ;    }    public void setBookAuthor(String bookAuthorIn)    {        bookAuthor = bookAuthorIn ;    }    public void setPublicYear(String publicYearIn)    {        publicYear = publicYearIn ;    }  // Get Methods    public String getIsbn()    {        return isbn ;    }    public String getBookName()    {        return bookName;    }    public String getBookAuthor()    {        return bookAuthor ;    }    public String getPublicYear()    {        return publicYear ;    }       //Print Link data    public void printLink()    {            System.out.print(\"Book Name: \" + getBookName() + \"\\n\" + \"Book's Author: \" + getBookAuthor() + \"\\n\" + \"Year Published: \" + getPublicYear() + \"\\n\" + \"ISBN: \" + getIsbn() +\"\\n\");            System.out.println(\"\") ;    }}class LinkList {    private Link first;    //LinkList constructor    public LinkList()    {            first = null;    }    //Returns true if list is empty    public boolean isEmpty()     {            return first == null;    }    //Inserts a new Link at the first of the list    public void insert(String bookNameIn, String bookAuthorIn, String isbnIn, String publicYearIn)     {            Link link = new Link(bookNameIn, bookAuthorIn, isbnIn, publicYearIn) ;            link.nextLink = first;            first = link;    }    //Deletes the link at the first of the list    public Link delete()     {            Link temp = first;            first = first.nextLink;            return temp;    }    //Prints list data    public void printList()    {            Link currentLink = new Link() ;            currentLink = first;            while(currentLink != null) {                    currentLink.printLink();                    currentLink = currentLink.nextLink;            }            System.out.println(\"\");    }}  public class TheList {    public static void main(String[] args) throws Exception    {            //Scanner kb = new Scanner (System.in);             LinkList list = new LinkList();            File outputFile ;            //int numberOfBooks = 0 ;         // Create the new text file. If exists, it will continue to the next commands            do            {                outputFile = new File(\"db.txt\") ;                    if(!outputFile.exists())                    {                        outputFile.createNewFile ();                                            System.out.println(\"The file was created as db.txt\");                        System.out.println(\"\");                    }            }while (!outputFile.exists()) ;            try            {                // Define which file to stream in from                FileInputStream fileIn = new FileInputStream(\"db.txt\") ;                DataInputStream input = new DataInputStream (fileIn) ;                BufferedReader br = new BufferedReader (new InputStreamReader (input)) ;                String line ;                // Read each line of the file                while ((line = br.readLine()) != null)                {                    // insert code to break input to pieces                    StringTokenizer tokenizer = new StringTokenizer(line) ;                    while (tokenizer.hasMoreElements())                    {                        Link record = new Link() ;                        record.setBookName(tokenizer.nextToken()) ;                        record.setBookAuthor(tokenizer.nextToken()) ;                        record.setIsbn(tokenizer.nextToken()) ;                        record.setPublicYear(tokenizer.nextToken()) ;                    }                    System.out.println (line) ;                }                input.close() ;            }catch (Exception e){                System.err.println(\"Error. Could not read the file\") ;            }            list.printList();            /**list.insert(123456, \"kostis\", \"kostis\", 1900);            list.insert(123456, \"kostis\", \"kostis\", 1900);            list.insert(123456, \"kostis\", \"kostis\", 1900);            list.insert(123456, \"kostis\", \"kostis\", 1900);            list.insert(123456, \"kostis\", \"kostis\", 1900);            **/    }}\nPlease using this api: StringTokenizer.nextToken.\nAnswer:"
}