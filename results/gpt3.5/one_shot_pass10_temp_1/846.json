{
    "id": "chatcmpl-8Hfdkfru1R0aXFoRbg6MWZ3KMpBrS",
    "object": "chat.completion",
    "created": 1699222332,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: BitmapFactory.Options\n<<<code>>>: BitmapFactory.Options options = new BitmapFactory.Options();\noptions.inJustDecodeBounds = true;\nBitmapFactory.decodeStream(inputStream, null, options);\nint width = options.outWidth;\nint height = options.outHeight;\nint targetHeight = // desired height;\nint targetWidth = (int) (width * ((double) targetHeight / height));\noptions.inJustDecodeBounds = false;\nbitmap = BitmapFactory.decodeStream(inputStream, null, options);\nbitmap = Bitmap.createScaledBitmap(bitmap, targetWidth, targetHeight, true);\nimage_projet.setImageBitmap(bitmap);\n<<<explanation>>>: You can use BitmapFactory.Options to get the original width and height of the bitmap. Then, you can calculate the target width based on the desired height and the aspect ratio of the original image. After that, you can decode the bitmap again with the calculated target width and the desired height. Finally, you can set the scaled bitmap to the imageview."
            },
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: android.graphics.Bitmap.createScaledBitmap\n<<<code>>>: int desiredHeight = 200; \nint width = bitmap.getWidth();\nint height = bitmap.getHeight();\nfloat scale = (float) desiredHeight / height;\nint desiredWidth = (int) (width * scale);\nbitmap = Bitmap.createScaledBitmap(bitmap, desiredWidth, desiredHeight, true);\nimage_projet.setImageBitmap(bitmap);\n<<<explanation>>>: The code above resizes the bitmap to the desired height while maintaining the original aspect ratio. It calculates the desired width proportional to the desired height and then creates a new scaled bitmap using the createScaledBitmap method. Finally, it sets the scaled bitmap to the imageview."
            },
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: BitmapFactory.decodeStream \n<<<code>>>: BitmapFactory.decodeStream(inputStream);\nint width = (int)(bitmap.getWidth()* ((double)height/bitmap.getHeight()));\nBitmap scaledBitmap = Bitmap.createScaledBitmap(bitmap, width, height, true);\nimage_projet.setImageBitmap(scaledBitmap);\n<<<explanation>>>: This code resizes the bitmap by setting the desired height and automatically calculating the width based on the original aspect ratio. The `width` variable is calculated by multiplying the original width by the ratio of the desired height to the original height. Then, `Bitmap.createScaledBitmap()` is used to create a new scaled bitmap with the calculated width and desired height. Finally, the scaled bitmap is set to the `image_projet` ImageView."
            },
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: BitmapFactory\n<<<code>>>: int width = (int) ((float) height * bitmap.getWidth() / bitmap.getHeight());\n            Bitmap resizedBitmap = Bitmap.createScaledBitmap(bitmap, width, height, true);\n            image_projet.setImageBitmap(resizedBitmap);\n<<<explanation>>>: This code will calculate the proportional width based on the desired height and resize the bitmap accordingly. Then, it will set the resized bitmap to the imageview."
            },
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: BitmapFactory.decodeStream\n<<<code>>>: // Calculate aspect ratio\nfloat aspectRatio = (float) bitmap.getWidth() / (float) bitmap.getHeight();\n// Calculate new width using aspect ratio and desired height\nint width = (int) (height * aspectRatio);\n// Resize bitmap\nbitmap = Bitmap.createScaledBitmap(bitmap, width, height, true);\n// Set resized bitmap to ImageView\nimage_projet.setImageBitmap(bitmap);\n<<<explanation>>>: This code calculates the aspect ratio of the bitmap and then uses that ratio to calculate the new width based on the desired height. The bitmap is then resized using Bitmap.createScaledBitmap() with the new width and height, and set to the ImageView."
            },
            "finish_reason": "stop"
        },
        {
            "index": 5,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: BitmapFactory.createScaledBitmap\n<<<code>>>: int originalWidth = bitmap.getWidth();\nint originalHeight = bitmap.getHeight();\n\nint newHeight = 500; // define your desired height\n\nint newWidth = (int) (((float) newHeight) / originalHeight * originalWidth);\n\nbitmap = Bitmap.createScaledBitmap(bitmap, newWidth, newHeight, true);\n\nimage_projet.setImageBitmap(bitmap);\n<<<explanation>>>: This code calculates the new width based on the desired height while maintaining the aspect ratio of the original image. It then resizes the bitmap using the calculated width and desired height, and sets it to the ImageView."
            },
            "finish_reason": "stop"
        },
        {
            "index": 6,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: BitmapFactory.decodeStream\n<<<code>>>: int width = (int) (bitmap.getWidth() * (float) height / bitmap.getHeight());\nBitmap scaledBitmap = Bitmap.createScaledBitmap(bitmap, width, height, true);\nimage_projet.setImageBitmap(scaledBitmap);\n<<<explanation>>>: You can calculate the width proportionally to the height by using the formula: width = (int) (bitmap.getWidth() * (float) height / bitmap.getHeight()). Then, create a scaled bitmap with the calculated width and desired height using Bitmap.createScaledBitmap. Finally, set the scaled bitmap to the ImageView."
            },
            "finish_reason": "stop"
        },
        {
            "index": 7,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: BitmapFactory\n<<<code>>>: int width = (int) (bitmap.getWidth() * (float) newHeight / bitmap.getHeight());\nBitmap resizedBitmap = Bitmap.createScaledBitmap(bitmap, width, newHeight, false);\nimageView.setImageBitmap(resizedBitmap);\n<<<explanation>>>: This code resizes the bitmap by calculating the width based on the new height, while maintaining the original aspect ratio of the image. Then, it sets the resized bitmap to the ImageView."
            },
            "finish_reason": "stop"
        },
        {
            "index": 8,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: BitmapFactory\n<<<code>>>: int width = (int) (bitmap.getWidth() * ((float) height / bitmap.getHeight()));\nBitmap scaledBitmap = Bitmap.createScaledBitmap(bitmap, width, height, true);\nimage_projet.setImageBitmap(scaledBitmap);\n<<<explanation>>>: You can calculate the width by multiplying the original width with the ratio of the desired height to the original height. Then, you can use the createScaledBitmap method to create a new bitmap with the calculated width and the desired height. Finally, set the scaled bitmap to the image view using setImageBitmap."
            },
            "finish_reason": "stop"
        },
        {
            "index": 9,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: BitmapFactory.Options\n<<<code>>>: BitmapFactory.Options options = new BitmapFactory.Options();\noptions.inJustDecodeBounds = true;\nBitmapFactory.decodeStream(inputStream, null, options);\nint imageWidth = options.outWidth;\nint imageHeight = options.outHeight;\n\nint targetHeight = //your desired height;\n\nint scaleFactor = imageHeight / targetHeight;\n\noptions.inJustDecodeBounds = false;\noptions.inSampleSize = scaleFactor;\nBitmap resizedBitmap = BitmapFactory.decodeStream(inputStream, null, options);\n\nimage_projet.setImageBitmap(resizedBitmap);\n<<<explanation>>>: This code retrieves the width and height of the original bitmap using BitmapFactory.Options. Then, it calculates the scale factor based on the desired height. Finally, it sets the resize options and decodes the stream again to get the resized bitmap, which can be set to the imageview."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 400,
        "completion_tokens": 1346,
        "total_tokens": 1746
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: I have an activity that shows ProgressDialog while connecting to bluetooth device. It works fine until screen orientation changes while ProgressDialog is up. ProgressDialog disappears and when after connection is established, app calls progressDialog.dismiss(); at this point app crashes because there is no ProgressDialog to dismiss. How can i prevent to ProgressDialog dismissing while screen orientation changes? \npublic void prepareViews(int ID, boolean state){\n    switch(ID){\n    case USERNAME_TEXTBOX:\n        LoginUsernameTextBox.setEnabled(state);\n        break;\n    case PASSWORD_TEXTBOX:\n        LoginPasswordTextBox.setEnabled(state);\n        break;\n    case LOGIN_BUTTON:\n        LoginButton.setEnabled(state);\n        break;\n    case LOGIN_PROGRESSBAR:\n        if(state == true){\n            LoginProgressBar.setVisibility(View.VISIBLE);\n            LoginProgressBar.setIndeterminate(true); }\n        else{\n            LoginProgressBar.setVisibility(View.GONE);\n        }\n        break;\n    case CONNECTING_DIALOG:\n        if(state == true){\n        progressDialog = ProgressDialog.show(MainActivity.this, \"\", \"Connecting\", true); }\n        else{\n            progressDialog.dismiss();\n        }\n        break;\n    }\n}\n\nPlease using this api: ProgressDialog.dismiss.\nAnswer:<<<api>>>: ProgressDialog.dismiss\n<<<code>>>: if (progressDialog != null &&  progressDialog.isShowing()) {progressDialog.dismiss();}\n<<<explanation>>>: Try this.\nQuestion: Android Java: bitmap resize define height and width auto: :I setImageBitmap from URL to imageview. I want to define only the height, and I want that the app would set the width automatically, proportionally.This is my code:URL imageURL = new URL(\"url\");HttpURLConnection connection = (HttpURLConnection) imageURL.openConnection();InputStream inputStream = connection.getInputStream();bitmap = BitmapFactory.decodeStream(inputStream);image_projet.setImageBitmap(bitmap);\nPlease using this api: ProgressDialog.dismiss.\nAnswer:"
}