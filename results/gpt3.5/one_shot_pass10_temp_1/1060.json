{
    "id": "chatcmpl-8HgF09xK8zTVll7WBRqrVhnAOCFtN",
    "object": "chat.completion",
    "created": 1699224642,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>: String getRequestHostname(String request) {\n    String hostname = \"\";\n\n    StringTokenizer st = new StringTokenizer(request, \"\\n\\r\");\n    while (st.hasMoreTokens()) {\n        String line = st.nextToken();\n        if (line.startsWith(\"Host:\")) {\n            hostname = line.substring(6).trim();\n            break;\n        }\n    }\n\n    return hostname;\n}\n\npublic static void main(String[] args) {\n    String request = \"GET http://mail.ru/ HTTP/1.1\\n\" +\n            \"Host: mail.ru\\n\" +\n            \"Proxy-Connection: keep-alive\\n\" +\n            \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\\n\" +\n            \"User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/31.0.1650.63 Safari/537.36\\n\" +\n            \"Accept-Encoding: gzip,deflate,sdch\\n\" +\n            \"Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4\\n\" +\n            \"Cookie: p=7nkAAOS6hAAA; mrcu=7D86524D326C5CB36F898F4A4CD9;_ga=GA1.2.1174941236.1388398432; c=PCwPUwAAAPKbAAAiAgAAcQAAz5QIAgAA;\\n\";\n\n    String hostname = getRequestHostname(request);\n    System.out.println(\"Hostname: \" + hostname);\n}\n<<<explanation>>>: In this code, we are extracting the hostname from the request by using StringTokenizer and searching for the line that starts with \"Host:\". Once we find that line, we extract the hostname by removing the \"Host:\" prefix. We trim the extracted hostname to remove any leading or trailing spaces. This hostname can then be used to create a new Socket for sending the request to the internet. You can ignore the other parts of the request for now as we are only interested in the hostname."
            },
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: String request = \"GET http://mail.ru/ HTTP/1.1\";\nString hostLine = \"Host: mail.ru\";\n\nString host = \"\";\nif (request.startsWith(\"GET\")) {\n    String[] parts = request.split(\" \");\n    host = parts[1];\n} else {\n    String[] parts = hostLine.split(\": \");\n    host = parts[1];\n}\n\nSystem.out.println(\"Hostname: \" + host);\n\n// Yes, you can just send the GET request without the other parts if you only want to retrieve the content of the specified URL.\n\n// If you want to handle other HTTP methods or headers, you may need to modify or add code to handle those parts separately.\n<<<explanation>>>: In order to extract the hostname from the request, you can split the string using a space (\" \") delimiter and retrieve the second element of the resulting array.\n\nYou can then use this hostname to create a new Socket and connect to the desired server.\n\nRegarding the other parts of the request, if you only want to retrieve the content of the specified URL, you can simply send the GET request without the other headers.\n\nIf you need to handle other HTTP methods or additional headers, you may need to modify or add code to handle those parts separately."
            },
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public static String getHostName(String request) {\n    StringTokenizer st = new StringTokenizer(request, \"\\n\");\n    while (st.hasMoreTokens()) {\n        String line = st.nextToken();\n        if (line.startsWith(\"Host:\")) {\n            String host = line.substring(6).trim();\n            return host;\n        }\n    }\n    return null;\n}\n\npublic static String getGETRequest(String request) {\n    StringTokenizer st = new StringTokenizer(request, \"\\n\");\n    while (st.hasMoreTokens()) {\n        String line = st.nextToken();\n        if (line.startsWith(\"GET\")) {\n            return line;\n        }\n    }\n    return null;\n}\n\npublic static void main(String[] args) {\n    String request = \"GET http://mail.ru/ HTTP/1.1\\n\" +\n            \"Host: mail.ru\\n\" +\n            \"Proxy-Connection: keep-alive\\n\" +\n            \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\\n\" +\n            \"User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/31.0.1650.63 Safari/537.36\\n\" +\n            \"Accept-Encoding: gzip,deflate,sdch\\n\" +\n            \"Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4\\n\" +\n            \"Cookie: p=7nkAAOS6hAAA; mrcu=7D86524D326C5CB36F898F4A4CD9;_ga=GA1.2.1174941236.1388398432; c=PCwPUwAAAPKbAAAiAgAAcQAAz5QIAgAA;\\n\";\n\n    String host = getHostName(request);\n    String getRequest = getGETRequest(request);\n    System.out.println(\"Hostname: \" + host);\n    System.out.println(\"GET Request: \" + getRequest);\n}\n<<<explanation>>>: To extract the hostname from the request, you can search for the line that starts with \"Host:\". You can then extract the hostname from this line by removing the \"Host:\" prefix. To extract the GET request itself, you can search for the line that starts with \"GET\". You can send only the GET request to the internet by establishing a connection to the specified hostname using port 80 and sending the GET request. You don't need to rewrite the GET method itself."
            },
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: String request = \"GET http://mail.ru/ HTTP/1.1\\r\\nHost: mail.ru\\r\\nProxy-Connection: keep-alive\\r\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\\r\\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/31.0.1650.63 Safari/537.36\\r\\nAccept-Encoding: gzip,deflate,sdch\\r\\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4\\r\\nCookie: p=7nkAAOS6hAAA; mrcu=7D86524D326C5CB36F898F4A4CD9;_ga=GA1.2.1174941236.1388398432; c=PCwPUwAAAPKbAAAiAgAAcQAAz5QIAgAA;\";\nStringTokenizer st = new StringTokenizer(request, \"\\r\\n\");\n\n// Process the request to obtain the hostname\nString method = st.nextToken();\nString url = st.nextToken().split(\" \")[1];\nString host = st.nextToken().split(\" \")[1];\n\n// Connect to the host using the obtained hostname\nSocket socket = new Socket(host, 80);\n\n// Send the request to the internet\nOutputStream outputStream = socket.getOutputStream();\noutputStream.write(request.getBytes());\noutputStream.flush();\n<<<explanation>>>: \n\nTo obtain the hostname from the request, you can split the second line of the request (GET http://mail.ru/ HTTP/1.1) using the space character as the delimiter and extract the second element.\n\nYou can send the entire request to the internet by writing the request to the output stream of the socket.\n\nYou do not need to rewrite the GET method itself. You can send the entire GET request as it is to the internet."
            },
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class ProxyServer {\n\n    private static final int BUFFER_SIZE = 4096;\n\n    public void handleRequest(Socket clientSocket) throws IOException {\n        // Get the input stream from the client socket\n        InputStream clientInput = clientSocket.getInputStream();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(clientInput));\n\n        // Read the request from the client\n        String requestLine = reader.readLine();\n        String host = getHostFromRequest(requestLine);\n        \n        // Create a new socket to connect to the requested host\n        Socket serverSocket = new Socket(host, 80);\n        OutputStream serverOutput = serverSocket.getOutputStream();\n\n        // Forward the request to the server\n        serverOutput.write(requestLine.getBytes());\n        serverOutput.write(\"\\r\\n\".getBytes()); // add a new line after the request line\n        \n        // Copy the rest of the client input to the server output\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int bytesRead;\n        while ((bytesRead = clientInput.read(buffer)) != -1) {\n            serverOutput.write(buffer, 0, bytesRead);\n        }\n\n        // Close the sockets\n        serverSocket.close();\n        clientSocket.close();\n    }\n\n    private String getHostFromRequest(String requestLine) {\n        StringTokenizer tokenizer = new StringTokenizer(requestLine);\n        tokenizer.nextToken(); // Skip the request method (i.e., \"GET\")\n        String url = tokenizer.nextToken(); // Get the URL (i.e., \"http://mail.ru/\")\n        tokenizer.nextToken(); // Skip the protocol version (i.e., \"HTTP/1.1\")\n        \n        // Remove the leading \"http://\" from the URL\n        String host = url.replace(\"http://\", \"\");\n        \n        // Extract only the hostname from the URL\n        int slashIndex = host.indexOf(\"/\");\n        if (slashIndex != -1) {\n            host = host.substring(0, slashIndex);\n        }\n        \n        return host;\n    }\n\n}\n  \npublic class ProxyServerMain {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(8888);\n        ProxyServer proxyServer = new ProxyServer();\n        \n        while (true) {\n            Socket clientSocket = serverSocket.accept();\n            proxyServer.handleRequest(clientSocket);\n        }\n    }\n}\n  \n<<<explanation>>>: In the given code, the method handleRequest(Socket clientSocket) takes in a clientSocket as a parameter and processes the client's request. It reads the request line using a BufferedReader and extracts the host from it using StringTokenizer. The host is then used to create a new socket and connect to the requested host.\n\nThe method getHostFromRequest(String requestLine) takes the request line as input and uses StringTokenizer to tokenize it. It skips the request method (i.e., \"GET\"), gets the URL (i.e., \"http://mail.ru/\"), and skips the protocol version (i.e., \"HTTP/1.1\"). The leading \"http://\" is then removed from the URL and only the hostname is extracted. This hostname is returned as the result.\n\nYou don't need to rewrite the GET method itself. The code already forwards the entire client request to the server, including the request line and other headers. However, you can modify the code to remove or add specific headers as required."
            },
            "finish_reason": "stop"
        },
        {
            "index": 5,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: String request = \"GET http://mail.ru/ HTTP/1.1\";\nStringTokenizer st = new StringTokenizer(request);\nst.nextToken(); // skips \"GET\"\nString hostname = st.nextToken(); // gets \"http://mail.ru/\"\nhostname = hostname.substring(7, hostname.length() - 1); // extracts \"mail.ru\"\n\n<<<explanation>>>: In order to retrieve the hostname from the request, you can use StringTokenizer to split the request string by whitespace. The first token will be \"GET\", which can be skipped using st.nextToken(). The next token will be the URL, which includes the protocol and the hostname (\"http://mail.ru/\"). You can then extract the hostname from the URL by removing the \"http://\" prefix and the trailing \"/\". Finally, you can use the extracted hostname to create the new Socket to connect to the appropriate server."
            },
            "finish_reason": "stop"
        },
        {
            "index": 6,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class ProxyServer {\n\n    private static final String DELIMITER = \" \";\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(8080);\n\n        while (true) {\n            Socket clientSocket = serverSocket.accept();\n            handleRequest(clientSocket);\n        }\n    }\n\n    private static void handleRequest(Socket clientSocket) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n        String requestLine = reader.readLine();\n        String hostname = getHostname(requestLine);\n        \n        Socket serverSocket = new Socket(hostname, 80);\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(serverSocket.getOutputStream()));\n        writer.write(requestLine + \"\\n\");\n        writer.flush();\n        \n        // Handle remaining headers\n        String line;\n        while ((line = reader.readLine()) != null && !line.isEmpty()) {\n            writer.write(line + \"\\n\");\n            writer.flush();\n        }\n        \n        // Send empty line to indicate end of headers\n        writer.write(\"\\n\");\n        writer.flush();\n\n        // Forward response from server to client\n        BufferedReader serverReader = new BufferedReader(new InputStreamReader(serverSocket.getInputStream()));\n        BufferedWriter clientWriter = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()));\n        String responseLine;\n        while ((responseLine = serverReader.readLine()) != null) {\n            clientWriter.write(responseLine + \"\\n\");\n            clientWriter.flush();\n        }\n        \n        serverSocket.close();\n        clientSocket.close();\n    }\n\n    private static String getHostname(String requestLine) {\n        StringTokenizer tokenizer = new StringTokenizer(requestLine, DELIMITER);\n        tokenizer.nextToken(); // Skip GET\n        String url = tokenizer.nextToken(); // Get http://mail.ru/\n        tokenizer.nextToken(); // Skip HTTP/1.1\n        \n        String hostname = url.substring(url.indexOf(\"//\") + 2);\n        hostname = hostname.substring(0, hostname.indexOf(\"/\"));\n        \n        return hostname;\n    }\n}\n<<<explanation>>>: In order to create a new Socket and connect to the internet, you need to extract the hostname from the request. The hostname is typically found in the URL part of the request (GET http://mail.ru/ HTTP/1.1). In this case, you can use the StringTokenizer to extract the URL and then extract the hostname from it.\n\nYou can send only the GET method to the internet, but you should also forward the headers to ensure proper communication with the server. The headers contain important information for the server to process the request correctly.\n\nYou don't need to rewrite the GET method itself. The purpose of the ProxyServer is to act as a middleman between the client and the server, forwarding the client's request to the server and then forwarding the server's response back to the client."
            },
            "finish_reason": "stop"
        },
        {
            "index": 7,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class ProxyServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(1234);\n        System.out.println(\"Server started...\");\n\n        while (true) {\n            Socket socket = serverSocket.accept();\n            InputStream inputStream = socket.getInputStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n\n            String line;\n            String host = null;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n\n                if (line.startsWith(\"Host:\")) {\n                    host = line.substring(6).trim();\n                }\n            }\n\n            if (host != null) {\n                Socket destinationSocket = new Socket(host, 80);\n                OutputStream outputStream = destinationSocket.getOutputStream();\n\n                PrintWriter writer = new PrintWriter(outputStream);\n                writer.println(\"GET http://\" + host + \"/ HTTP/1.1\");\n                writer.println(\"Host: \" + host);\n                writer.println();\n                writer.flush();\n\n                InputStream destinationInputStream = destinationSocket.getInputStream();\n                BufferedReader destinationReader = new BufferedReader(new InputStreamReader(destinationInputStream));\n\n                String destinationLine;\n                while ((destinationLine = destinationReader.readLine()) != null) {\n                    System.out.println(destinationLine);\n                }\n\n                destinationReader.close();\n                destinationInputStream.close();\n\n                destinationSocket.close();\n            }\n\n            reader.close();\n            inputStream.close();\n            socket.close();\n        }\n    }\n}\n\n<<<explanation>>>: In the given code snippet, the part of the request that you need to extract the hostname from is the line that starts with \"Host:\". You can get the hostname by extracting the substring after \"Host:\".\n\nYou can send only the GET request to the internet by creating a new socket to the destination host, connecting to port 80, and sending only the GET request headers. You do not need to send the entire original request.\n\nYou do not need to rewrite the GET method itself. You can simply send the GET request to the destination server and receive the response."
            },
            "finish_reason": "stop"
        },
        {
            "index": 8,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class ProxyServer {\n\n    public static void main(String[] args) {\n        try {\n            ServerSocket serverSocket = new ServerSocket(8080);\n            while (true) {\n                Socket clientSocket = serverSocket.accept();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                \n                String requestLine = reader.readLine();\n                String host = \"\";\n                // Extracting the host from the request line\n                if (requestLine.startsWith(\"GET \")) {\n                    String[] parts = requestLine.split(\"\\\\s+\");\n                    String url = parts[1];\n                    String[] urlParts = url.split(\"/\");\n                    host = urlParts[2];\n                } else {\n                    // Extracting the host from the Host header\n                    while (!requestLine.isEmpty()) {\n                        if (requestLine.startsWith(\"Host:\")) {\n                            host = requestLine.split(\":\")[1].trim();\n                            break;\n                        }\n                        requestLine = reader.readLine();\n                    }\n                }\n                \n                Socket serverSocket = new Socket(host, 80);\n                PrintWriter writer = new PrintWriter(serverSocket.getOutputStream(), true);\n                writer.println(requestLine);\n                \n                String line;\n                while ((line = reader.readLine()) != null) {\n                    writer.println(line);\n                }\n                \n                writer.close();\n                reader.close();\n                serverSocket.close();\n                clientSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n<<<explanation>>>: In this code, we use the BufferedReader to read the request line. \nTo get the hostname, we first check if the request line starts with \"GET \". If it does, we split the line by spaces and get the second part, which is the URL. \nThen we split the URL by \"/\" and get the third part, which is the hostname. \nIf the request line does not start with \"GET \", we iterate through the request headers until we find the \"Host\" header, \nand then we split the header by \":\" and get the second part, which is the hostname. \nWe then create a new Socket and connect it to the hostname on port 80. Finally, we send the entire request to the internet, \nincluding the request line and all the headers, by reading from the clientSocket's input stream and writing to the serverSocket's output stream."
            },
            "finish_reason": "stop"
        },
        {
            "index": 9,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\nString requestLine = br.readLine();\nStringTokenizer st = new StringTokenizer(requestLine);\nst.nextToken(); // skip the \"GET\" token\nString url = st.nextToken(); // the next token is the URL\n\nString hostLine = br.readLine();\nst = new StringTokenizer(hostLine);\nst.nextToken(); // skip the \"Host:\" token\nString hostname = st.nextToken(); // the next token is the hostname\n\n// Creating new socket to connect to the internet\nSocket internetSocket = new Socket(hostname, 80);\n\n// Sending the request to the internet\nPrintWriter out = new PrintWriter(internetSocket.getOutputStream(), true);\nout.println(requestLine);\nout.println(hostLine);\nout.println(); // send an empty line to indicate the end of the headers\n\n// Reading the response from the internet\nBufferedReader responseReader = new BufferedReader(new InputStreamReader(internetSocket.getInputStream()));\nString responseLine;\nwhile ((responseLine = responseReader.readLine()) != null) {\n    // Handle the response here\n}\n\n<<<explanation>>>: To obtain the hostname from the HTTP request, you need to parse the \"Host:\" header line. This header line contains the hostname of the server that the request is being sent to. You can use the StringTokenizer to extract the hostname from the header line using the following steps:\n\n1. Read the first line of the HTTP request using a BufferedReader.\n2. Create a StringTokenizer with the header line as the input string.\n3. Use st.nextToken() twice to skip the \"Host:\" token and get the next token, which will be the hostname.\n\nOnce you have obtained the hostname, you can create a new Socket with the hostname and the port number (which is always 80 for HTTP) to connect to the internet and send the request.\n\nRegarding whether you can just send the \"GET\" line and omit the other parts of the request, the answer is no. The HTTP request consists of multiple header lines, including the \"Host:\" header, which is required for the server to know which website the request is intended for. Omitting any required headers may result in the request being rejected or not processed correctly by the server.\n\nAs for rewriting the \"GET\" method itself, it is not necessary in this case. The \"GET\" method is a standard HTTP method used for retrieving resources from a server. You can send the \"GET\" request as it is without modification."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 896,
        "completion_tokens": 4478,
        "total_tokens": 5374
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Java StringTokenizer.nextToken() skips over empty fields:I am using a tab (/t) as delimiter and I know there are some empty fields in my data e.g.:\n\none->two->->three\nWhere -> equals the tab. As you can see an empty field is still correctly surrounded by tabs. Data is collected using a loop :\n\n while ((strLine = br.readLine()) != null) {\n    StringTokenizer st = new StringTokenizer(strLine, \"\t\");\n    String test = st.nextToken();\n    ...\n    }\nYet Java ignores this \"empty string\" and skips the field.\n\nIs there a way to circumvent this behaviour and force java to read in empty fields anyway?\nPlease using this api: StringTokenizer.nextToken.\nAnswer:<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class TestStringTokenStrict {\n\n/**\n * Strict implementation of StringTokenizer\n * \n * @param str\n * @param delim\n * @param strict\n *            true = include NULL Token\n * @return\n */\nstatic StringTokenizer getStringTokenizerStrict(String str, String delim, boolean strict) {\n    StringTokenizer st = new StringTokenizer(str, delim, strict);\n    StringBuffer sb = new StringBuffer();\n\n    while (st.hasMoreTokens()) {\n        String s = st.nextToken();\n        if (s.equals(delim)) {\n            sb.append(\" \").append(delim);\n        } else {\n            sb.append(s).append(delim);\n            if (st.hasMoreTokens())\n                st.nextToken();\n        }\n    }\n    return (new StringTokenizer(sb.toString(), delim));\n}\n\nstatic void altStringTokenizer(StringTokenizer st) {\n    while (st.hasMoreTokens()) {\n        String type = st.nextToken();\n        String one = st.nextToken();\n        String two = st.nextToken();\n        String three = st.nextToken();\n        String four = st.nextToken();\n        String five = st.nextToken();\n\n        System.out.println(\n                \"[\" + type + \"] [\" + one + \"] [\" + two + \"] [\" + three + \"] [\" + four + \"] [\" + five + \"]\");\n    }\n}\n\npublic static void main(String[] args) {\n    String input = \"Record|One||Three||Five\";\n    altStringTokenizer(getStringTokenizerStrict(input, \"|\", true));\n}}\n<<<explanation>>>: The object your method decompressGZIP() needs is a byte[].\n\nSo the basic, technical answer to the question you have asked is:\nQuestion: Java: Handling browser's request in my ProxyServer: :I am writing ProxyServer, firstly I use ServerSocket to get Socket that is connected to me. Then I get InputStream from connected Socket and readed it. I have outputted the request of my browser to console:GET http://mail.ru/ HTTP/1.1Host: mail.ruProxy-Connection: keep-alive Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/31.0.1650.63 Safari/537.36Accept-Encoding: gzip,deflate,sdchAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4Cookie: p=7nkAAOS6hAAA; mrcu=7D86524D326C5CB36F898F4A4CD9;_ga=GA1.2.1174941236.1388398432; c=PCwPUwAAAPKbAAAiAgAAcQAAz5QIAgAA;I must create new Socket to write this request to internet, but Socket needs port number and hostname(String) to connect. If we consider that port number is always 80 then from what part of this request I must get hostname? Is this GET http://mail.ru/ HTTP/1.1 or Host: mail.ru? Also, can I just send to internet only GET http://mail.ru/ HTTP/1.1 abandoning other parts?Last question is, should I have to rewrite this GET method itself?\nPlease using this api: StringTokenizer.nextToken.\nAnswer:"
}