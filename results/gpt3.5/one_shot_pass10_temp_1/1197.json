{
    "id": "chatcmpl-8Hgr1N8XtrwTeYAZq74gV3BSjPSqR",
    "object": "chat.completion",
    "created": 1699226999,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.StringTokenizer;\n\npublic class TestTokenizer {\n\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"923142676343|DST:9900|CNT:1|OPR:zong|ADD TRIXXS\");\n        list.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD sMs\");\n        list.add(\"923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia\");\n        list.add(\"923138824807|DST:9900|CNT:1|OPR:zong|ADD TRIXXS\");\n        list.add(\"923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\");\n\n        HashSet<String> duplicates = new HashSet<>();\n\n        for (String str : list) {\n            StringTokenizer st = new StringTokenizer(str, \"|\");\n            String contactNumber = st.nextToken();\n            st.nextToken(); // Skips DST field\n            st.nextToken(); // Skips CNT field\n            st.nextToken(); // Skips OPR field\n            String content = st.nextToken().substring(4); // Gets content after \"ADD \"\n            \n            if (!duplicates.add(contactNumber)) {\n                System.out.println(contactNumber + \" \" + content);\n            }\n        }\n    }\n}\n    \n<<<explanation>>>: The code above uses the StringTokenizer to split each string in the ArrayList by \"|\". It then retrieves the contact number using nextToken() and skips the DST, CNT, and OPR fields. Finally, it gets the content after \"ADD \" by using substring(). The code keeps track of duplicate contact numbers using a HashSet and prints out the contact number and content for each duplicate."
            },
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class PrintDuplicates {\n    public static void main(String[] args) {\n        ArrayList<String> al = new ArrayList<String>();\n        al.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD RIDAsMs\");\n        al.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD sMs\");\n        al.add(\"923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia\");\n        al.add(\"923138824807|DST:9900|CNT:1|OPR:zong|ADD TRIXXS\");\n        al.add(\"923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\\n\\n\");\n        al.add(\"923142676343|DST:9900|CNT:1|OPR:zong|\\nADD BBCLANDAN\\n\");\n        al.add(\"[2014-08-19 00:01:02,958] REC|\");\n        al.add(\"[2014-08-19 00:01:12,799] REC|\");\n        al.add(\"[2014-08-19 00:01:32,894] REC|\");\n        al.add(\"[2014-08-19 00:01:43,753] REC|\");\n        al.add(\"[2014-08-19 00:02:42,754] REC|\");\n        al.add(\"\u00ef\u00bb\u00bf[2014-08-19 00:00:21,702] REC|\");\n\n        Hashtable<String, String> duplicates = new Hashtable<String, String>();\n\n        for (String str : al) {\n            StringTokenizer st = new StringTokenizer(str, \"|\");\n            String contactNumber = st.nextToken();\n            String content = st.nextToken().replace(\"ADD \", \"\");\n            if (duplicates.containsKey(contactNumber)) {\n                String existingContent = duplicates.get(contactNumber);\n                duplicates.put(contactNumber, existingContent + \", \" + content);\n            } else {\n                duplicates.put(contactNumber, content);\n            }\n        }\n\n        for (String key : duplicates.keySet()) {\n            String content = duplicates.get(key);\n            System.out.println(key + \": \" + content);\n        }\n    }\n}\n\n<<<explanation>>>: In this code, we have an ArrayList called \"al\" which contains the data to be tokenized. We create a Hashtable called \"duplicates\" to store the duplicate contact numbers and their content. \n\nWe then iterate over each string in the ArrayList. For each string, we use StringTokenizer to split the string using the delimiter \"|\". We get the contact number using st.nextToken() and the content using st.nextToken(). We remove the \"ADD \" prefix from the content using the replace() method.\n\nIf the contact number already exists in the Hashtable, we get the existing content and append the new content separated by \", \". Otherwise, we simply add the contact number and content to the Hashtable.\n\nFinally, we iterate over the Hashtable and print out each contact number and its corresponding content."
            },
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>:\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class DuplicateContactNumbers {\n    public static void main(String[] args) {\n        ArrayList<String> arrayList = new ArrayList<>();\n        arrayList.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD RIDAsMs\");\n        arrayList.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD sMs\");\n        arrayList.add(\"923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia\");\n        arrayList.add(\"923138824807|DST:9900|CNT:1|OPR:zong|ADD TRIXXS\");\n        arrayList.add(\"923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\");\n\n        Set<String> duplicateContactNumbers = new HashSet<>();\n        Set<String> duplicateContents = new HashSet<>();\n        for (String str : arrayList) {\n            StringTokenizer st = new StringTokenizer(str, \"|\");\n            String contactNumber = st.nextToken(); // Get contact number\n            String content = st.nextToken(); // Get content\n            if (!duplicateContactNumbers.add(contactNumber)) {\n                duplicateContents.add(content);\n            }\n        }\n\n        System.out.println(\"Duplicate contact numbers:\");\n        for (String contactNumber : duplicateContactNumbers) {\n            System.out.println(contactNumber);\n        }\n\n        System.out.println(\"Duplicate contents:\");\n        for (String content : duplicateContents) {\n            System.out.println(content);\n        }\n    }\n}\n<<<explanation>>>: In this code, we iterate through the ArrayList of strings and tokenize each string using the \"|\" delimiter. We store the contact number in a HashSet called duplicateContactNumbers and the content in a HashSet called duplicateContents. If a contact number is already present in the duplicateContactNumbers set, it means it is a duplicate, so we add the content to the duplicateContents set. Finally, we print out the duplicate contact numbers and duplicate contents."
            },
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.StringTokenizer;\n\npublic class TokenizeArrayList {\n\n    public static void main(String[] args) {\n        String input = \"923119511824|DST:9900|CNT:1|OPR:zong|ADD RIDAsMs923119511824|DST:9900|CNT:1|OPR:zong|ADD sMs923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia 923138824807|DST:9900|CNT:1|OPR:zong|ADD TRIXXS 923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\\n\\n 923142676343|DST:9900|CNT:1|OPR:zong|\\nADD BBCLANDAN\\n [2014-08-19 00:01:02,958] REC|[2014-08-19 00:01:12,799] REC|[2014-08-19 00:01:32,894] REC|[2014-08-19 00:01:43,753] REC|[2014-08-19 00:02:42,754] REC|\u00ef\u00bb\u00bf[2014-08-19 00:00:21,702] REC|\";\n        StringTokenizer st = new StringTokenizer(input, \"|\");\n        ArrayList<String> contactNumbers = new ArrayList<String>();\n        ArrayList<String> contents = new ArrayList<String>();\n\n        while (st.hasMoreTokens()) {\n            // Tokenize each value\n            String token = st.nextToken();\n\n            // Check if the token is a contact number\n            if (token.matches(\"[0-9]+\")) {\n                contactNumbers.add(token);\n            } else {\n                // Check if the token starts with \"ADD\"\n                if (token.startsWith(\"ADD\")) {\n                    contents.add(token.substring(4));\n                }\n            }\n        }\n\n        // Print duplicate contact numbers and their corresponding contents\n        ArrayList<String> duplicateContactNumbers = new ArrayList<String>();\n        for (String contactNumber : contactNumbers) {\n            if (Collections.frequency(contactNumbers, contactNumber) > 1 && !duplicateContactNumbers.contains(contactNumber)) {\n                duplicateContactNumbers.add(contactNumber);\n                System.out.println(\"Contact Number: \" + contactNumber);\n                System.out.println(\"Contents: \");\n                for (String content : contents) {\n                    System.out.println(content);\n                }\n            }\n        }\n    }\n}\n<<<explanation>>>: This code reads the input string and tokenizes it using the \"|\" delimiter. It stores the contact numbers in one ArrayList and the contents in another ArrayList. Then, it checks for duplicate contact numbers by determining their frequency in the contactNumbers ArrayList. If a contact number has a frequency greater than 1 and has not been previously added to the duplicateContactNumbers list, it prints the contact number and its corresponding contents. The duplicateContactNumbers list is used to keep track of contact numbers that have already been printed to avoid duplicates in the output."
            },
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>:import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.StringTokenizer;\n\npublic class DuplicateContactNumbers {\n    public static void main(String[] args) {\n        ArrayList<String> arrayList = new ArrayList<String>();\n\n        // Populate the arrayList with data\n\n        // Create a HashSet to store duplicate contact numbers\n        HashSet<String> duplicates = new HashSet<String>();\n\n        for (String str : arrayList) {\n            // Use StringTokenizer to tokenize each string in the arrayList\n            StringTokenizer st = new StringTokenizer(str, \"|\");\n            \n            // Use st.nextToken() to get the contact number and ignore the rest of the tokens\n            String contactNumber = st.nextToken();\n            \n            // Ignore the first token which is the contact number\n            st.nextToken();\n            \n            // Get the content after \"ADD\"\n            String content = st.nextToken().substring(4);\n            \n            // Check if the contact number already exists in the duplicates HashSet\n            if (duplicates.contains(contactNumber)) {\n                System.out.println(contactNumber + \" \" + content);\n            } else {\n                // Add the contact number to the duplicates HashSet\n                duplicates.add(contactNumber);\n            }\n        }\n    }\n}\n<<<explanation>>>: The code above uses the StringTokenizer class to tokenize each string in the arrayList based on the \"|\" delimiter. It then checks if the contact number (obtained using st.nextToken()) already exists in the duplicates HashSet. If it does, it prints the contact number and the content after \"ADD\". If it doesn't, it adds the contact number to the duplicates HashSet. This allows you to display only the duplicate contact numbers and the corresponding content."
            },
            "finish_reason": "stop"
        },
        {
            "index": 5,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public static void main(String[] args) {\n    String input = \"923119511824|DST:9900|CNT:1|OPR:zong|ADD RIDAsMs923119511824|DST:9900|CNT:1|OPR:zong|ADD sMs923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia 923138824807|DST:9900|CNT:1|OPR:zong|ADD TRIXXS 923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\\n\\n 923142676343|DST:9900|CNT:1|OPR:zong|\\nADD BBCLANDAN\";\n    StringTokenizer st = new StringTokenizer(input, \"|\");\n    \n    ArrayList<String> contactNumbers = new ArrayList<>();\n    while (st.hasMoreTokens()) {\n        String token = st.nextToken();\n        if (token.startsWith(\"DST\")) {\n            String contactNumber = token.split(\":\")[1];\n            if (contactNumbers.contains(contactNumber)) {\n                System.out.println(contactNumber + \" - \" + extractContent(token));\n            } else {\n                contactNumbers.add(contactNumber);\n            }\n        }\n    }\n}\n\nprivate static String extractContent(String token) {\n    return token.split(\"ADD\")[1];\n}\n<<<explanation>>>: This code uses StringTokenizer to tokenize the input string using the \"|\" delimiter. It then extracts the contact number from the tokens starting with \"DST\" and checks if it has already been added to the contactNumbers list. If it has, it extracts the content after \"ADD\" and prints it out along with the contact number. If it hasn't, it adds the contact number to the contactNumbers list."
            },
            "finish_reason": "stop"
        },
        {
            "index": 6,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public static void main(String[] args) {\n    ArrayList<String> inputList = new ArrayList<String>();\n\n    inputList.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD RIDAsMs\");\n    inputList.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD sMs\");\n    inputList.add(\"923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia\");\n    inputList.add(\"923138824807|DST:9900|CNT:1|OPR:zong|ADD TRIXXS\");\n    inputList.add(\"923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\");\n\n    HashMap<String, String> duplicates = new HashMap<String, String>();\n\n    for (String input : inputList) {\n        StringTokenizer st = new StringTokenizer(input, \"|\");\n        String contactNumber = st.nextToken();\n        String content = st.nextToken().substring(4); // Remove \"ADD \" from the content\n\n        if (!duplicates.containsKey(contactNumber)) {\n            duplicates.put(contactNumber, content);\n        } else {\n            duplicates.put(contactNumber, duplicates.get(contactNumber) + \", \" + content);\n        }\n    }\n\n    for (String contactNumber : duplicates.keySet()) {\n        String content = duplicates.get(contactNumber);\n        System.out.println(contactNumber + \": \" + content);\n    }\n}\n<<<explanation>>>: The code uses the StringTokenizer to split each input string by \"|\". It then extracts the contact number and the content from the tokens using the nextToken() method. The contact number is used as the key in a HashMap, and the content is appended to the value if the contact number already exists in the map. Finally, the map is printed to display the duplicate contact numbers and their associated content."
            },
            "finish_reason": "stop"
        },
        {
            "index": 7,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: import java.util.StringTokenizer;\nimport java.util.ArrayList;\nimport java.util.HashSet;\n\npublic class TokenizeArrayList {\n    public static void main(String[] args) {\n        ArrayList<String> arrayList = new ArrayList<>();\n        arrayList.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD RIDAsMs\");\n        arrayList.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD sMs\");\n        arrayList.add(\"923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia\");\n        arrayList.add(\"923138824807|DST:9900|CNT:1|OPR:zong|ADD TRIXXS\");\n        arrayList.add(\"923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\");\n\n        HashSet<String> duplicates = new HashSet<>();\n        for (String line : arrayList) {\n            StringTokenizer st = new StringTokenizer(line, \"|\");\n            String contactNumber = st.nextToken(); // Get the contact number\n            String content = st.nextToken().substring(4); // Get the content after \"ADD \"\n            if (!duplicates.add(contactNumber)) {\n                System.out.println(contactNumber + \": \" + content);\n            }\n        }\n    }\n}\n  \n<<<explanation>>>: The code tokenizes the ArrayList by iterating through each line and using StringTokenizer to split the line using \"|\" as the delimiter. It then retrieves the contact number using st.nextToken() and the content after \"ADD \" using st.nextToken().substring(4). If the contact number is already in the duplicates set, it prints out the contact number and content. The duplicates are stored in a HashSet to ensure uniqueness."
            },
            "finish_reason": "stop"
        },
        {
            "index": 8,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.StringTokenizer;\n\npublic class DuplicateContactNumbers {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"923119511824|DST:9900|CNT:1|OPR:zong|ADD RIDAsMs\");\n        list.add(\"923119511824|DST:9900|CNT:2|OPR:zong|ADD SMS\");\n        list.add(\"923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\");\n        list.add(\"923142676343|DST:9900|CNT:2|OPR:zong|ADD TRIXXS\");\n        list.add(\"923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia\");\n        list.add(\"923123456789|DST:9900|CNT:1|OPR:zong|ADD Test\");\n\n        HashSet<String> duplicateContactNumbers = new HashSet<>();\n\n        for (String s : list) {\n            StringTokenizer st = new StringTokenizer(s, \"|\");\n            String contactNumber = st.nextToken();\n            // Skip other tokens\n            for (int i = 0; i < 4; i++) {\n                st.nextToken();\n            }\n            String content = st.nextToken().substring(4);\n            // Check if contact number is already encountered, if yes print the content\n            if (!duplicateContactNumbers.add(contactNumber)) {\n                System.out.println(contactNumber + \" - \" + content);\n            }\n        }\n    }\n}\n<<<explanation>>>: In the given code, we have an ArrayList of strings 'list' which contains the input data. We create a HashSet 'duplicateContactNumbers' to store the contact numbers encountered, and use StringTokenizer to tokenize each string.\n\nFor each string, we extract the contact number, skip the other tokens, and then extract the content after 'ADD'. We use the HashSet to check if the contact number is already encountered, if yes, we print the contact number and content. This way we display only the duplicate contact numbers and their associated content."
            },
            "finish_reason": "stop"
        },
        {
            "index": 9,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>:\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.StringTokenizer;\n\npublic class Print {\n    public static final String FILE_LOCATION = \"C:/Users/DfroJaCk DB/Desktop/zongrecv.txt\";\n\n    public static void main (String[] args) {\n        //Your reader\n        BufferedReader in = null;\n        //Where you store the Strings\n        ArrayList<String> al = new ArrayList<String>();\n\n        try {\n            //Open the file and give it to the reader\n            in = new BufferedReader(new FileReader(FILE_LOCATION));\n            String line;\n            //As long as the file has more lines read a line at a time\n            while ((line = in.readLine()) != null) {\n                //Split the line and store it in an array\n                StringTokenizer st = new StringTokenizer(line, \"|\");\n                if (st.hasMoreTokens()) {\n                    st.nextToken(); // skip the first token\n\n                    while (st.hasMoreTokens()) {\n                        String token = st.nextToken();\n                        if (token.contains(\"ADD\")) {\n                            al.add(token);\n                        }\n                    }\n                }\n            }\n            //Catch your possible problems\n        } catch (FileNotFoundException fnfe) {\n            fnfe.printStackTrace();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        } finally {\n            //Close the reader if it was opened successfully\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        //Sort your list\n        Collections.sort(al);\n        for (String s : al) {\n            //spit it out\n            System.out.println(s);\n        }\n    }\n}\n\n<<<explanation>>>: In this code, we use the StringTokenizer class to split each line read from the file using the \"|\" delimiter. We skip the first token and then check if the remaining tokens contain the word \"ADD\". If they do, we add them to the ArrayList. Finally, we sort the ArrayList and print each element."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 1462,
        "completion_tokens": 4563,
        "total_tokens": 6025
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Java StringTokenizer.nextToken() skips over empty fields:I am using a tab (/t) as delimiter and I know there are some empty fields in my data e.g.:\n\none->two->->three\nWhere -> equals the tab. As you can see an empty field is still correctly surrounded by tabs. Data is collected using a loop :\n\n while ((strLine = br.readLine()) != null) {\n    StringTokenizer st = new StringTokenizer(strLine, \"\t\");\n    String test = st.nextToken();\n    ...\n    }\nYet Java ignores this \"empty string\" and skips the field.\n\nIs there a way to circumvent this behaviour and force java to read in empty fields anyway?\nPlease using this api: StringTokenizer.nextToken.\nAnswer:<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class TestStringTokenStrict {\n\n/**\n * Strict implementation of StringTokenizer\n * \n * @param str\n * @param delim\n * @param strict\n *            true = include NULL Token\n * @return\n */\nstatic StringTokenizer getStringTokenizerStrict(String str, String delim, boolean strict) {\n    StringTokenizer st = new StringTokenizer(str, delim, strict);\n    StringBuffer sb = new StringBuffer();\n\n    while (st.hasMoreTokens()) {\n        String s = st.nextToken();\n        if (s.equals(delim)) {\n            sb.append(\" \").append(delim);\n        } else {\n            sb.append(s).append(delim);\n            if (st.hasMoreTokens())\n                st.nextToken();\n        }\n    }\n    return (new StringTokenizer(sb.toString(), delim));\n}\n\nstatic void altStringTokenizer(StringTokenizer st) {\n    while (st.hasMoreTokens()) {\n        String type = st.nextToken();\n        String one = st.nextToken();\n        String two = st.nextToken();\n        String three = st.nextToken();\n        String four = st.nextToken();\n        String five = st.nextToken();\n\n        System.out.println(\n                \"[\" + type + \"] [\" + one + \"] [\" + two + \"] [\" + three + \"] [\" + four + \"] [\" + five + \"]\");\n    }\n}\n\npublic static void main(String[] args) {\n    String input = \"Record|One||Three||Five\";\n    altStringTokenizer(getStringTokenizerStrict(input, \"|\", true));\n}}\n<<<explanation>>>: The object your method decompressGZIP() needs is a byte[].\n\nSo the basic, technical answer to the question you have asked is:\nQuestion: Tokenize an arraylist: :I have a text file with values like :[2014-08-19 00:00:21,702] REC|SRC:923142676343|DST:9900|CNT:1|OPR:zong|\\nADD BBCLANDAN\\n [2014-08-19 00:01:02,958] REC|SRC:923138824807|DST:9900|CNT:1|OPR:zong|ADD TRIXXS [2014-08-19 00:01:12,799] REC|SRC:923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia [2014-08-19 00:01:32,894] REC|SRC:923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\\n\\n [2014-08-19 00:02:42,754] REC|SRC:923119511824|DST:9900|CNT:1|OPR:zong|ADD sMs[2014-08-19 00:01:43,753] REC|SRC:923119511824|DST:9900|CNT:1|OPR:zong|ADD RIDAsMsi have raed the text file and stored it into an arraylist with the output:output:923119511824|DST:9900|CNT:1|OPR:zong|ADD RIDAsMs923119511824|DST:9900|CNT:1|OPR:zong|ADD sMs923125473547|DST:9900|CNT:1|OPR:zong|ADD SahafatMedia 923138824807|DST:9900|CNT:1|OPR:zong|ADD TRIXXS 923142676343|DST:9900|CNT:1|OPR:zong|ADD BBCMEDIA\\n\\n 923142676343|DST:9900|CNT:1|OPR:zong|\\nADD BBCLANDAN\\n [2014-08-19 00:01:02,958] REC|[2014-08-19 00:01:12,799] REC|[2014-08-19 00:01:32,894] REC|[2014-08-19 00:01:43,753] REC|[2014-08-19 00:02:42,754] REC|\u00ef\u00bb\u00bf[2014-08-19 00:00:21,702] REC|Now i want to tokenize this arraylist to display only the duplicate contact numbers which are in output e.g 923142676343 and their content which are after ADD e.g TRIXXSI need help please ???import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;import java.util.Collections;public class pring{    public static final String FILE_LOCATION = \"C:/Users/DfroJaCk DB/Desktop/zongrecv.txt\";    public static void main ( String [ ] args )    {        //Your reader        BufferedReader in = null;        //Where you store the Strings        ArrayList < String > al = new ArrayList < String > ();        try        {            //Open the file and give it to the reader            in = new BufferedReader ( new FileReader ( FILE_LOCATION ) );            String line;            //As long as the file has more lines read a line at a time            while ( ( line = in.readLine () ) != null )            {                //Split the line and stoe it in an array                String [ ] splitLine = line.split ( \"SRC:\" );                for ( int i = 0; i < splitLine.length; i++ )                {                    //Add each element of the split array into an ArrayList                    al.add ( splitLine [ i ] );                }            }        //Catch your possible problems        } catch ( FileNotFoundException fnfe )        {            fnfe.printStackTrace ();        } catch ( IOException ioe )        {            ioe.printStackTrace ();        }               //Sort your list        Collections.sort ( al );        for ( String s : al )        {            //spit it out            System.out.println ( s );        }     }}\nPlease using this api: StringTokenizer.nextToken.\nAnswer:"
}