{
    "id": "chatcmpl-8HSqIOlGPJVmscIfN3dZOVQ7o8ceY",
    "object": "chat.completion",
    "created": 1699173138,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n<<<code>>>: You can use the Apache CXF library to parse MTOM/XOP SOAP responses. Here's an example of how you can do it:\n\n1. Add the Apache CXF library to your project dependencies.\n\n2. Use the following code to parse the MTOM/XOP SOAP response:\n\nimport org.apache.cxf.attachment.AttachmentDeserializer;\nimport org.apache.cxf.attachment.AttachmentImpl;\nimport org.apache.cxf.attachment.AttachmentUtil;\nimport org.apache.cxf.binding.soap.SoapMessage;\nimport org.apache.cxf.helpers.IOUtils;\nimport org.apache.cxf.io.CachedOutputStream;\nimport org.apache.cxf.message.Attachment;\nimport org.apache.cxf.staxutils.StaxUtils;\n\n// Assuming 'response' is the InputStream containing the SOAP response\nSoapMessage soapMessage = new SoapMessage(null);\nAttachmentDeserializer attachmentDeserializer = new AttachmentDeserializer(soapMessage);\n\nStaxUtils.copy(new InputStreamReader(response), soapMessage.getContent(Reader.class));\n\nList<Attachment> attachments = new ArrayList<>();\nattachmentDeserializer.initializeAttachments(attachments);\n\nfor (Attachment attachment : attachments) {\n    if (AttachmentUtil.isMtom(attachment)) {\n        // MTOM attachment\n        InputStream attachmentInputStream = attachment.getDataHandler().getInputStream();\n        // Process the attachment as needed\n    } else {\n        // Non-MTOM attachment\n        CachedOutputStream cachedOutputStream = new CachedOutputStream();\n        IOUtils.copyAndCloseInput(attachment.getDataHandler().getInputStream(), cachedOutputStream);\n        // Process the attachment as needed\n    }\n}\n\n<<<explanation>>>: To parse MTOM/XOP SOAP responses, you can use the Apache CXF library. The code above shows how to parse the response and handle both MTOM and non-MTOM attachments. The AttachmentDeserializer class is used to deserialize the attachments, and you can process each attachment as needed."
            },
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n<<<code>>>: You can use the Apache CXF library to parse MTOM/XOP SOAP responses. Here's an example of how you can do it:\n\nFirst, you need to add the Apache CXF library to your project. You can do this by adding the following dependency to your build.gradle file:\n\ndependencies {\n    implementation 'org.apache.cxf:cxf-rt-frontend-jaxws:3.4.5'\n}\n\nThen, you can use the following code to parse the MTOM/XOP SOAP response:\n\nimport org.apache.cxf.binding.soap.SoapMessage;\nimport org.apache.cxf.jaxws.JaxWsProxyFactoryBean;\nimport org.apache.cxf.message.MessageContentsList;\n\n// Create a JaxWsProxyFactoryBean\nJaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();\nfactory.setServiceClass(YourServiceInterface.class);\nfactory.setAddress(\"http://your-service-url\");\n\n// Create a SOAP message\nSoapMessage message = (SoapMessage) factory.create().invoke(\"yourSoapOperation\", yourSoapRequest);\n\n// Get the response content\nMessageContentsList responseContents = message.getContent(MessageContentsList.class);\nObject response = responseContents.get(0);\n\n// Parse the response using your desired logic\n\nThis code uses the JaxWsProxyFactoryBean to create a SOAP message and invoke a SOAP operation. The response is then retrieved using the getContent() method and can be parsed using your desired logic.\n\nNote that you need to replace \"YourServiceInterface\" with the interface of your SOAP service and \"http://your-service-url\" with the actual URL of your SOAP service.\n\nUsing Apache CXF allows you to handle MTOM/XOP SOAP responses in a more efficient and convenient way."
            },
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n<<<code>>>: You can use the Apache CXF library to parse MTOM/XOP SOAP responses. Here is an example of how you can do it:\n\n1. Add the Apache CXF library to your project.\n\n2. Create a CXF client to send the SOAP request and receive the response:\n\n   JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();\n   factory.setServiceClass(YourService.class);\n   factory.setAddress(\"http://your-service-url\");\n   YourService client = (YourService) factory.create();\n\n   // Make the SOAP request and get the response\n   YourResponse response = client.yourMethod(yourRequest);\n\n3. Use the Apache Axiom library to parse the MTOM/XOP SOAP response:\n\n   // Get the SOAP response as a String\n   String soapResponse = response.toString();\n\n   // Create an AXIOM SOAP message from the SOAP response\n   OMElement soapMessage = AXIOMUtil.stringToOM(soapResponse);\n\n   // Extract the MTOM/XOP attachments from the SOAP message\n   Iterator<OMElement> attachmentIterator = soapMessage.getChildrenWithName(new QName(\"http://www.w3.org/2004/08/xop/include\", \"Include\"));\n   while (attachmentIterator.hasNext()) {\n       OMElement attachmentElement = attachmentIterator.next();\n       String contentID = attachmentElement.getAttributeValue(new QName(\"href\"));\n       \n       // Get the MTOM/XOP attachment as a byte array\n       DataHandler attachment = response.getAttachment(contentID);\n       InputStream attachmentInputStream = attachment.getInputStream();\n       \n       // Process the attachment as needed\n       // ...\n   }\n\n<<<explanation>>>: The Apache CXF library provides a high-level API for working with SOAP messages. You can use it to send the SOAP request and receive the response. The Apache Axiom library is used to parse the MTOM/XOP SOAP response and extract the attachments. The code snippet provided shows how to create a CXF client, make the SOAP request, and parse the MTOM/XOP SOAP response using Apache Axiom."
            },
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n<<<code>>>: You can use the Apache CXF library to parse MTOM/XOP SOAP responses. Here is an example code snippet:\n\nimport org.apache.cxf.attachment.AttachmentDeserializer;\nimport org.apache.cxf.message.Attachment;\nimport org.apache.cxf.message.Message;\nimport org.apache.cxf.message.MessageImpl;\nimport org.apache.cxf.staxutils.StaxUtils;\n\n// Create a CXF Message object\nMessage message = new MessageImpl();\nmessage.put(Message.CONTENT_TYPE, \"multipart/related; type=\\\"application/xop+xml\\\"\");\n\n// Create an AttachmentDeserializer\nAttachmentDeserializer attachmentDeserializer = new AttachmentDeserializer(message);\n\n// Read the SOAP response from the InputStream\nStaxUtils.read(new InputStreamReader(inputStream), attachmentDeserializer);\n\n// Get the SOAP body\nString soapBody = message.getContent(String.class);\n\n// Get the attachments\nCollection<Attachment> attachments = message.getAttachments();\n\n// Process the SOAP body and attachments as needed\n\n<<<explanation>>>: The code snippet shows how to use Apache CXF to parse MTOM/XOP SOAP responses. It creates a CXF Message object and sets the content type to \"multipart/related; type=\\\"application/xop+xml\\\"\". Then, it creates an AttachmentDeserializer and reads the SOAP response using StaxUtils. The SOAP body can be obtained from the Message object using message.getContent(String.class), and the attachments can be accessed using message.getAttachments(). You can process the SOAP body and attachments as needed."
            },
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n<<<code>>>: You can use Apache CXF and Apache Axiom to parse MTOM/XOP SOAP responses. Here's an example of how you can do it:\n\n1. First, make sure you have the necessary dependencies in your project:\n   - Apache CXF: Add the following dependency to your build.gradle file:\n     implementation 'org.apache.cxf:cxf-rt-frontend-jaxws:3.4.1'\n   - Apache Axiom: Add the following dependency to your build.gradle file:\n     implementation 'org.apache.ws.commons.axiom:axiom-api:1.2.32'\n\n2. Create a CXF client using JAX-WS:\n   JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();\n   factory.setServiceClass(YourService.class);\n   factory.setAddress(\"http://your-service-url\");\n   YourService client = (YourService) factory.create();\n\n3. Enable MTOM on the client:\n   BindingProvider bp = (BindingProvider) client;\n   SOAPBinding binding = (SOAPBinding) bp.getBinding();\n   binding.setMTOMEnabled(true);\n\n4. Make a SOAP request and get the response:\n   YourRequest request = new YourRequest();\n   // set request parameters\n   YourResponse response = client.yourMethod(request);\n\n5. Parse the MTOM/XOP SOAP response using Apache Axiom:\n   SOAPMessage soapMessage = response.getMessage();\n   InputStream inputStream = soapMessage.getSOAPPart().getContent();\n   MTOMXMLStreamReader mtomReader = new MTOMXMLStreamReader(inputStream);\n\n   // Now you can use the mtomReader to parse the MTOM/XOP SOAP response\n   // You can access the attachments using mtomReader.getAttachments()\n\n<<<explanation>>>: By using Apache CXF and Apache Axiom, you can easily parse MTOM/XOP SOAP responses. Apache CXF provides the JAX-WS client implementation, and Apache Axiom provides the necessary classes for parsing MTOM/XOP SOAP messages. You need to enable MTOM on the client side to receive the MTOM/XOP SOAP response. Then, you can use Apache Axiom's MTOMXMLStreamReader to parse the response and access the attachments if needed."
            },
            "finish_reason": "stop"
        },
        {
            "index": 5,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n<<<code>>>: // You can use Apache CXF to parse MTOM/XOP SOAP response\n// Here is an example of how you can do it using Apache CXF:\n\nimport org.apache.cxf.attachment.AttachmentDeserializer;\nimport org.apache.cxf.binding.soap.SoapMessage;\nimport org.apache.cxf.helpers.IOUtils;\nimport org.apache.cxf.io.CachedOutputStream;\nimport org.apache.cxf.message.Attachment;\nimport org.apache.cxf.message.Message;\nimport org.apache.cxf.phase.AbstractPhaseInterceptor;\nimport org.apache.cxf.phase.Phase;\nimport org.apache.cxf.phase.PhaseInterceptorChain;\nimport org.apache.cxf.phase.PhaseManager;\nimport org.apache.cxf.transport.http.AbstractHTTPDestination;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.xml.soap.MessageFactory;\nimport javax.xml.soap.SOAPMessage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collection;\nimport java.util.Iterator;\n\n// Create an interceptor to handle MTOM/XOP parsing\npublic class MTOMInterceptor extends AbstractPhaseInterceptor<Message> {\n    \n    public MTOMInterceptor() {\n        super(Phase.RECEIVE);\n    }\n    \n    @Override\n    public void handleMessage(Message message) {\n        HttpServletRequest request = (HttpServletRequest) message.get(AbstractHTTPDestination.HTTP_REQUEST);\n        InputStream inputStream;\n        try {\n            inputStream = request.getInputStream();\n            CachedOutputStream cachedOutputStream = new CachedOutputStream();\n            IOUtils.copy(inputStream, cachedOutputStream);\n            \n            // Create a SOAP message from the input stream\n            MessageFactory factory = MessageFactory.newInstance();\n            SOAPMessage soapMessage = factory.createMessage(null, cachedOutputStream.getInputStream());\n            \n            // Use Apache CXF AttachmentDeserializer to handle MTOM/XOP parsing\n            AttachmentDeserializer attachmentDeserializer = new AttachmentDeserializer(soapMessage.getMimeHeaders(), soapMessage.getSOAPPart());\n            attachmentDeserializer.initializeAttachments();\n            \n            // Get the attachments\n            Collection<Attachment> attachments = soapMessage.getAttachments();\n            Iterator<Attachment> attachmentIterator = attachments.iterator();\n            while (attachmentIterator.hasNext()) {\n                Attachment attachment = attachmentIterator.next();\n                // Process the attachment as needed\n                // ...\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n// Add the interceptor to your CXF configuration\nPhaseInterceptorChain chain = PhaseInterceptorChain.getCurrentMessage();\nchain.add(new MTOMInterceptor());\nPhaseManager phaseManager = bus.getExtension(PhaseManager.class);\nphaseManager.getOutPhases().addAll(chain.getOutPhases());\nphaseManager.getInPhases().addAll(chain.getInPhases());\n\n<<<explanation>>>: To parse MTOM/XOP SOAP response, you can use Apache CXF library. You need to create a custom interceptor that handles the parsing logic. In the interceptor, you can use the AttachmentDeserializer class from Apache CXF to handle the MTOM/XOP parsing. This will allow you to extract the attachments from the SOAP message and process them as needed. Make sure to add the interceptor to your CXF configuration to enable it during the message processing."
            },
            "finish_reason": "stop"
        },
        {
            "index": 6,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n<<<code>>>: You can use the Apache CXF library to parse MTOM/XOP SOAP response. Here's an example of how you can do it:\n\nFirst, add the CXF library to your project dependencies.\n\nThen, you can use the following code to parse the MTOM/XOP SOAP response:\n\nimport org.apache.cxf.binding.soap.saaj.SAAJInInterceptor;\nimport org.apache.cxf.endpoint.Client;\nimport org.apache.cxf.frontend.ClientProxy;\nimport org.apache.cxf.jaxws.JaxWsProxyFactoryBean;\nimport org.apache.cxf.transport.http.HTTPConduit;\nimport org.apache.cxf.transports.http.configuration.HTTPClientPolicy;\nimport org.apache.cxf.transports.http.configuration.HTTPConduitConfigurer;\nimport org.apache.cxf.transports.http.configuration.HTTPConduitFactory;\nimport org.apache.cxf.transports.http.configuration.HTTPConduitFeature;\nimport org.apache.cxf.transports.http.configuration.HTTPConduitConfigurer;\n\npublic class MTOMParser {\n    public static void main(String[] args) {\n        // Create a JaxWsProxyFactoryBean\n        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();\n        factory.setServiceClass(YourServiceInterface.class);\n        factory.setAddress(\"http://your-service-url\");\n\n        // Create a client proxy\n        YourServiceInterface client = (YourServiceInterface) factory.create();\n\n        // Enable MTOM on the client\n        Client cxfClient = ClientProxy.getClient(client);\n        cxfClient.getInInterceptors().add(new SAAJInInterceptor());\n        cxfClient.getOutInterceptors().add(new MTOMOutInterceptor());\n\n        // Make a SOAP request and get the response\n        YourResponse response = client.yourMethod();\n\n        // Access the MTOM/XOP data in the response\n        YourData data = response.getData();\n        InputStream inputStream = data.getInputStream();\n\n        // Read the data from the input stream\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\n            // Process the data\n            // ...\n        }\n\n        // Close the input stream\n        inputStream.close();\n    }\n}\n\nPlease note that you need to replace \"YourServiceInterface\" with your actual service interface and \"yourMethod\" with the method you want to call on the service.\n\nAlso, make sure to handle any exceptions that may occur during the parsing and processing of the MTOM/XOP data.\n\n<<<explanation>>>: The Apache CXF library provides support for parsing MTOM/XOP SOAP responses. By using the CXF library, you can take advantage of its built-in features and optimizations for handling MTOM/XOP data. The example code shows how you can enable MTOM on the client and access the MTOM/XOP data in the response. You can then read and process the data from the input stream."
            },
            "finish_reason": "stop"
        },
        {
            "index": 7,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n<<<code>>>: You can use the Apache CXF library to parse MTOM/XOP SOAP responses. Here's an example of how you can do it:\n\n1. Add the following dependencies to your project:\n   - Apache CXF Core\n   - Apache CXF JAX-RS\n   - Apache CXF JAX-WS\n\n2. Create a CXF client to send the SOAP request and receive the response:\n   ```\n   JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();\n   factory.setServiceClass(YourService.class);\n   factory.setAddress(\"http://your-service-url\");\n   YourService client = (YourService) factory.create();\n\n   // Send the SOAP request and receive the response\n   YourResponse response = client.yourMethod(yourRequest);\n   ```\n\n3. Parse the MTOM/XOP SOAP response using the Apache CXF MTOMFeature:\n   ```\n   // Enable MTOM on the client\n   MTOMFeature mtomFeature = new MTOMFeature();\n   client.getFeatures().add(mtomFeature);\n\n   // Access the MTOM/XOP attachments in the response\n   Collection<Attachment> attachments = mtomFeature.getAttachments();\n   for (Attachment attachment : attachments) {\n       // Process each attachment as needed\n       InputStream attachmentInputStream = attachment.getDataHandler().getInputStream();\n       // Use InputStream.read to read the attachment data\n   }\n   ```\n\n4. Use InputStream.read to read the attachment data as needed.\n\n<<<explanation>>>: By using Apache CXF and its MTOMFeature, you can enable MTOM/XOP support in your SOAP client and easily access the attachments in the response. The MTOMFeature provides a collection of attachments, which you can iterate over and process each attachment using InputStream.read to read the attachment data. This allows you to parse MTOM/XOP SOAP responses in a more efficient and performant way."
            },
            "finish_reason": "stop"
        },
        {
            "index": 8,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n\n<<<code>>>: You can use the Apache CXF library to parse MTOM/XOP SOAP responses. Here is an example of how you can do it:\n\n1. Add the Apache CXF dependencies to your project.\n\n2. Use the following code to parse the MTOM/XOP SOAP response:\n\n```\nimport org.apache.cxf.attachment.AttachmentDeserializer;\nimport org.apache.cxf.attachment.AttachmentImpl;\nimport org.apache.cxf.message.Attachment;\n\n// Assuming you have the SOAP response in an InputStream called soapResponseInputStream\n// Create a new AttachmentDeserializer\nAttachmentDeserializer attachmentDeserializer = new AttachmentDeserializer();\n\n// Create a list to store the attachments\nList<Attachment> attachments = new ArrayList<>();\n\n// Read the MTOM/XOP SOAP response\nint bytesRead;\nbyte[] buffer = new byte[4096];\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nwhile ((bytesRead = soapResponseInputStream.read(buffer)) != -1) {\n    baos.write(buffer, 0, bytesRead);\n}\n\n// Convert the response to a byte array\nbyte[] responseBytes = baos.toByteArray();\n\n// Parse the MTOM/XOP attachments\nattachmentDeserializer.initializeAttachments(responseBytes);\nwhile (attachmentDeserializer.hasNext()) {\n    Attachment attachment = attachmentDeserializer.next();\n    attachments.add(attachment);\n}\n\n// Now you can access the attachments and process them as needed\nfor (Attachment attachment : attachments) {\n    // Access the attachment data\n    InputStream attachmentData = attachment.getDataHandler().getInputStream();\n    // Process the attachment data\n    // ...\n}\n```\n\n<<<explanation>>>: The code above uses the Apache CXF AttachmentDeserializer class to parse the MTOM/XOP SOAP response. It reads the response from the InputStream, converts it to a byte array, and then uses the AttachmentDeserializer to parse the attachments. The attachments are stored in a list, and you can access and process them as needed. This approach allows you to take advantage of the performance optimizations provided by Apache CXF for parsing MTOM/XOP SOAP responses."
            },
            "finish_reason": "stop"
        },
        {
            "index": 9,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: InputStream.read\n<<<code>>>: You can use Apache CXF to parse MTOM/XOP SOAP responses. Here's an example of how you can do it:\n\n1. Add the Apache CXF dependencies to your project:\n\n```xml\n<dependency>\n    <groupId>org.apache.cxf</groupId>\n    <artifactId>cxf-rt-frontend-jaxws</artifactId>\n    <version>3.4.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.cxf</groupId>\n    <artifactId>cxf-rt-ws-addr</artifactId>\n    <version>3.4.0</version>\n</dependency>\n```\n\n2. Create a CXF client and configure it to enable MTOM:\n\n```java\nJaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();\nfactory.setServiceClass(YourServiceInterface.class);\nfactory.setAddress(\"http://your-service-url\");\nYourServiceInterface client = (YourServiceInterface) factory.create();\n\nBindingProvider bindingProvider = (BindingProvider) client;\nSOAPBinding binding = (SOAPBinding) bindingProvider.getBinding();\nbinding.setMTOMEnabled(true);\n```\n\n3. Invoke the SOAP operation and retrieve the response:\n\n```java\nYourResponseObject response = client.yourSoapOperation(yourRequestObject);\n```\n\nApache CXF will automatically handle the parsing of the MTOM/XOP SOAP response for you, so you don't have to manually parse it using InputStream.read.\n\nNote: Make sure to replace \"YourServiceInterface\" with the actual interface of your service, \"http://your-service-url\" with the URL of your SOAP service, \"YourResponseObject\" with the class representing the response, and \"YourRequestObject\" with the class representing the request.\n\n<<<explanation>>>: Apache CXF is a powerful SOAP framework that provides support for parsing MTOM/XOP SOAP responses. By configuring the CXF client to enable MTOM and using the provided CXF APIs, you can easily parse the MTOM/XOP SOAP response without having to manually handle the complex logic yourself."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 560,
        "completion_tokens": 4368,
        "total_tokens": 4928
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Android InputStream.read() horribly slow:I'm working on an Android app that needs to communicate with a server (running on my PC) which is also written by me. The problem is that InputStream.read() takes an eternity, processing 200kb takes something around 30 seconds. My code: client = new Socket(\"192.168.1.1\", 1235);\nclient.setTcpNoDelay(true);\nclient.setReceiveBufferSize(1048576);\nInputStream is = client.getInputStream();\n\nbyte[] buffer = new byte[1048576];\nint i = 0;\nint length = -1;\n\nwhile (true)\n{\n    int b = is.read();\n    if (b == -1)\n    {\n        success = false;\n        break;\n    }\n    buffer[i] = (byte) b;\n\n    if (i == length)\n        break;\n\n                                    if (i == 3)\n                                    {\n                                                length = buffer[0] | buffer[1] << 8 | buffer[2] << 16 | buffer[3] << 24;\n                                                    \n                                        }\n\n                                        i++;\n\n        }\nPlease using this api: InputStream.read.\nAnswer:<<<api>>>: InputStream.read\n<<<code>>>: final byte[] lengthBuffer = new byte[3];\ntry{\n    int b = is.read(lengthBuffer);\n    // make sure b was 3 and do your length calculation\n    final byte buffer = new byte[length];\n    b = is.read(buffer);\n    // check b and then you have your bytes}\nexcept {System.out.println(\"Something went wrong.\");\")}\n<<<explanation>>>: Why are you reading each byte individually? It looks like you really want to read the first 3 bytes and figure out your length and then read that block. Then you can at least get the optimizations that Inputstream can provide for reading blocks of data rather than one byte at a time. And you are not allocating that mega array like you currently have.\nQuestion: How to parse XOP/MTOM SOAP response using java?: :I just want to know, is there any simple way for parsing  MTOM/XOP SOAP response. The problem is that I use plain HTTP to send soap message and javax.xml for parsing response. But some services responds me with mulipart/related and it    requires much more complex logic to parse it (performance matters). So I wonder may I somehow take advantage of apache cxf, apache axiom or any other library for parsing MTOM/XOP SOAP response?\nPlease using this api: InputStream.read.\nAnswer:"
}