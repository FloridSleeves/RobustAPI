{
    "id": "chatcmpl-8HVynjF4EiWPjKqbpWbqRpQ3SBLOk",
    "object": "chat.completion",
    "created": 1699185197,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public ArrayList<Worker> listOfWorkers(){\n    ArrayList<Worker> workerList = new ArrayList<>();\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n\n            // Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                Engineer eng = new Engineer(name, social, years, jobType, weeklyBen);\n                workerList.add(eng);\n            }\n            // Admin. Person. Object type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                AdministrativePersonnel ap = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n                workerList.add(ap);\n            }\n            // Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                Management mang = new Management(name, social, years, jobType, weeklyBen, bonus);\n                workerList.add(mang);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workerList;\n}\n<<<explanation>>>: In the listOfWorkers() method, an ArrayList of type Worker is created called workerList. Inside the while loop, after creating each object of the respective worker type, it is added to the workerList using the add() method. Finally, the workerList is returned."
            },
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public ArrayList<Worker> listOfWorkers() {\n    ArrayList<Worker> workerList = new ArrayList<Worker>();\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n            \n            //Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                Engineer eng = new Engineer(name, social, years, jobType, weeklyBen);\n                workerList.add(eng);\n            }\n            //Admin. Person. Object  type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                AdministrativePersonnel ap = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n                workerList.add(ap);\n            }\n            //Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                Management mang = new Management(name, social, years, jobType, weeklyBen, bonus);\n                workerList.add(mang);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workerList;\n}\n<<<explanation>>>: In the listOfWorkers() method, I have added an ArrayList<Worker> called workerList to store the objects created. After creating each object, I have added it to the workerList using the add() method. Finally, I have returned the workerList."
            },
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public ArrayList<Worker> listOfWorkers() {\n    ArrayList<Worker> workersList = new ArrayList<Worker>();\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n            Worker worker = null;\n            // Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                Engineer eng = new Engineer(name, social, years, jobType, weeklyBen);\n                worker = eng;\n            }\n            // Admin. Person. Object type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                AdministrativePersonnel ap = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n                worker = ap;\n            }\n            // Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                Management mang = new Management(name, social, years, jobType, weeklyBen, bonus);\n                worker = mang;\n            }\n            if (worker != null) {\n                workersList.add(worker);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workersList;\n}\n<<<explanation>>>: In the listOfWorkers() method, I have added an ArrayList called workersList to store the objects of each type of Worker. Inside the while loop, after creating the objects of each type of Worker, I have added them to the workersList using the add() method. Finally, I have returned the workersList."
            },
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public ArrayList<Worker> listOfWorkers() {\n    ArrayList<Worker> workerList = new ArrayList<Worker>();\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n            // Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                Engineer eng = new Engineer(name, social, years, jobType, weeklyBen);\n                workerList.add(eng);\n            }\n            // Admin. Person. Object type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                AdministrativePersonnel ap = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n                workerList.add(ap);\n            }\n            // Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                Management mang = new Management(name, social, years, jobType, weeklyBen, bonus);\n                workerList.add(mang);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workerList;\n}\n<<<explanation>>>: In the listOfWorkers() method, I created an ArrayList called workerList to store the Worker objects. After creating each Worker object, I added it to the workerList using the add() method. Finally, I returned the workerList."
            },
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public ArrayList<Worker> listOfWorkers() {\n    ArrayList<Worker> workerList = new ArrayList<>();\n\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n\n            // Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                Engineer eng = new Engineer(name, social, years, jobType, weeklyBen);\n                workerList.add(eng);\n            }\n            // Admin. Person. Object type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                AdministrativePersonnel ap = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n                workerList.add(ap);\n            }\n            // Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                Management mang = new Management(name, social, years, jobType, weeklyBen, bonus);\n                workerList.add(mang);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workerList;\n}\n<<<explanation>>>: In the listOfWorkers() method, I have created an ArrayList called workerList to store the Worker objects. Inside the while loop, after creating each Worker object, I have added it to the workerList using the add() method. Finally, I have returned the workerList."
            },
            "finish_reason": "stop"
        },
        {
            "index": 5,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public ArrayList<Worker> listOfWorkers() {\n    ArrayList<Worker> workersList = new ArrayList<Worker>();\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n            Worker worker = null;\n            // Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                worker = new Engineer(name, social, years, jobType, weeklyBen);\n            }\n            // Admin. Person. Object type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                worker = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n            }\n            // Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                worker = new Management(name, social, years, jobType, weeklyBen, bonus);\n            }\n            if (worker != null) {\n                workersList.add(worker);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workersList;\n}\n<<<explanation>>>: In the given code snippet, an ArrayList of type Worker named workersList is created to store the objects of each type of worker. Inside the try block, after creating the objects of each type of worker, the worker object is added to the workersList using the add() method. Finally, the workersList is returned."
            },
            "finish_reason": "stop"
        },
        {
            "index": 6,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public ArrayList<Worker> listOfWorkers() {\n    ArrayList<Worker> workerList = new ArrayList<>();\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n            // Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                Engineer eng = new Engineer(name, social, years, jobType, weeklyBen);\n                workerList.add(eng);\n            }\n            // Admin. Person. Object type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                AdministrativePersonnel ap = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n                workerList.add(ap);\n            }\n            // Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                Management mang = new Management(name, social, years, jobType, weeklyBen, bonus);\n                workerList.add(mang);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workerList;\n}\n<<<explanation>>>: In the listOfWorkers() method, I have created an ArrayList called workerList to store the objects of each type of worker. Inside the while loop, after creating the objects of each type, I have added them to the workerList using the add() method. Finally, I am returning the workerList."
            },
            "finish_reason": "stop"
        },
        {
            "index": 7,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken()\n<<<code>>>: public ArrayList<Worker> listOfWorkers() {\n    ArrayList<Worker> workerList = new ArrayList<>();\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n            // Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                Engineer eng = new Engineer(name, social, years, jobType, weeklyBen);\n                workerList.add(eng);\n            }\n            // Admin. Person. Object type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                AdministrativePersonnel ap = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n                workerList.add(ap);\n            }\n            // Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                Management mang = new Management(name, social, years, jobType, weeklyBen, bonus);\n                workerList.add(mang);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workerList;\n}\n<<<explanation>>>: In the listOfWorkers() method, I have added an ArrayList of type Worker called workerList. Inside the while loop, after creating each worker object, I have added it to the workerList using the add() method. Finally, I have returned the workerList. This way, the objects created are stored in the ArrayList and returned."
            },
            "finish_reason": "stop"
        },
        {
            "index": 8,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public ArrayList<Worker> listOfWorkers() {\n    ArrayList<Worker> workerList = new ArrayList<Worker>();\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n            // Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                Engineer eng = new Engineer(name, social, years, jobType, weeklyBen);\n                workerList.add(eng);\n            }\n            // Admin. Person. Object type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                AdministrativePersonnel ap = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n                workerList.add(ap);\n            }\n            // Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                Management mang = new Management(name, social, years, jobType, weeklyBen, bonus);\n                workerList.add(mang);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workerList;\n}\n<<<explanation>>>: In the listOfWorkers() method, an ArrayList called workerList is created to store the Worker objects. Inside the while loop, after creating the objects of each type of worker, they are added to the workerList using the add() method. Finally, the workerList is returned."
            },
            "finish_reason": "stop"
        },
        {
            "index": 9,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public ArrayList<Worker> listOfWorkers() {\n    ArrayList<Worker> workerList = new ArrayList<>();\n    try {\n        File ifile = new File(\"worker.txt\");\n        Scanner scan = new Scanner(ifile);\n        while (scan.hasNextLine()) {\n            String line = scan.nextLine();\n            StringTokenizer st = new StringTokenizer(line, \",\");\n            String jobs = st.nextToken();\n            Jobs jobType = Jobs.valueOf(jobs);\n            // Engineer Object type\n            if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                Engineer eng = new Engineer(name, social, years, jobType, weeklyBen);\n                workerList.add(eng);\n            }\n            // Admin. Person. Object type\n            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double rate = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double hours = Double.parseDouble(str4);\n                AdministrativePersonnel ap = new AdministrativePersonnel(name, social, years, jobType, rate, hours);\n                workerList.add(ap);\n            }\n            // Management Object type\n            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER) {\n                String name = st.nextToken();\n                String str1 = st.nextToken();\n                int social = Integer.parseInt(str1);\n                String str2 = st.nextToken();\n                int years = Integer.parseInt(str2);\n                String str3 = st.nextToken();\n                double weeklyBen = Double.parseDouble(str3);\n                String str4 = st.nextToken();\n                double bonus = Double.parseDouble(str4);\n                Management mang = new Management(name, social, years, jobType, weeklyBen, bonus);\n                workerList.add(mang);\n            }\n        }\n    } catch (IOException ioe) {\n        System.out.println(\"Something went wrong\");\n    }\n    return workerList;\n}\n<<<explanation>>>: In the listOfWorkers() method, an ArrayList named workerList is created to store the Worker objects. Inside the while loop, after creating each Worker object, it is added to the workerList using the add() method. Finally, the method returns the workerList containing all the Worker objects."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2396,
        "completion_tokens": 5832,
        "total_tokens": 8228
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Java StringTokenizer.nextToken() skips over empty fields:I am using a tab (/t) as delimiter and I know there are some empty fields in my data e.g.:\n\none->two->->three\nWhere -> equals the tab. As you can see an empty field is still correctly surrounded by tabs. Data is collected using a loop :\n\n while ((strLine = br.readLine()) != null) {\n    StringTokenizer st = new StringTokenizer(strLine, \"\t\");\n    String test = st.nextToken();\n    ...\n    }\nYet Java ignores this \"empty string\" and skips the field.\n\nIs there a way to circumvent this behaviour and force java to read in empty fields anyway?\nPlease using this api: StringTokenizer.nextToken.\nAnswer:<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: public class TestStringTokenStrict {\n\n/**\n * Strict implementation of StringTokenizer\n * \n * @param str\n * @param delim\n * @param strict\n *            true = include NULL Token\n * @return\n */\nstatic StringTokenizer getStringTokenizerStrict(String str, String delim, boolean strict) {\n    StringTokenizer st = new StringTokenizer(str, delim, strict);\n    StringBuffer sb = new StringBuffer();\n\n    while (st.hasMoreTokens()) {\n        String s = st.nextToken();\n        if (s.equals(delim)) {\n            sb.append(\" \").append(delim);\n        } else {\n            sb.append(s).append(delim);\n            if (st.hasMoreTokens())\n                st.nextToken();\n        }\n    }\n    return (new StringTokenizer(sb.toString(), delim));\n}\n\nstatic void altStringTokenizer(StringTokenizer st) {\n    while (st.hasMoreTokens()) {\n        String type = st.nextToken();\n        String one = st.nextToken();\n        String two = st.nextToken();\n        String three = st.nextToken();\n        String four = st.nextToken();\n        String five = st.nextToken();\n\n        System.out.println(\n                \"[\" + type + \"] [\" + one + \"] [\" + two + \"] [\" + three + \"] [\" + four + \"] [\" + five + \"]\");\n    }\n}\n\npublic static void main(String[] args) {\n    String input = \"Record|One||Three||Five\";\n    altStringTokenizer(getStringTokenizerStrict(input, \"|\", true));\n}}\n<<<explanation>>>: The object your method decompressGZIP() needs is a byte[].\n\nSo the basic, technical answer to the question you have asked is:\nQuestion: How do I store objects created into an ArrayList and return it?: :I'm asked to create a method called listOfWorkers in which i will create objects of each type of the 3 workers I have by reading the data from the file \"workers.txt\" and then store the objects into an ArrayList of type Worker and return it.  I have managed to make the objects of each type of the 3 workers with by reading the data from the file, but now I don't know how to store them into an ArrayList. Any help guys?Class i'm coding in right nowimport java.util.*;import java.io.*;public class WorkerBenefits {public ArrayList<Worker> listOfWorkers(){    try    {        File ifile = new File(\"worker.txt\");        Scanner scan = new Scanner(ifile);        while (scan.hasNextLine())        {            String line = scan.nextLine();            StringTokenizer st = new StringTokenizer(line,\",\");            String jobs = st.nextToken();            Jobs jobType = Jobs.valueOf(jobs);            //Engineer Object type             if (jobType == Jobs.ELECTRICAL_ENGINEER || jobType == Jobs.MECHANICAL_ENGINEER)            {                String name = st.nextToken();                String str1 = st.nextToken();                int social = Integer.parseInt(str1);                String str2 = st.nextToken();                int years = Integer.parseInt(str2);                String str3 = st.nextToken();                double weeklyBen = Double.parseDouble(str3);                Engineer eng = new Engineer(name,social,years,jobType,weeklyBen);            }            //Admin. Person. Object  type            else if (jobType == Jobs.ADMINISTRATIVE_SECRETARY || jobType == Jobs.ADMINISTRATIVE_ASSISTANT)            {                String name = st.nextToken();                String str1 = st.nextToken();                int social = Integer.parseInt(str1);                String str2 = st.nextToken();                int years = Integer.parseInt(str2);                String str3 = st.nextToken();                double rate = Double.parseDouble(str3);                String str4 = st.nextToken();                double hours = Double.parseDouble(str4);                AdministrativePersonnel ap = new AdministrativePersonnel(name,social,years,jobType,rate,hours);            }            //Management Object type            else if (jobType == Jobs.ENGINEERING_MANAGER || jobType == Jobs.ADMINISTRATIVE_MANAGER)            {                String name = st.nextToken();                String str1 = st.nextToken();                int social = Integer.parseInt(str1);                String str2 = st.nextToken();                int years = Integer.parseInt(str2);                String str3 = st.nextToken();                double weeklyBen = Double.parseDouble(str3);                String str4 = st.nextToken();                double bonus = Double.parseDouble(str4);                Management mang = new Management(name,social,years,jobType,weeklyBen,bonus);            }        }    }    catch (IOException ioe)    {        System.out.println(\"Something went wrong\");    }    return ArrayList;}}Here is the code for the other classes just in case you guys need them:Jobspublic enum Jobs {ELECTRICAL_ENGINEER, MECHANICAL_ENGINEER, ADMINISTRATIVE_SECRETARY, ADMINISTRATIVE_ASSISTANT, ENGINEERING_MANAGER, ADMINISTRATIVE_MANAGER, NONE};Workerpublic abstract class Worker{public String name;public int socialSecurity;private int yearsExperience;public Jobs et = null;public static int id = 0;public int currentID = 0;public Worker (){    name = \"AnyName\";    socialSecurity = 12345;    yearsExperience = 0;    et = Jobs.NONE;    id++;    currentID = id;}public Worker (String n, int ss, int ye, Jobs j){    id++;    currentID = id;    name = n;    socialSecurity = ss;    yearsExperience = ye;    et = j;}public String getName(){    return name;}public int getSocialSecurity(){    return socialSecurity;}public int getYearsExperience(){    return yearsExperience;}public Jobs getJobs(){    return et;}public void setName(String n1){    name = n1;}public void setSocialSecurity(int ss1){    socialSecurity = ss1;}public void setYearsExperience(int ye1){    yearsExperience = ye1;}public void setJobs(Jobs et1){    et = et1;}public abstract double benefitsCalculation(Jobs et2);public String toString(){    String output = \"The name is: \" + name + \"The Job type is: \" + et + \"The id    is: \" + currentID;    return output;}}Engineerpublic class Engineer extends Worker{private double weeklyBenefits;public Engineer (){    super();    weeklyBenefits = 400.00;}public Engineer (String n, int ss, int ye, Jobs j, double wb){    super(n,ss,ye,j);    weeklyBenefits = wb;    super.setName(n);    super.setSocialSecurity(ss);    super.setYearsExperience(ye);    super.setJobs(j);}public double benefitsCalculation(Jobs et2){    double benefits = 0.0;    if (et2 == Jobs.ELECTRICAL_ENGINEER)    {        benefits = weeklyBenefits+super.getYearsExperience()*120.00;    }    else if (et2 == Jobs.MECHANICAL_ENGINEER)    {        benefits = weeklyBenefits/2+super.getYearsExperience()*120.00;    }    else if (et2 != Jobs.ELECTRICAL_ENGINEER || et2 != Jobs.MECHANICAL_ENGINEER)    {        benefits = 0;    }    return benefits;}public double getWeeklyBenefits(){    return weeklyBenefits;}public void setWeeklyBenefits(double wb){    weeklyBenefits = wb;}public String toString(){    String output = \"The benefit is \" + weeklyBenefits + super.toString();    return output;}}Administrative Personnelpublic class AdministrativePersonnel extends Worker{private double rate;private double hours;    public AdministrativePersonnel()    {        super();        rate = 10.0;        hours = 10.0;    }    public AdministrativePersonnel(String n, int ss, int ye, Jobs j, double r, double h)    {        super(n,ss,ye,j);        rate = r;        hours = h;        super.setName(n);        super.setSocialSecurity(ss);        super.setYearsExperience(ye);        super.setJobs(j);    }    public double benefitsCalculation (Jobs et2)    {        double benefits = 0.0;        if (et2 == Jobs.ADMINISTRATIVE_SECRETARY)        {            benefits = rate*hours+super.getYearsExperience()*15.00;         }        else if(et2 == Jobs.ADMINISTRATIVE_ASSISTANT)        {            benefits = rate*hours+super.getYearsExperience()*25.00;        }        else if (et2 != Jobs.ADMINISTRATIVE_SECRETARY || et2 != Jobs.ADMINISTRATIVE_ASSISTANT)        {            benefits = 0;        }        return benefits;    }    public double getRate()    {        return rate;    }    public double getHours()    {        return hours;    }    public void setRate(double r1)    {        rate = r1;    }    public void setHours(double h1)    {        hours = h1;    }    public String toString()    {        String output = \"The rate is: \" + rate + \"The hours are: \" + hours +  super.toString();        return output;    }}Managementpublic class Management extends Worker{private double weeklyBenefits;private double bonus;public Management(){    super();    weeklyBenefits = 0.0;    bonus = 0.0;}public Management(String n, int ss, int ye, Jobs j, double wb, double b){    super(n,ss,ye,j);    weeklyBenefits = wb;    bonus = b;    super.setName(n);    super.setSocialSecurity(ss);    super.setYearsExperience(ye);    super.setJobs(j);}public double benefitsCalculation (Jobs et2){        double benefits = 0.0;        if (et2 == Jobs.ENGINEERING_MANAGER)        {            benefits = weeklyBenefits+bonus;            }        else if(et2 == Jobs.ADMINISTRATIVE_MANAGER)        {            benefits = weeklyBenefits+0.5*bonus;        }        else if (et2 != Jobs.ENGINEERING_MANAGER || et2 != Jobs.ADMINISTRATIVE_MANAGER)        {            benefits = 0;        }        return benefits;}public double getWeeklyBenefits(){    return weeklyBenefits;}public double getBonus(){    return bonus;}public void setWeeklyBenefits(double wb){    weeklyBenefits = wb;}public void setBonus(double b){    bonus = b;}public String toString(){    String output = \"The weekly benefits are: \" + weeklyBenefits + \"The bonus is: \" + bonus + super.toString();    return output;}}\nPlease using this api: StringTokenizer.nextToken.\nAnswer:"
}