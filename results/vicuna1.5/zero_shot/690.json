{"api": "PrintWriter.write", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions. USER: Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: ObjectOutputStream: appending question marks at the beginning of the String: :Server(Java) sends a Json String to a client(TypeScript). On the client I get the following:  Therefore JSON.parse() fails due to question marks being appended. I tried:Setting content type to - \"text/html\"Setting encode to - \"UTF-8\"And nothing seem to remove these.My code:public class objectOutput {    static int i=0;    ObjectOutputStream objectOutputStream;    public objectOutput(HttpServletResponse response)  throws IOException {        response.setContentType(\"application/octet-stream\");        objectOutputStream = new ObjectOutputStream(response.getOutputStream());      }    // Using this method to write a Json String    public void writeObject(Object object) throws IOException {        objectOutputStream.writeObject(object);        objectOutputStream.close();        objectOutputStream.flush();           }}\nPlease using this api: PrintWriter.write.\nAnswer: ASSISTANT:", "response": "<<<api>>>: PrintWriter.write\n<<<code>>>: public class objectOutput {\nstatic int i=0;\nPrintWriter writer;\npublic objectOutput(HttpServletResponse response) throws IOException {\nresponse.setContentType(\"application/json\");\nwriter = new PrintWriter(response.getOutputStream(), true);\n}\n// Using this method to write a Json String\npublic void writeObject(Object object) throws IOException {\nwriter.write(object.toString());\nwriter.flush();\n}\n}\n\nExplanation: The issue with the previous implementation is that it sets the content type to \"application/octet-stream\", which is not a JSON-aware format. By changing the content type to \"application/json\", the client will be able to parse the JSON string correctly. Additionally, we need to use the `toString()` method of the object to convert it to a JSON string, and then write it to the response using the `PrintWriter.write()` method. The `PrintWriter.flush()` method is used to ensure that the JSON string is written to the response immediately, rather than being buffered."}