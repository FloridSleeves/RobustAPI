{"api": "InputStream.read", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions. USER: Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: How can I calculate the sum of an array in Java?\nPlease using this api: Arrays.stream.\nAnswer:<<<api>>>: Arrays.stream\n<<<code>>>: int[] array = {1, 2, 3, 4, 5};\nint sum = Arrays.stream(array).sum();\n<<<explanation>>>: The sum() method of the IntStream class returns the sum of elements in this stream. This is a special case of a reduction. This is a terminal operation.\nQuestion: Bit-wise efficient uniform random number generation: :I recall reading about a method for efficiently using random bits in an article on a math-oriented website, but I can't seem to get the right keywords in Google to find it anymore, and it's not in my browser history.The gist of the problem that was being asked was to take a sequence of random numbers in the domain [domainStart, domainEnd) and efficiently use the bits of the random number sequence to project uniformly into the range [rangeStart, rangeEnd).  Both the domain and the range are integers (more correctly, longs and not Z). What's an algorithm to do this?Implementation-wise, I have a function with this signature:long doRead(InputStream in, long rangeStart, long rangeEnd);in is based on a CSPRNG (fed by a hardware RNG, conditioned through SecureRandom) that I am required to use; the return value must be between rangeStart and rangeEnd, but the obvious implementation of this is wasteful:long doRead(InputStream in, long rangeStart, long rangeEnd) {    long retVal = 0;    long range = rangeEnd - rangeStart;    // Fill until we get to range    for (int i = 0; (1 << (8 * i)) < range; i++) {        int in = 0;        do {            in = in.read();        // but be sure we don't exceed range        } while(retVal + (in << (8 * i)) >= range);        retVal += in << (8 * i);     }    return retVal + rangeStart;}I believe this is effectively the same idea as (rand() * (max - min)) + min, only we're discarding bits that push us over max. Rather than use a modulo operator which may incorrectly bias the results to the lower values, we discard those bits and try again.  Since hitting the CSPRNG may trigger re-seeding (which can block the InputStream), I'd like to avoid wasting random bits.  Henry points out that this code biases against 0 and 257; Banthar demonstrates it in an example.First edit: Henry reminded me that summation invokes the Central Limit Theorem.  I've fixed the code above to get around that problem.Second edit: Mechanical snail suggested that I look at the source for Random.nextInt().  After reading it for a while, I realized that this problem is similar to the base conversion problem.  See answer below.\nPlease using this api: InputStream.read.\nAnswer: ASSISTANT:", "response": "<<<api>>>: InputStream.read\n<<<code>>>: long doRead(InputStream in, long rangeStart, long rangeEnd) {\nint in = 0;\ndo {\nin = in.read();\n// discard bits that push us over rangeEnd\n} while ((in & 0xFF) < rangeEnd);\nreturn in & 0xFFFFFFFFFFFFFFFFF;\n}\n<<<explanation>>>: The doRead() function reads a single byte from the input stream and discards any bits that would cause the resulting value to exceed the specified range. This is done by reading the byte and then masking off the lower 8 bits to get the desired value. This approach ensures that the random number is uniformly distributed within the range and avoids wasting random bits. The function returns the resulting value as a long, left-aligned with the most significant bit."}