{"api": "DataOutputStream.write", "prompt": "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the user's questions. USER: Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: How can I calculate the sum of an array in Java?\nPlease using this api: Arrays.stream.\nAnswer:<<<api>>>: Arrays.stream\n<<<code>>>: int[] array = {1, 2, 3, 4, 5};\nint sum = Arrays.stream(array).sum();\n<<<explanation>>>: The sum() method of the IntStream class returns the sum of elements in this stream. This is a special case of a reduction. This is a terminal operation.\nQuestion: Send Java BufferedImage to Bitmap Android: :Hi I am trying to send a BufferedImage I have on my Java application through a tcp socket to an Android Device. I currently get the raster in a byte[] from the BufferedImage and then ship this through a plain OutputStream to the device. This works fine and I get the same byte array on the Android side. When I call Bitmap.decodeByteArray() however, I only get null. Here is the code I have to send my picture in Java. The image type of the BufferedImage is TYPE_4BYTE_ABGR byte[] imgBytes =    ((DataBufferByte)msg.getImage().getData().getDataBuffer()).getData();lineBytes = (String.valueOf(imgBytes.length) + '\\n').getBytes();        out.write(lineBytes);out.write(imgBytes);out.write((int)'\\n');out.flush();The first thing I write out is the size of the image so I know how big to make the byte[] on Android.Here's the code I'm trying to use to create the Android Bitmap.currLine = readLine(in);int imgSize = Integer.parseInt(currLine);byte[] imgBytes = new byte[imgSize];in.read(imgBytes);BitmapFactory.Options imgOptions = new BitmapFactory.Options();imgOptions.inPreferredConfig = Bitmap.Config.ARGB_4444;Bitmap img = BitmapFactory.decodeByteArray(imgBytes, 0, imgSize, imgOptions);The bytes arrive fine.. They just don't work for the Bitmap.\nPlease using this api: DataOutputStream.write.\nAnswer: ASSISTANT:", "response": "<<<api>>>: DataOutputStream.write\n<<<code>>>: DataOutputStream out = new DataOutputStream(socket.getOutputStream());\nout.writeInt(imgBytes.length);\nout.write(imgBytes);\nout.write((int)'\\n');\nout.flush();\n\nOn the Android side, you can receive the image bytes and create a Bitmap using the following code:\n\n<<<code>>>: DataInputStream in = new DataInputStream(socket.getInputStream());\nint imgSize = in.readInt();\nbyte[] imgBytes = new byte[imgSize];\nin.read(imgBytes);\nBitmapFactory.Options imgOptions = new BitmapFactory.Options();\nimgOptions.inPreferredConfig = Bitmap.Config.ARGB_4444;\nBitmap img = BitmapFactory.decodeByteArray(imgBytes, 0, imgSize, imgOptions);\n\nExplanation:\nTo send the BufferedImage bytes through a TCP socket, you need to first get the raster of the image as a byte array. Then, you can write the size of the image and the byte array to the output stream using the DataOutputStream.write() method. On the Android side, you need to receive the image bytes and create a Bitmap using the DataInputStream.read() method to read the size of the image, then read the image bytes and create the Bitmap using the BitmapFactory.decodeByteArray() method. The BitmapFactory.Options class is used to specify the configuration of the Bitmap."}