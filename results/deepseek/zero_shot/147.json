{"api": "FileChannel.write", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Parallel Read and write application in java: :I am developing an application in java where i am using a shared LinkedBlocking Queue and i am creating multiple threads for reading and writing it. I have created the code as below but i am unable to get the desired result.For result i am using a shared file which is being written  by both the threads (read and write one).Please tell me whats wrong in my code:Message Reader.javapackage com.aohandling.messagereader;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import com.aohandling.messagequeue.MessageQueue;public class MessageReader implements Runnable{    public static BufferedWriter out;    public static void init()    {    file = new File(\"AOHandle.txt\");    try    {        out = new BufferedWriter(new FileWriter(file, true));        System.out.println(\"Init \");    }    catch (IOException e)    {        e.printStackTrace();    }    }    static File file = null;    public void run()    {    while (true)    {        try        {        SimpleDateFormat ft = new SimpleDateFormat(\"E yyyy.MM.dd 'at' hh:mm:ss a zzz\");        String s = MessageQueue.getMessageQueue().poll();        if (s != null)        {            out.write(\"queue - \" + MessageQueue.getMessageQueue().poll() + \"---\"  + ft.format(new Date()) + \"\\n\");        }        }        catch (IOException e)        {        e.printStackTrace();        }    }    }}MessageWriter.javapackage com.aohandling.writer;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import com.aohandling.messagequeue.MessageQueue;import com.aohandling.messagereader.MessageReader;public class MessageWriter implements Runnable{    int n;    private int messageSequence;    public MessageWriter(int messageSequence)    {    this.messageSequence = messageSequence;    }    public void run()    {    try    {        SimpleDateFormat ft = new SimpleDateFormat(\"E yyyy.MM.dd 'at' hh:mm:ss a zzz\");        MessageReader.out.append(\"Writing----AO - \" + this.messageSequence + \"-----\" + ft.format(new Date()) + \"\\n\");        MessageQueue.getMessageQueue().put(\"AO \" + this.messageSequence);    }    catch (IOException | InterruptedException e)    {        e.printStackTrace();    }    }}MessageQueue.javapackage com.aohandling.messagequeue;import java.util.concurrent.LinkedBlockingQueue;public class MessageQueue {    private static LinkedBlockingQueue<String> messageQueue = new LinkedBlockingQueue<String>();    public static LinkedBlockingQueue<String> getMessageQueue() {        return MessageQueue.messageQueue;    }    public static void setMessageQueue(LinkedBlockingQueue<String> messageQueue) {        MessageQueue.messageQueue = messageQueue;    }}TestAOHandlingRead.javapackage com.aohandling.main;import com.aohandling.messagereader.MessageReader;import com.aohandling.writer.MessageWriter;public class TestAOHandlingRead{    /**     * @param args     */    public static void main(String[] args)    {    MessageReader.init();    for (int i = 0; i <= 200; i++)    {        Thread readThread = new Thread(new MessageReader());        readThread.start();    }    write();    }    public static void write()    {    for (int i = 0; i <= 20; i++)    {        if (i % 2 == 0)        {        try        {            Thread.sleep(500);        }        catch (InterruptedException e)        {            e.printStackTrace();        }        }        Thread writeThread = new Thread(new MessageWriter(i));        writeThread.start();    }    }}TestAOHandlingWrite.javapackage com.aohandling.main;import java.util.concurrent.atomic.AtomicInteger;import com.aohandling.writer.MessageWriter;public class TestAOHandlingWrite {    int count = 0;    public int getCount()    {        return count;    }    /**     * @param args     */    public static void main(String[] args) {//      MessageWriter.init();        for (int i=0; i<= 20; i++) {         if (i%2 ==0) {             try {                Thread.sleep(500);            } catch (InterruptedException e) {                e.printStackTrace();            }         }         Thread writeThread = new Thread(new MessageWriter(i));            writeThread.start();        }    }}\nPlease using this api: FileChannel.write.\nAnswer:", "response": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Parallel Read and write application in java: :I am developing an application in java where i am using a shared LinkedBlocking Queue and i am creating multiple threads for reading and writing it. I have created the code as below but i am unable to get the desired result.For result i am using a shared file which is being written  by both the threads (read and write one).Please tell me whats wrong in my code:Message Reader.javapackage com.aohandling.messagereader;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import com.aohandling.messagequeue.MessageQueue;public class MessageReader implements Runnable{    public static BufferedWriter out;    public static void init()    {    file = new File(\"AOHandle.txt\");    try    {        out = new BufferedWriter(new FileWriter(file, true));        System.out.println(\"Init \");    }    catch (IOException e)    {        e.printStackTrace();    }    }    static File file = null;    public void run()    {    while (true)    {        try        {        SimpleDateFormat ft = new SimpleDateFormat(\"E yyyy.MM.dd 'at' hh:mm:ss a zzz\");        String s = MessageQueue.getMessageQueue().poll();        if (s != null)        {            out.write(\"queue - \" + MessageQueue.getMessageQueue().poll() + \"---\"  + ft.format(new Date()) + \"\\n\");        }        }        catch (IOException e)        {        e.printStackTrace();        }    }    }}MessageWriter.javapackage com.aohandling.writer;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.Date;import com.aohandling.messagequeue.MessageQueue;import com.aohandling.messagereader.MessageReader;public class MessageWriter implements Runnable{    int n;    private int messageSequence;    public MessageWriter(int messageSequence)    {    this.messageSequence = messageSequence;    }    public void run()    {    try    {        SimpleDateFormat ft = new SimpleDateFormat(\"E yyyy.MM.dd 'at' hh:mm:ss a zzz\");        MessageReader.out.append(\"Writing----AO - \" + this.messageSequence + \"-----\" + ft.format(new Date()) + \"\\n\");        MessageQueue.getMessageQueue().put(\"AO \" + this.messageSequence);    }    catch (IOException | InterruptedException e)    {        e.printStackTrace();    }    }}MessageQueue.javapackage com.aohandling.messagequeue;import java.util.concurrent.LinkedBlockingQueue;public class MessageQueue {    private static LinkedBlockingQueue<String> messageQueue = new LinkedBlockingQueue<String>();    public static LinkedBlockingQueue<String> getMessageQueue() {        return MessageQueue.messageQueue;    }    public static void setMessageQueue(LinkedBlockingQueue<String> messageQueue) {        MessageQueue.messageQueue = messageQueue;    }}TestAOHandlingRead.javapackage com.aohandling.main;import com.aohandling.messagereader.MessageReader;import com.aohandling.writer.MessageWriter;public class TestAOHandlingRead{    /**     * @param args     */    public static void main(String[] args)    {    MessageReader.init();    for (int i = 0; i <= 200; i++)    {        Thread readThread = new Thread(new MessageReader());        readThread.start();    }    write();    }    public static void write()    {    for (int i = 0; i <= 20; i++)    {        if (i % 2 == 0)        {        try        {            Thread.sleep(500);        }        catch (InterruptedException e)        {            e.printStackTrace();        }        }        Thread writeThread = new Thread(new MessageWriter(i));        writeThread.start();    }    }}TestAOHandlingWrite.javapackage com.aohandling.main;import java.util.concurrent.atomic.AtomicInteger;import com.aohandling.writer.MessageWriter;public class TestAOHandlingWrite {    int count = 0;    public int getCount()    {        return count;    }    /**     * @param args     */    public static void main(String[] args) {//      MessageWriter.init();        for (int i=0; i<= 20; i++) {         if (i%2 ==0) {             try {                Thread.sleep(500);            } catch (InterruptedException e) {                e.printStackTrace();            }         }         Thread writeThread = new Thread(new MessageWriter(i));            writeThread.start();        }    }}\nPlease using this api: FileChannel.write.\nAnswer:\n\n\n*\n\n*<<<api>>>: FileChannel.write\n\n*<<<code>>>:\n\n\n\n\npublic class TestAOHandlingWrite {\n    int count = 0;\n    public int getCount() {\n        return count;\n    }\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        FileChannel fc = null;\n        try {\n            fc = new FileOutputStream(\"AOHandle.txt\").getChannel();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        for (int i=0; i<= 20; i++) {\n            if (i%2 ==0) {\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            Thread writeThread = new Thread(new MessageWriter(i, fc));\n            writeThread.start();\n        }\n    }\n}\n\n\n\n*\n\n*<<<explanation>>>:\n\n\n\n\npackage com.aohandling.writer;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport com.aohandling.messagequeue.MessageQueue;\npublic class MessageWriter implements Runnable{\n    int n;\n    private int messageSequence;\n    private FileChannel fc;\n    public MessageWriter(int messageSequence, FileChannel fc) {\n        this.messageSequence = messageSequence;\n        this.fc = fc;\n    }\n    public void run() {\n        try {\n            SimpleDateFormat ft = new SimpleDateFormat(\"E yyyy.MM.dd 'at' hh:mm:ss a zzz\");\n            fc.write(ByteBuffer.wrap((\"Writing----AO - \" + this.messageSequence + \"-----\" + ft.format(new Date()) + \"\\n\").getBytes()));\n            MessageQueue.getMessageQueue().put(\"AO \" + this.messageSequence);\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\nA: You are using a shared file, but you are not synchronizing the access to the file.\nYou need to use a lock, such as a ReentrantLock, or a synchronized block.\n"}