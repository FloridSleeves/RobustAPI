{"api": "StringTokenizer.nextToken", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: StringTokenizer issues with if statements: :I have to tokenize a string which looks like this:4830673048;Tony WhiteThere must be two tokens separated by a ;The first token must contain 10 digits, and ONLY digitsThe second token may not contain digits.  private static boolean isValid(String accountLine) throws BankAccountException  {     StringTokenizer strTok = new StringTokenizer(accountLine, \";\");     boolean valid = true;     if(strTok.countTokens() == 2)     {        if(strTok.nextToken().length() == 10 && strTok.nextToken().matches(\".*[0-9].*\"))        {           if(!strTok.nextToken().matches(\".*[0-9].*\"))           {              valid = true;           }        }     }     else     {        System.out.println(\"Invalid Bank Account info. \" + strTok.nextToken());        valid = false;     }     return valid;  }Here is the code I came up with, but it doesn't do what I expected it to do. I know the problem probably lies in my use of .nextToken(). So then my question is, what's the proper StringTokenizer method for ONLY checking the first or the second token?\nPlease using this api: StringTokenizer.nextToken.\nAnswer:", "response": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: StringTokenizer issues with if statements: :I have to tokenize a string which looks like this:4830673048;Tony WhiteThere must be two tokens separated by a ;The first token must contain 10 digits, and ONLY digitsThe second token may not contain digits.  private static boolean isValid(String accountLine) throws BankAccountException  {     StringTokenizer strTok = new StringTokenizer(accountLine, \";\");     boolean valid = true;     if(strTok.countTokens() == 2)     {        if(strTok.nextToken().length() == 10 && strTok.nextToken().matches(\".*[0-9].*\"))        {           if(!strTok.nextToken().matches(\".*[0-9].*\"))           {              valid = true;           }        }     }     else     {        System.out.println(\"Invalid Bank Account info. \" + strTok.nextToken());        valid = false;     }     return valid;  }Here is the code I came up with, but it doesn't do what I expected it to do. I know the problem probably lies in my use of .nextToken(). So then my question is, what's the proper StringTokenizer method for ONLY checking the first or the second token?\nPlease using this api: StringTokenizer.nextToken.\nAnswer: <<<api>>>: StringTokenizer.nextToken\n<<<code>>>: StringTokenizer strTok = new StringTokenizer(accountLine, \";\");\nboolean valid = true;\nif(strTok.countTokens() == 2)\n{\n    if(strTok.nextToken().length() == 10 && strTok.nextToken().matches(\".*[0-9].*\"))\n    {\n        if(!strTok.nextToken().matches(\".*[0-9].*\"))\n        {\n            valid = true;\n        }\n    }\n}\nelse\n{\n    System.out.println(\"Invalid Bank Account info. \" + strTok.nextToken());\n    valid = false;\n}\nreturn valid;\n<<<explanation>>>: The problem is that the StringTokenizer is going to return the first token, which is 4830673048. So the if statement is checking if the first token is 10 digits long, and if it is, it checks if the second token contains digits. But the second token is actually the first token, so it's checking if the first token contains digits. So the if statement is always going to return true.\n\nA: The problem is that you're calling nextToken() twice.  You should only call it once, and then check the result.\nStringTokenizer strTok = new StringTokenizer(accountLine, \";\");\nboolean valid = true;\nif(strTok.countTokens() == 2)\n{\n    String firstToken = strTok.nextToken();\n    if(firstToken.length() == 10 && firstToken.matches(\".*[0-9].*\"))\n    {\n        String secondToken = strTok.nextToken();\n        if(!secondToken.matches(\".*[0-9].*\"))\n        {\n            valid = true;\n        }\n    }\n}\nelse\n{\n    System.out.println(\"Invalid Bank Account info. \" + strTok.nextToken());\n    valid = false;\n}\nreturn valid;\n\n\nA: You are calling nextToken() twice.\nYou should call it once and then check the result.\n"}