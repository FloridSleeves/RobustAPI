{"api": "StringTokenizer.nextToken", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: A Program With StringTokenizer in Java: :Closed. This question needs debugging details. It is not currently accepting answers.                                                             Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.Closed 6 years ago.                        Improve this question                    I wrote a simple calculation program. I want users to enter their request as 12+12 and return the answer. I used StringTokenizer, but I got an error and it doesn't show me any result. There was a mention that Calc is a superclass and MinusCalc and PlusCalc are subclasses. Does anyone have any idea?    void inputLineData() { // This is just the function that use for this case                                    System.out.println(\" Plz enter your all numbers\");    String strAll = key.next();    StringTokenizer st = new StringTokenizer(strAll);    int n1 = Integer.parseInt(st.nextToken());    String str = st.nextToken();    int n2 =  Integer.parseInt(st.nextToken());    switch (str.charAt(0)) {        case '+':            PlusCalc P = new PlusCalc(n1, n2);            listCalc[indexCalc] = P;            indexCalc++;            break;        case '-':            MinusCalc M = new MinusCalc(n1, n2);            listCalc[indexCalc] = M;            indexCalc++;            break;        default:            System.out.println(\"Error!\");      }  }And this is  MinusCalc class:   public class MinusCalc extends Calc {@Overridepublic int func(){    return n1 - n2 ; }public MinusCalc(int n1, int n2) {    super(n1, n2);   } }And this is  PlusCalc class:   public class PlusCalc extends Calc { @Overridepublic int func(){    return n1 + n2;}public PlusCalc(int n1, int n2) {    super(n1, n2);  }}And this is Calc class:    public abstract class Calc {   public Calc(int n1, int n2) { // constructor with parameters!!    this.n1 = n1;    this.n2 = n2;}int n1,n2;public abstract int func();}\nPlease using this api: StringTokenizer.nextToken.\nAnswer:", "response": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: A Program With StringTokenizer in Java: :Closed. This question needs debugging details. It is not currently accepting answers.                                                             Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.Closed 6 years ago.                        Improve this question                    I wrote a simple calculation program. I want users to enter their request as 12+12 and return the answer. I used StringTokenizer, but I got an error and it doesn't show me any result. There was a mention that Calc is a superclass and MinusCalc and PlusCalc are subclasses. Does anyone have any idea?    void inputLineData() { // This is just the function that use for this case                                    System.out.println(\" Plz enter your all numbers\");    String strAll = key.next();    StringTokenizer st = new StringTokenizer(strAll);    int n1 = Integer.parseInt(st.nextToken());    String str = st.nextToken();    int n2 =  Integer.parseInt(st.nextToken());    switch (str.charAt(0)) {        case '+':            PlusCalc P = new PlusCalc(n1, n2);            listCalc[indexCalc] = P;            indexCalc++;            break;        case '-':            MinusCalc M = new MinusCalc(n1, n2);            listCalc[indexCalc] = M;            indexCalc++;            break;        default:            System.out.println(\"Error!\");      }  }And this is  MinusCalc class:   public class MinusCalc extends Calc {@Overridepublic int func(){    return n1 - n2 ; }public MinusCalc(int n1, int n2) {    super(n1, n2);   } }And this is  PlusCalc class:   public class PlusCalc extends Calc { @Overridepublic int func(){    return n1 + n2;}public PlusCalc(int n1, int n2) {    super(n1, n2);  }}And this is Calc class:    public abstract class Calc {   public Calc(int n1, int n2) { // constructor with parameters!!    this.n1 = n1;    this.n2 = n2;}int n1,n2;public abstract int func();}\nPlease using this api: StringTokenizer.nextToken.\nAnswer:\n\n\n*\n\n*<<<api>>>: StringTokenizer.nextToken\n\n*<<<code>>>:\n\n\n\nStringTokenizer st = new StringTokenizer(strAll);\nint n1 = Integer.parseInt(st.nextToken());\nString str = st.nextToken();\nint n2 =  Integer.parseInt(st.nextToken());\n\n\n\n*\n\n*<<<explanation>>>:\n\n\n\nStringTokenizer st = new StringTokenizer(strAll);\n\n\n\n*\n\n*This line creates a new StringTokenizer object with the given string strAll as the input.\n\n\n\nint n1 = Integer.parseInt(st.nextToken());\n\n\n\n*\n\n*This line uses the nextToken() method of the StringTokenizer object to get the next token from the input string. It then parses the token as an integer using the parseInt() method of the Integer class. The result is stored in the variable n1.\n\n\n\nString str = st.nextToken();\n\n\n\n*\n\n*This line uses the nextToken() method again to get the next token from the input string. It then stores the token in the variable str.\n\n\n\nint n2 =  Integer.parseInt(st.nextToken());\n\n\n\n*\n\n*This line uses the nextToken() method again to get the next token from the input string. It then parses the token as an integer using the parseInt() method of the Integer class. The result is stored in the variable n2.\n\n\n\nswitch (str.charAt(0)) {\n\n\n\n*\n\n*This line creates a switch statement that checks the first character of the string str.\n\n\n\ncase '+':\n\n\n\n*\n\n*This line is a case label for the switch statement. If the first character of str is '+', the code inside the case block will be executed.\n\n\n\nPlusCalc P = new PlusCalc(n1, n2);\n\n\n\n*\n\n*This line creates a new PlusCalc object with the values of n1 and n2 as arguments.\n\n\n\nlistCalc[indexCalc] = P;\n\n\n\n*\n\n*This line adds the PlusCalc object to the listCalc array at the index specified by indexCalc.\n\n\n\nindexCalc++;\n\n\n\n*\n\n*This line increments the value of indexCalc by 1.\n\n\n\nbreak;\n\n\n\n*\n\n*This line ends the case block and exits the switch statement.\n\n\n\ncase '-':\n\n\n\n*\n\n*This line is a case label for the switch statement. If the first character of str is '-', the code inside the case block will be executed.\n\n\n\nMinusCalc M = new MinusCalc(n1, n2);\n\n\n\n*\n\n*This line creates a new MinusCalc object with the values of n1 and n2 as arguments.\n\n\n\nlistCalc[indexCalc] = M;\n\n\n\n*\n\n*This line adds the MinusCalc object to the listCalc array at the index specified by indexCalc.\n\n\n\nindexCalc++;\n\n\n\n*\n\n*This line increments the value of indexCalc by 1.\n\n\n\nbreak;\n\n\n\n*\n\n*This line ends the case block and exits the switch statement.\n\n\n\ndefault:\n\n\n\n*\n\n*This line is a default case label for the switch statement. If none of the other case labels match the value of str.charAt(0), the code inside the default block will be executed.\n\n\n\nSystem.out.println(\"Error!\");\n\n\n\n*\n\n*This line prints an error message to the console.\n\n\n\n}\n\n\n\n*\n\n*This line ends the switch statement.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}