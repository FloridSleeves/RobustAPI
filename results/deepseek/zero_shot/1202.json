{"api": "TypedArray.getString", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Mapping XML attributes and code methods in Android: :I'm trying to create a custom Android compound view, here is the code:<?xml version=\"1.0\" encoding=\"utf-8\"?><merge xmlns:android=\"http://schemas.android.com/apk/res/android\">    <LinearLayout android:layout_width=\"fill_parent\"        android:layout_height=\"fill_parent\" android:id=\"@+id/linearLayout1\">        <ImageView android:src=\"@drawable/icon\"             android:id=\"@+id/action_imageView\"            android:layout_height=\"wrap_content\"            android:layout_width=\"wrap_content\">        </ImageView>        <TextView android:textAppearance=\"?android:attr/textAppearanceLarge\"            android:id=\"@+id/action_text\" android:layout_height=\"fill_parent\"            android:layout_width=\"fill_parent\" android:text=\"TextView\">        </TextView>    </LinearLayout></merge>ActionWidget.java (the component I'm working on):public class ActionWidget extends LinearLayout {...    public ActionWidget(Context context, AttributeSet attributeSet,         int defStyle)    {        super(context, attributeSet);        LayoutInflater inflater = (LayoutInflater)context.            getSystemService(Context.LAYOUT_INFLATER_SERVICE);        inflater.inflate(R.layout.action, this);        setClickable(true);    }    public void setLabel(String label)    {        TextView text = (TextView)findViewById(R.id.action_text);        text.setText(label);    }    public String getLabel()    {        return this.label;    }...}attrs.xml:<?xml version=\"1.0\" encoding=\"utf-8\"?><resources>    <declare-styleable name=\"ActionWidget\">        <attr name=\"label\" format=\"string\" />        <attr name=\"image\" format=\"integer\" />    </declare-styleable></resources>Usage:<com.someapp.form.ActionWidget    android:id=\"@+id/actionWidget1\" android:layout_width=\"wrap_content\"    android:layout_height=\"wrap_content\"     app:label=\"Text changed\"></com.someapp.form.ActionWidget>When I launch the application, the text is still \"TextView\".What should I do to make it load from the xml?\nPlease using this api: TypedArray.getString.\nAnswer:", "response": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Mapping XML attributes and code methods in Android: :I'm trying to create a custom Android compound view, here is the code:<?xml version=\"1.0\" encoding=\"utf-8\"?><merge xmlns:android=\"http://schemas.android.com/apk/res/android\">    <LinearLayout android:layout_width=\"fill_parent\"        android:layout_height=\"fill_parent\" android:id=\"@+id/linearLayout1\">        <ImageView android:src=\"@drawable/icon\"             android:id=\"@+id/action_imageView\"            android:layout_height=\"wrap_content\"            android:layout_width=\"wrap_content\">        </ImageView>        <TextView android:textAppearance=\"?android:attr/textAppearanceLarge\"            android:id=\"@+id/action_text\" android:layout_height=\"fill_parent\"            android:layout_width=\"fill_parent\" android:text=\"TextView\">        </TextView>    </LinearLayout></merge>ActionWidget.java (the component I'm working on):public class ActionWidget extends LinearLayout {...    public ActionWidget(Context context, AttributeSet attributeSet,         int defStyle)    {        super(context, attributeSet);        LayoutInflater inflater = (LayoutInflater)context.            getSystemService(Context.LAYOUT_INFLATER_SERVICE);        inflater.inflate(R.layout.action, this);        setClickable(true);    }    public void setLabel(String label)    {        TextView text = (TextView)findViewById(R.id.action_text);        text.setText(label);    }    public String getLabel()    {        return this.label;    }...}attrs.xml:<?xml version=\"1.0\" encoding=\"utf-8\"?><resources>    <declare-styleable name=\"ActionWidget\">        <attr name=\"label\" format=\"string\" />        <attr name=\"image\" format=\"integer\" />    </declare-styleable></resources>Usage:<com.someapp.form.ActionWidget    android:id=\"@+id/actionWidget1\" android:layout_width=\"wrap_content\"    android:layout_height=\"wrap_content\"     app:label=\"Text changed\"></com.someapp.form.ActionWidget>When I launch the application, the text is still \"TextView\".What should I do to make it load from the xml?\nPlease using this api: TypedArray.getString.\nAnswer:\n\n\n*\n\n*API: TypedArray.getString\n\n*Code:\n\n\n\n\npublic class ActionWidget extends LinearLayout {\n    private String label;\n    private int image;\n\n    public ActionWidget(Context context, AttributeSet attributeSet, int defStyle) {\n        super(context, attributeSet);\n        LayoutInflater inflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        inflater.inflate(R.layout.action, this);\n        setClickable(true);\n\n        TypedArray a = context.obtainStyledAttributes(attributeSet, R.styleable.ActionWidget, defStyle, 0);\n        label = a.getString(R.styleable.ActionWidget_label);\n        image = a.getResourceId(R.styleable.ActionWidget_image, 0);\n        a.recycle();\n\n        setLabel(label);\n        setImage(image);\n    }\n\n    public void setLabel(String label) {\n        TextView text = (TextView)findViewById(R.id.action_text);\n        text.setText(label);\n    }\n\n    public String getLabel() {\n        return this.label;\n    }\n\n    public void setImage(int image) {\n        ImageView imageView = (ImageView)findViewById(R.id.action_imageView);\n        imageView.setImageResource(image);\n    }\n\n    public int getImage() {\n        return this.image;\n    }\n}\n\n\n\n*\n\n*Explanation:\n\n\n\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<merge xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <LinearLayout android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\" android:id=\"@+id/linearLayout1\">\n        <ImageView android:src=\"@drawable/icon\"\n            android:id=\"@+id/action_imageView\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\">\n        </ImageView>\n        <TextView android:textAppearance=\"?android:attr/textAppearanceLarge\"\n            android:id=\"@+id/action_text\" android:layout_height=\"fill_parent\"\n            android:layout_width=\"fill_parent\" android:text=\"TextView\">\n        </TextView>\n    </LinearLayout>\n</merge>\n\n\n\n\n*\n\n*ActionWidget.java (the component I'm working on):\n\n\n\n\npublic class ActionWidget extends LinearLayout {\n    private String label;\n    private int image;\n\n    public ActionWidget(Context context, AttributeSet attributeSet, int defStyle) {\n        super(context, attributeSet);\n        LayoutInflater inflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        inflater.inflate(R.layout.action, this);\n        setClickable(true);\n\n        TypedArray a = context.obtainStyledAttributes(attributeSet, R.styleable.ActionWidget, defStyle, 0);\n        label = a.getString(R.styleable.ActionWidget_label);\n        image = a.getResourceId(R.styleable.ActionWidget_image, 0);\n        a.recycle();\n\n        setLabel(label);\n        setImage(image);\n    }\n\n    public void setLabel(String label) {\n        TextView text = (TextView)findViewById(R.id.action_text);\n        text.setText(label);\n    }\n\n    public String getLabel() {\n        return this.label;\n    }\n\n    public void setImage(int image) {\n        ImageView imageView = (ImageView)findViewById(R.id.action_imageView);\n        imageView.setImageResource(image);\n    }\n\n    public int getImage() {\n        return this.image;\n    }\n}\n\n\n\n\n*\n\n*attrs.xml:\n\n\n\n\n<"}