{"api": "StringTokenizer.nextToken", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: How can I calculate the sum of an array in Java?\nPlease using this api: Arrays.stream.\nAnswer:<<<api>>>: Arrays.stream\n<<<code>>>: int[] array = {1, 2, 3, 4, 5};\nint sum = Arrays.stream(array).sum();\n<<<explanation>>>: The sum() method of the IntStream class returns the sum of elements in this stream. This is a special case of a reduction. This is a terminal operation.\nQuestion: A Program With StringTokenizer in Java: :Closed. This question needs debugging details. It is not currently accepting answers.                                                             Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.Closed 6 years ago.                        Improve this question                    I wrote a simple calculation program. I want users to enter their request as 12+12 and return the answer. I used StringTokenizer, but I got an error and it doesn't show me any result. There was a mention that Calc is a superclass and MinusCalc and PlusCalc are subclasses. Does anyone have any idea?    void inputLineData() { // This is just the function that use for this case                                    System.out.println(\" Plz enter your all numbers\");    String strAll = key.next();    StringTokenizer st = new StringTokenizer(strAll);    int n1 = Integer.parseInt(st.nextToken());    String str = st.nextToken();    int n2 =  Integer.parseInt(st.nextToken());    switch (str.charAt(0)) {        case '+':            PlusCalc P = new PlusCalc(n1, n2);            listCalc[indexCalc] = P;            indexCalc++;            break;        case '-':            MinusCalc M = new MinusCalc(n1, n2);            listCalc[indexCalc] = M;            indexCalc++;            break;        default:            System.out.println(\"Error!\");      }  }And this is  MinusCalc class:   public class MinusCalc extends Calc {@Overridepublic int func(){    return n1 - n2 ; }public MinusCalc(int n1, int n2) {    super(n1, n2);   } }And this is  PlusCalc class:   public class PlusCalc extends Calc { @Overridepublic int func(){    return n1 + n2;}public PlusCalc(int n1, int n2) {    super(n1, n2);  }}And this is Calc class:    public abstract class Calc {   public Calc(int n1, int n2) { // constructor with parameters!!    this.n1 = n1;    this.n2 = n2;}int n1,n2;public abstract int func();}\nPlease using this api: StringTokenizer.nextToken.\nAnswer:", "response": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: String strAll = key.next();\nStringTokenizer st = new StringTokenizer(strAll);\nint n1 = Integer.parseInt(st.nextToken());\nString str = st.nextToken();\nint n2 =  Integer.parseInt(st.nextToken());\nswitch (str.charAt(0)) {\ncase '+':\nPlusCalc P = new PlusCalc(n1, n2);\nlistCalc[indexCalc] = P;\nindexCalc++;\nMinusCalc M = new MinusCalc(n1, n2);\nlistCalc[indexCalc] = M;\nindexCalc++;\ndefault: System.out.println(\"Error!\");\nAnd this is  MinusCalc class:\npublic class MinusCalc extends Calc\n@Overridepublic int func(){\nreturn n1 - n2 ;\npublic MinusCalc(int n1, int n2) {\nsuper(n1, n2);\nAnd this is  PlusCalc class:\npublic class PlusCalc extends Calc\n@Overridepublic int func(){\nreturn n1 + n2;\npublic PlusCalc(int n1, int n2) {\nsuper(n1, n2);\nAnd this is Calc class:\npublic abstract class Calc\nint n1,n2;\npublic abstract int func();\nQuestion: How can I calculate the sum of an array in Java? Please using this api: Arrays.stream. Answer:<<<api>>>: Arrays.stream <<<code>>>: int[] array = {1, 2, 3, 4, 5}; int sum = Arrays.stream(array).sum(); <<<explanation>>>: The sum() method of the IntStream class returns the sum of elements in this stream. This is a special case of a reduction. This is a terminal operation. Question: A Program With StringTokenizer in Java: :Closed. This question needs debugging details. It is not currently accepting answers.                                                             Edit the question to include desired behavior, a specific problem or error, and the shortest code necessary to reproduce the problem. This will help others answer the question.Closed 6 years ago.                        Improve this question                    I wrote a simple calculation program. I want users to enter their request as 12+12 and return the answer. I used StringTokenizer, but I got an error and it doesn't show me any result. There was a mention that Calc is a superclass and MinusCalc and PlusCalc are subclasses. Does anyone have any idea?    void inputLineData() { // This is just the function that use for this case                                    System.out.println(\" Plz enter your all numbers\");    String strAll = key.next();    StringTokenizer st = new StringTokenizer(strAll);    int n1 = Integer.parseInt(st.nextToken());    String str = st.nextToken();    int n2 =  Integer.parseInt(st.nextToken());    switch (str.charAt(0)) {        case '+':            PlusCalc P = new PlusCalc(n1, n2);            listCalc[indexCalc] = P;            indexCalc++;            break;        case '-':            MinusCalc M = new MinusCalc(n1, n2);            listCalc[indexCalc] = M;            indexCalc++;            break;        default:            System.out.println(\"Error!\");      }  }And this is  MinusCalc class:   public class MinusCalc extends Calc {@Overridepublic int func(){    return n1 - n2 ; }public MinusCalc(int n1, int n2) {    super(n1, n2);   } }And this is  PlusCalc class:   public class PlusCalc extends Calc { @Overridepublic int func(){    return n1 + n2;}public PlusCalc(int n1, int n2) {    super(n1, n2);  }}And this is Calc class:    public abstract class Calc {   public Calc(int n1, int n2) { // constructor with parameters!!    this.n1 = n1;    this.n2= n2;}int n1,n2;public abstract int func();}\nPlease using this api: StringTokenizer.nextToken. Answer:<<<api>>>: StringTokenizer.nextToken <<<code>>>: String strAll = key.next(); StringTokenizer st = new StringTokenizer(strAll); int n1 = Integer.parseInt(st.nextToken()); String str = st.nextToken(); int n2 =  Integer.parseInt(st.nextToken()); switch (str.charAt(0)) { case '+': PlusCalc P = new PlusCalc(n1, n2); listCalc[indexCalc] = P; indexCalc++; break; case '-': MinusCalc M = new MinusCalc(n1, n2); listCalc[indexCalc] = M; indexCalc++; break; default: System.out.println(\"Error!\"); }And this is  MinusCalc class: public class MinusCalc extends Calc {@Overridepublic int func(){    return n1 - n2 ; }public MinusCalc(int n1, int n2) {    super(n1, n2);   } }And this is  PlusCalc class: public class PlusCalc extends Calc { @Overridepublic int func(){    return n1 + n2;}public PlusCalc(int n1, int n2) {    super"}