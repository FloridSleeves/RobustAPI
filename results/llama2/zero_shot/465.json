{"api": "Iterator.next", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Slow string concatenation over large input: :I've written an n-ary tree ADT which works fine.  However, I need to store its serialization in a variable a calling class. eg.     DomTree<String> a = Data.createTreeInstance(\"very_large_file.xml\");    String x = a.toString();I've written method which serves the purpose exactly how I need it, but on very large inputs it takes forever (20mins on a 100MB xml file) - I have timed the methods and building the tree from the xml file is quick, but calling toString() as shown above is very slow.@Overridepublic String toString(){    return printTree(this);}public String printTree(AbstractTree<E> tree){    if (tree.isLeaf()){        return tree.getNodeName();    }else{        String tStr = tree.getNodeName() + \"(\";        int i = 0;        Iterator<AbstractTree<E>> child = tree.getChildren().iterator();        while (i < tree.getChildren().size() - 1){            tStr += printTree(child.next()) + \", \";            i++;        }        tStr += printTree(child.next()) + \")\";        return tStr;        }}I'm guessing it is to do with the way the string is built up rather than how the tree is traversed?  Is there a better way to do this?UPDATE:  Following the example of Skaffman, the following code give outOfMemoryError for very large input.@Overridepublic String toString(){    StringBuilder buffer = new StringBuilder();    printTree(this, buffer);    return buffer.toString();}public String printTree(AbstractTree<E> tree, StringBuilder buffer){    if (tree.isLeaf()){        return tree.getNodeName();    }else{        buffer.append(tree.getNodeName());        buffer.append(\"(\");        int i = 0;        Iterator<AbstractTree<E>> child = tree.getChildren().iterator();        while (i < tree.getChildren().size() - 1){            buffer.append(printTree(child.next(), buffer));            buffer.append(\", \");            i++;        }        buffer.append(printTree(child.next(), buffer));         buffer.append(\")\");        return buffer.toString();       }}UPDATE: Works perfectly now, using Skaffmans example\nPlease using this api: Iterator.next.\nAnswer:", "response": "I'm guessing it is to do with the way the string is built up rather than how the tree is traversed? Is there a better way to do this?\nYes, there is a better way to do this.\nYou can use StringBuilder to build the string.\npublic String toString(){\nreturn new StringBuilder(this).append(printTree(this)).toString();\npublic String printTree(AbstractTree<E> tree){\nif (tree.isLeaf()){\nreturn tree.getNodeName();\nString tStr = tree.getNodeName() + \"(\";\nint i = 0;\nIterator<AbstractTree<E>> child = tree.getChildren().iterator();\nwhile (i < tree.getChildren().size() - 1){\ntStr += printTree(child.next()) + \", \";\ntStr += printTree(child.next()) + \")\";\nreturn tStr;\nUPDATE: Following the example of Skaffman, the following code give outOfMemoryError for very large input.\npublic String printTree(AbstractTree<E> tree, StringBuilder buffer){\nbuffer.append(tree.getNodeName());\nbuffer.append(\"(\");\nint i = 0;\nIterator<AbstractTree<E>> child = tree.getChildren().iterator();\nwhile (i < tree.getChildren().size() - 1){\nbuffer.append(printTree(child.next(), buffer));\nbuffer.append(\", \");\nbuffer.append(printTree(child.next(), buffer));\nbuffer.append(\")\");\nreturn buffer.toString();\nUPDATE: Works perfectly now, using Skaffmans example\nI'm guessing it is to do with the way the string is built up rather than how the tree is traversed? Is there a better way to do this?\nYes, there is a better way to do this. You can use StringBuilder to build the string. public String toString(){ return new StringBuilder(this).append(printTree(this)).toString(); } public String printTree(AbstractTree<E> tree){ if (tree.isLeaf()){ return tree.getNodeName(); } else { String tStr = tree.getNodeName() + \"(\"; int i = 0; Iterator<AbstractTree<E>> child = tree.getChildren().iterator(); while (i < tree.getChildren().size() - 1){ tStr += printTree(child.next()) + \", \"; i++; } tStr += printTree(child.next()) + \")\"; return tStr; } } UPDATE: Following the example of Skaffman, the following code give outOfMemoryError for very large input. public String printTree(AbstractTree<E> tree, StringBuilder buffer){ buffer.append(tree.getNodeName()); buffer.append(\"(\"); int i = 0; Iterator<AbstractTree<E>> child = tree.getChildren().iterator(); while (i < tree.getChildren().size() - 1){ buffer.append(printTree(child.next(), buffer)); buffer.append(\", \"); i++; } buffer.append(printTree(child.next(), buffer)); buffer.append(\")\"); return buffer.toString(); } UPDATE: Works perfectly now, using Skaffmans example\nI'm guessing it is to do with the way the string is built up rather than how the tree is traversed? Is there a better way to do this? Yes, there is a better way to do this. You can use StringBuilder to build the string. public String toString(){ return new StringBuilder(this).append(printTree(this)).toString(); } public String printTree(AbstractTree<E> tree){ if (tree.isLeaf()){ return tree.getNodeName(); } else { String tStr = tree.getNodeName() + \"(\"; int i = 0; Iterator<AbstractTree<E>> child = tree.getChildren().iterator(); while (i < tree.getChildren().size() - 1){ tStr += printTree(child.next()) + \", \"; i++; } tStr += printTree(child.next()) + \")\"; return tStr; } } UPDATE: Following the example of Skaffman, the following code give outOfMemoryError for very large input. public String printTree(AbstractTree<E> tree, StringBuilder buffer){ buffer.append(tree.getNodeName()); buffer.append(\"(\"); int i = 0; Iterator<AbstractTree<E>> child = tree.getChildren().iterator(); while (i < tree.getChildren().size() - 1){ buffer.append(printTree(child.next(),"}