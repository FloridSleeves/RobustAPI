{"api": "StringTokenizer.nextToken", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Parsing \"stop words\" using an array list: :I am using a simple code with three for loops to get sentences from Array List, tokenize them, remove stopwords and store the rest in a 2-D array.SentenceList is the ArrayList. Stopwords is the array containing the list of stopwords. The program aims to take each sentence remove the stopwords and save the rest in an array. Here's the code:String[][] trim=new String[sentenceList.size()][largest];    StringTokenizer st1;    for(int i=0;i<sentenceList.size();i++)    {        st1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");        int count=st1.countTokens();        for(int j=0;j<count;j++)        {            String token=st1.nextToken();            for(int k=0;k<stopwords.length;k++)            {            if(token.equals(stopwords[k]))                continue;            else                trim[i][j]=token;            }                           }     }    //PRINT CHECK    for(int i=0;i<sentenceList.size();i++)    {        for(int j=0;j<largest;j++)        {            if(trim[i][j]!=null)            System.out.print(trim[i][j]+\" \");        }    System.out.println();The confusing element is that the above doesn't work but if I exchange the if and the else part it works and I get only the stopwords.\nPlease using this api: StringTokenizer.nextToken.\nAnswer:", "response": "<<<api>>>: StringTokenizer.nextToken\n<<<code>>>: StringTokenizer st1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");\n<<<explanation>>>: StringTokenizer st1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");\nString[][] trim=new String[sentenceList.size()][largest];\nStringTokenizer st1;\nfor(int i=0;i<sentenceList.size();i++)\n{\nst1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");\nint count=st1.countTokens();\nfor(int j=0;j<count;j++)\n{\nString token=st1.nextToken();\nfor(int k=0;k<stopwords.length;k++)\n{\nif(token.equals(stopwords[k]))\ncontinue;\nelse\ntrim[i][j]=token;\n}\n}\n//PRINT CHECK\nfor(int i=0;i<sentenceList.size();i++)\n{\nfor(int j=0;j<largest;j++)\n{\nif(trim[i][j]!=null)\nSystem.out.print(trim[i][j]+\" \");\n}\nSystem.out.println();\n}\n\nAnswer: <<<api>>>: StringTokenizer.nextToken\n<<<code>>>: StringTokenizer st1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");\n<<<explanation>>>: StringTokenizer st1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");\nString[][] trim=new String[sentenceList.size()][largest];\nStringTokenizer st1;\nfor(int i=0;i<sentenceList.size();i++)\n{\nst1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");\nint count=st1.countTokens();\nfor(int j=0;j<count;j++)\n{\nString token=st1.nextToken();\nfor(int k=0;k<stopwords.length;k++)\n{\nif(token.equals(stopwords[k]))\ncontinue;\nelse\ntrim[i][j]=token;\n}\n}\n//PRINT CHECK\nfor(int i=0;i<sentenceList.size();i++)\n{\nfor(int j=0;j<largest;j++)\n{\nif(trim[i][j]!=null)\nSystem.out.print(trim[i][j]+\" \");\n}\nSystem.out.println();\n}\n\nAnswer: <<<api>>>: StringTokenizer.nextToken\n<<<code>>>: StringTokenizer st1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");\n<<<explanation>>>: StringTokenizer st1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");\nString[][] trim=new String[sentenceList.size()][largest];\nStringTokenizer st1;\nfor(int i=0;i<sentenceList.size();i++)\n{\nst1= new StringTokenizer(sentenceList.get(i),\" ,(){}[]/.;:'&?!\");\nint count=st1.countTokens();\nfor(int j=0;j<count;j++)\n{\nString token=st1.nextToken();\nfor(int k=0;k<stopwords.length;k++)\n{\nif(token.equals(stopwords[k]))\ncontinue;\nelse\ntrim[i][j]=token;\n}\n}\n//PRINT CHECK\nfor(int i=0;i<sentenceList.size();i++)\n{\nfor(int j=0;j<largest;j++)\n{\nif(trim[i][j]!=null)\nSystem.out.print(trim[i][j]+\" \");\n}\nSystem.out.println();\n}\n\nAnswer: <<<api>>>: StringTokenizer.next"}