{
    "id": "chatcmpl-7m6zIY7iQhBJx9IWsHv8OMEP94cxO",
    "object": "chat.completion",
    "created": 1691700960,
    "model": "gpt-4-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: PrintWriter.write\n<<<code>>>: \n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    private static ArrayList<String> dictionary;\n    private static ArrayList<String> tempdictionary;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        readFile();\n        removeDuplicates();\n        sortAndWrite();\n    }\n\n    public static void readFile() throws FileNotFoundException {\n        Scanner inFile = new Scanner(new FileReader(\"H:\\\\csc8001\\\\results.txt\"));\n        dictionary = new ArrayList<>();\n        tempdictionary = new ArrayList<>();\n        while (inFile.hasNext()) {\n            dictionary.add(inFile.next().toLowerCase().replaceAll(\"[^a-zA-Z ]\", \"\"));\n        }\n        inFile.close();\n    }\n\n    public static void removeDuplicates() {\n        for (String a : dictionary) {\n            if (!tempdictionary.contains(a)) {\n                tempdictionary.add(a);\n            }\n        }\n    }\n\n    public static void sortAndWrite() throws FileNotFoundException {\n        Collections.sort(tempdictionary);\n        PrintWriter outFile = new PrintWriter(\"H:\\\\csc8001\\\\results1.txt\");\n        for (String word : tempdictionary) {\n            outFile.write(word + \"\\n\");\n        }\n        outFile.flush();\n        outFile.close();\n    }\n}\n```\n<<<explanation>>>: The code has been refactored into three methods each with a single responsibility. The `readFile` method reads the file and stores the words in the `dictionary` ArrayList. The `removeDuplicates` method removes duplicate words from the `dictionary` ArrayList and stores the unique words in the `tempdictionary` ArrayList. The `sortAndWrite` method sorts the `tempdictionary` ArrayList and writes the sorted words to a new file. The `PrintWriter.write` method is used to write each word to the file."
            },
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 488,
        "completion_tokens": 361,
        "total_tokens": 849
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Q re Java Programme to read from a text file, create an arraylist, reformat, and output to another file: :As a java student (beginner) I've just completed a task to write a program to perform the following tasks:Read the content of a text file;Pick out all words within the text, replacing all upper case letters with lower case ones;Produce a dictionary of the words appearing in the text (i.e., a list of the words in alphabetical order, one word per line, without duplication);Output the dictionary to another file.We were advised to have a single class containing our main method, and use the ArrayList, Scanner, PrintWriter and FileReader classes. I managed to do the below, which works, but it has raised some questions/fundamental gaps in my knowledge. I  believe that based on the principles of good O.O. programming practice, I should break the below down into a series of methods that have a single purpose, and then call those methods. However, I really struggle doing this. Can anyone please elaborate/advise a way to improve on that specific point? Or correct me if I'm wrong? public class Main{    private static ArrayList<String> dictionary;     private static ArrayList<String> tempdictionary;    public static void main() throws FileNotFoundException    {        Scanner inFile = new Scanner(new FileReader(\"H:\\\\csc8001\\\\results.txt\"));        dictionary = new ArrayList <>();        tempdictionary = new ArrayList <>();        while (inFile.hasNext()) {             dictionary.add(inFile.next().toLowerCase().replaceAll(\"[^a-zA-Z ]\", \"\"));        }        inFile.close();        PrintWriter outFile = new PrintWriter(\"H:\\\\csc8001\\\\results1.txt\");        int index = 0;        for (String a : dictionary)        {            if (!tempdictionary.contains(a)){                 tempdictionary.add(a);            } else {                index++;            }        }        Collections.sort(tempdictionary);        for (int i=0; i<tempdictionary.size(); i++)            outFile.println(tempdictionary.get(i));        outFile.flush();        outFile.close();    }}\nPlease using this api: PrintWriter.write.\nAnswer:"
}