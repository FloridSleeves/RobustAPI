{"api": "InputStream.read", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Java program to count lines, words, and chars from a text given file: :I am practicing to write a program that gets a text file from user and provides data such as characters, words, and lines in the text.I have searched and looked over the same topic but cannot find a way to make my code run.public class Document{private Scanner sc;// Sets users input to a file namepublic Document(String documentName) throws FileNotFoundException {    File inputFile = new File(documentName);    try {        sc = new Scanner(inputFile);    } catch (IOException exception) {        System.out.println(\"File does not exists\");    }}public int getChar() {    int Char= 0;    while (sc.hasNextLine()) {        String line = sc.nextLine();        Char += line.length() + 1;    }    return Char;}// Gets the number of words in a textpublic int getWords() {    int Words = 0;    while (sc.hasNext()) {        String line = sc.next();        Words += new StringTokenizer(line, \" ,\").countTokens();    }    return Words;}public int getLines() {    int Lines= 0;    while (sc.hasNextLine()) {        Lines++;    }    return Lines;}  }Main method: public class Main {    public static void main(String[] args) throws FileNotFoundException {        DocStats doc = new DocStats(\"someText.txt\");        // outputs 1451, should be 1450        System.out.println(\"Number of characters: \"            + doc.getChar());         // outputs 0, should be 257        System.out.println(\"Number of words: \" + doc.getWords());        // outputs 0, should be 49        System.out.println(\"Number of lines: \" + doc.getLines());     }}I know exactly why I get 1451 instead of 1451. The reason is because I do not have '\\n' at the end of the last sentence but my method adds  numChars += line.length() + 1;However, I cannot find a solution to why I get 0 for words and lines.*My texts includes elements as: ? , - 'After all, could anyone help me to make this work? **So far, I the problem that concerns me is how I can get a number of characters, if the last sentence does not have '\\n' element. Is there a chance I could fix that with an if statement? -Thank you!\nPlease using this api: InputStream.read.\nAnswer:", "response": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Java program to count lines, words, and chars from a text given file: :I am practicing to write a program that gets a text file from user and provides data such as characters, words, and lines in the text.I have searched and looked over the same topic but cannot find a way to make my code run.public class Document{private Scanner sc;// Sets users input to a file namepublic Document(String documentName) throws FileNotFoundException {    File inputFile = new File(documentName);    try {        sc = new Scanner(inputFile);    } catch (IOException exception) {        System.out.println(\"File does not exists\");    }}public int getChar() {    int Char= 0;    while (sc.hasNextLine()) {        String line = sc.nextLine();        Char += line.length() + 1;    }    return Char;}// Gets the number of words in a textpublic int getWords() {    int Words = 0;    while (sc.hasNext()) {        String line = sc.next();        Words += new StringTokenizer(line, \" ,\").countTokens();    }    return Words;}public int getLines() {    int Lines= 0;    while (sc.hasNextLine()) {        Lines++;    }    return Lines;}  }Main method: public class Main {    public static void main(String[] args) throws FileNotFoundException {        DocStats doc = new DocStats(\"someText.txt\");        // outputs 1451, should be 1450        System.out.println(\"Number of characters: \"            + doc.getChar());         // outputs 0, should be 257        System.out.println(\"Number of words: \" + doc.getWords());        // outputs 0, should be 49        System.out.println(\"Number of lines: \" + doc.getLines());     }}I know exactly why I get 1451 instead of 1451. The reason is because I do not have '\\n' at the end of the last sentence but my method adds  numChars += line.length() + 1;However, I cannot find a solution to why I get 0 for words and lines.*My texts includes elements as: ? , - 'After all, could anyone help me to make this work? **So far, I the problem that concerns me is how I can get a number of characters, if the last sentence does not have '\\n' element. Is there a chance I could fix that with an if statement? -Thank you!\nPlease using this api: InputStream.read.\nAnswer: <<<api>>>: InputStream.read\n<<<code>>>: \n```java\npublic int getChar() throws IOException {\n    int Char = 0;\n    InputStream inputStream = new FileInputStream(new File(\"someText.txt\"));\n    int data = inputStream.read();\n    while(data != -1){\n        Char++;\n        data = inputStream.read();\n    }\n    inputStream.close();\n    return Char;\n}\n```\n<<<explanation>>>: The InputStream.read() method reads the next byte of data from the input stream. If no byte is available, it returns -1. We increment the character count for each byte read until we reach -1, indicating the end of the file.\n\nFor counting words, you can use the same approach but with a different method to count the words.\n\nAnswer: <<<api>>>: String.split\n<<<code>>>: \n```java\npublic int getWords() throws IOException {\n    int Words = 0;\n    BufferedReader br = new BufferedReader(new FileReader(\"someText.txt\"));\n    String line;\n    while ((line = br.readLine()) != null) {\n        Words += line.split(\"\\\\s+\").length;\n    }\n    br.close();\n    return Words;\n}\n```\n<<<explanation>>>: The String.split() method splits this string around matches of the given regular expression. In this case, we are splitting the line by one or more whitespace characters, which will give us an array of words. The length of this array is the number of words in the line. We add this number to the total word count for each line.\n\nFor counting lines, you can use the same approach but with a different method to count the lines.\n\nAnswer: <<<api>>>: BufferedReader.readLine\n<<<code>>>: \n```java\npublic int getLines() throws IOException {\n    int Lines = 0;\n    BufferedReader br = new BufferedReader(new FileReader(\"someText.txt\"));\n    while (br.readLine() != null) {\n        Lines++;\n    }\n    br.close();\n    return Lines;\n}\n```\n<<<explanation>>>: The BufferedReader.readLine() method reads a line of text. It returns null if the end of the stream has been reached. We increment the line count for each line read until we reach null, indicating the end of the file.\n\nPlease note that you should handle the IOException that can be thrown by the read method. You can do this by either declaring the method as throws IOException or by using a try-catch block to handle the exception.\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>"}