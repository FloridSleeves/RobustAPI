{"api": "InputStream.read", "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Bit-wise efficient uniform random number generation: :I recall reading about a method for efficiently using random bits in an article on a math-oriented website, but I can't seem to get the right keywords in Google to find it anymore, and it's not in my browser history.The gist of the problem that was being asked was to take a sequence of random numbers in the domain [domainStart, domainEnd) and efficiently use the bits of the random number sequence to project uniformly into the range [rangeStart, rangeEnd).  Both the domain and the range are integers (more correctly, longs and not Z). What's an algorithm to do this?Implementation-wise, I have a function with this signature:long doRead(InputStream in, long rangeStart, long rangeEnd);in is based on a CSPRNG (fed by a hardware RNG, conditioned through SecureRandom) that I am required to use; the return value must be between rangeStart and rangeEnd, but the obvious implementation of this is wasteful:long doRead(InputStream in, long rangeStart, long rangeEnd) {    long retVal = 0;    long range = rangeEnd - rangeStart;    // Fill until we get to range    for (int i = 0; (1 << (8 * i)) < range; i++) {        int in = 0;        do {            in = in.read();        // but be sure we don't exceed range        } while(retVal + (in << (8 * i)) >= range);        retVal += in << (8 * i);     }    return retVal + rangeStart;}I believe this is effectively the same idea as (rand() * (max - min)) + min, only we're discarding bits that push us over max. Rather than use a modulo operator which may incorrectly bias the results to the lower values, we discard those bits and try again.  Since hitting the CSPRNG may trigger re-seeding (which can block the InputStream), I'd like to avoid wasting random bits.  Henry points out that this code biases against 0 and 257; Banthar demonstrates it in an example.First edit: Henry reminded me that summation invokes the Central Limit Theorem.  I've fixed the code above to get around that problem.Second edit: Mechanical snail suggested that I look at the source for Random.nextInt().  After reading it for a while, I realized that this problem is similar to the base conversion problem.  See answer below.\nPlease using this api: InputStream.read.\nAnswer:", "response": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: Bit-wise efficient uniform random number generation: :I recall reading about a method for efficiently using random bits in an article on a math-oriented website, but I can't seem to get the right keywords in Google to find it anymore, and it's not in my browser history.The gist of the problem that was being asked was to take a sequence of random numbers in the domain [domainStart, domainEnd) and efficiently use the bits of the random number sequence to project uniformly into the range [rangeStart, rangeEnd).  Both the domain and the range are integers (more correctly, longs and not Z). What's an algorithm to do this?Implementation-wise, I have a function with this signature:long doRead(InputStream in, long rangeStart, long rangeEnd);in is based on a CSPRNG (fed by a hardware RNG, conditioned through SecureRandom) that I am required to use; the return value must be between rangeStart and rangeEnd, but the obvious implementation of this is wasteful:long doRead(InputStream in, long rangeStart, long rangeEnd) {    long retVal = 0;    long range = rangeEnd - rangeStart;    // Fill until we get to range    for (int i = 0; (1 << (8 * i)) < range; i++) {        int in = 0;        do {            in = in.read();        // but be sure we don't exceed range        } while(retVal + (in << (8 * i)) >= range);        retVal += in << (8 * i);     }    return retVal + rangeStart;}I believe this is effectively the same idea as (rand() * (max - min)) + min, only we're discarding bits that push us over max. Rather than use a modulo operator which may incorrectly bias the results to the lower values, we discard those bits and try again.  Since hitting the CSPRNG may trigger re-seeding (which can block the InputStream), I'd like to avoid wasting random bits.  Henry points out that this code biases against 0 and 257; Banthar demonstrates it in an example.First edit: Henry reminded me that summation invokes the Central Limit Theorem.  I've fixed the code above to get around that problem.Second edit: Mechanical snail suggested that I look at the source for Random.nextInt().  After reading it for a while, I realized that this problem is similar to the base conversion problem.  See answer below.\nPlease using this api: InputStream.read.\nAnswer: The algorithm to generate a uniform random number in a given range using the bits of a random number sequence is as follows:\n\n1. Generate a random number using the InputStream.read() method.\n2. Calculate the range of the random number by subtracting the start of the range from the end of the range.\n3. Calculate the modulus of the random number by the range.\n4. Add the start of the range to the result of step 3.\n5. Return the result.\n\nHere is the implementation of the algorithm:\n\n```java\nlong doRead(InputStream in, long rangeStart, long rangeEnd) {\n    long range = rangeEnd - rangeStart;\n    long result;\n    do {\n        result = in.read() & 0xFF;\n        result = (result * range) >> 8;\n    } while (result >= range);\n    return result + rangeStart;\n}\n```\n\nThis implementation uses the InputStream.read() method to generate a random number and the bitwise AND operator (&) to mask the result to 8 bits. The result is then multiplied by the range and right-shifted by 8 bits to discard the high bits. If the result is greater than or equal to the range, the process is repeated. The result is then added to the start of the range and returned. This algorithm ensures that the generated number is uniformly distributed within the specified range.\n\nThis implementation is efficient because it uses the bits of the random number sequence to project uniformly into the range [rangeStart, rangeEnd). It avoids the modulo operator which may incorrectly bias the results to the lower values. It also avoids wasting random bits by discarding those bits that would push the result over the maximum value.\n\nPlease note that this implementation assumes that the InputStream.read() method returns a value between 0 and 255. If the InputStream.read() method returns a value outside this range, the result of the bitwise AND operator (&) may not be as expected.\n\nAlso, this implementation does not handle the case where the range is zero. If the range is zero, the function will enter an infinite loop. To handle this case, you should add a check at the beginning of the function to return a specific value if the range is zero.\n\nLastly, this implementation does not handle the case where the range is negative. If the range is negative, the function will enter an infinite loop. To handle this case, you should add a check at the beginning of the function to return a specific value if the range is negative.\n\nI hope this helps clarify the algorithm and the implementation. If you have any further questions, please let me know.\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>\n<|EOT|>"}