{
    "id": "chatcmpl-8Hfjnki2Ahb4IaNpS5dR48lnXZnuq",
    "object": "chat.completion",
    "created": 1699222707,
    "model": "gpt-3.5-turbo-0613",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n<<<code>>>: Cursor c = db.query(DBHelper.TABLE, \n                         null, \n                         null, \n                         null, \n                         null, \n                         null, \n                         null);\n<<<explanation>>>: The code you provided retrieves all the columns from the table without any specific conditions. The variables used in the query are:\n- table: DBHelper.TABLE (the name of your table)\n- columns: null (to retrieve all columns)\n- selection: null (no selection criteria)\n- selectionArgs: null (no selection arguments)\n- groupBy: null (no grouping)\n- having: null (no having conditions)\n- orderBy: null (no ordering)\n\nIf you want to add conditions to your query or specify the columns to be retrieved, you can modify the code like this:\nCursor c = db.query(DBHelper.TABLE, \n                    new String[] {DBHelper.C_ENAME, DBHelper.C_DESIGNATION, DBHelper.C_SALARY}, \n                    \"col1 = ? AND col2 IS NOT NULL\",\n                    new String[] { \"something\" },\n                    null, \n                    null, \n                    null);\n\nThis would retrieve only the columns specified in the second argument and apply the conditions specified in the third and fourth arguments."
            },
            "finish_reason": "stop"
        },
        {
            "index": 1,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n\n<<<code>>>: \n\n1. Remove the DBHelper class code from the MainActivity class and create a new class file for DBHelper.\n\n2. Inside DBHelper class, add the following method to retrieve the data from the database:\n\npublic Cursor getAllEmployees() {\n    SQLiteDatabase db = this.getReadableDatabase();\n    Cursor cursor = db.query(DBHelper.TABLE, null, null, null, null, null, null);\n    return cursor;\n}\n\n3. Modify the fetchData() method in the MainActivity class as follows:\n\nprivate void fetchData() {\n    DBHelper dbHelper = new DBHelper(this);\n    Cursor cursor = dbHelper.getAllEmployees();\n    adapter = new SimpleCursorAdapter(this, R.layout.row, cursor, new String[]{DBHelper.C_ENAME, DBHelper.C_SALARY, DBHelper.C_DESIGNATION}, new int[]{R.id.lblEname, R.id.lblSalary, R.id.lblDesignation});\n    lvEmployees.setAdapter(adapter);\n}\n\n4. Modify the onItemClick() method in the MainActivity class as follows:\n\npublic void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {\n    Cursor row = (Cursor) adapter.getItem(position);\n    selected_ID = row.getString(row.getColumnIndex(DBHelper.C_ID));\n    String name = row.getString(row.getColumnIndex(DBHelper.C_ENAME));\n    String desig = row.getString(row.getColumnIndex(DBHelper.C_DESIGNATION));\n    String salary = row.getString(row.getColumnIndex(DBHelper.C_SALARY));\n    byte[] empphoto = row.getBlob(row.getColumnIndex(DBHelper.C_Dp));\n    txtEname.setText(name);\n    txtDesig.setText(desig);\n    txtSalary.setText(salary);\n    // set image to ImageView\n    //ImageView imgPhoto = (ImageView) findViewById(R.id.empdp);\n    //Bitmap bmp = BitmapFactory.decodeByteArray(empphoto, 0, empphoto.length);\n    //imgPhoto.setImageBitmap(bmp);\n}\n\n<<<explanation>>>: \nThe issue you are facing is related to converting a BLOB (binary large object) to a string. Instead of converting the BLOB to a string, you can directly retrieve the BLOB from the cursor and use it to set the image in the ImageView. \n\nFirst, create a separate class file for DBHelper to handle database operations. Inside the DBHelper class, create a method `getAllEmployees()` that retrieves all the rows from the database table. \n\nIn the MainActivity class, use the `getAllEmployees()` method to get the cursor containing the data. Then, create a SimpleCursorAdapter using the cursor and the appropriate layout and set it to the ListView. \n\nIn the `onItemClick()` method, use the cursor to retrieve the data for the selected row. You can get the BLOB data using `row.getBlob()` and then use it to create a bitmap and set it to the ImageView.\n\nNote: Uncomment the relevant code and modify it according to your ImageView's id."
            },
            "finish_reason": "stop"
        },
        {
            "index": 2,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n<<<code>>>: The error you are getting is \"Unable to convert BLOB to string\". This error occurs because you are trying to bind a byte array (photo) to a text (String) column when creating the CursorAdapter.\n\nTo retrieve the image from SQLite database and display it in a ListView, you will need to create a custom ArrayAdapter and override the getView() method. Here's an example:\n\n1. Create a custom ArrayAdapter:\n\npublic class EmployeeAdapter extends ArrayAdapter<Employee> {\n    private LayoutInflater inflater;\n    private List<Employee> employees;\n\n    public EmployeeAdapter(Context context, int resource, List<Employee> employees) {\n        super(context, resource, employees);\n        this.employees = employees;\n        inflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        View view = convertView;\n        if (view == null) {\n            view = inflater.inflate(R.layout.row, null);\n        }\n\n        Employee employee = employees.get(position);\n\n        TextView lblEname = (TextView) view.findViewById(R.id.lblEname);\n        TextView lblSalary = (TextView) view.findViewById(R.id.lblSalary);\n        TextView lblDesignation = (TextView) view.findViewById(R.id.lblDesignation);\n        ImageView empdp = (ImageView) view.findViewById(R.id.empdp);\n\n        lblEname.setText(employee.getName());\n        lblSalary.setText(employee.getSalary());\n        lblDesignation.setText(employee.getDesignation());\n        empdp.setImageBitmap(employee.getPhoto());\n\n        return view;\n    }\n}\n\n2. Modify the fetchData() method:\n\nprivate void fetchData() {\n    db = helper.getReadableDatabase();\n    Cursor cursor = db.query(DBHelper.TABLE, null, null, null, null, null, null);\n    List<Employee> employees = new ArrayList<>();\n\n    if (cursor.moveToFirst()) {\n        do {\n            String name = cursor.getString(cursor.getColumnIndex(DBHelper.C_ENAME));\n            String salary = cursor.getString(cursor.getColumnIndex(DBHelper.C_SALARY));\n            String designation = cursor.getString(cursor.getColumnIndex(DBHelper.C_DESIGNATION));\n            byte[] photo = cursor.getBlob(cursor.getColumnIndex(DBHelper.C_Dp));\n            Bitmap bitmap = BitmapFactory.decodeByteArray(photo, 0, photo.length);\n\n            Employee employee = new Employee(name, salary, designation, bitmap);\n            employees.add(employee);\n        } while (cursor.moveToNext());\n    }\n\n    cursor.close();\n    db.close();\n\n    EmployeeAdapter adapter = new EmployeeAdapter(this, R.layout.row, employees);\n    lvEmployees.setAdapter(adapter);\n}\n\n3. Modify the onCreate() method to use the EmployeeAdapter:\n\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n    \n    // ...\n    \n    fetchData();\n}\n\nIn this example, the Employee class is a simple model class with getter and setter methods for the name, salary, designation, and photo.\n\nBy creating a custom ArrayAdapter and overriding the getView() method, you can bind the image to the ImageView in the ListView."
            },
            "finish_reason": "stop"
        },
        {
            "index": 3,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n<<<code>>>: In order to retrieve images from SQLite and display them in a ListView, you need to use a custom CursorAdapter. Here is an example:\n\nFirst, create a custom CursorAdapter class:\n\npublic class MyCursorAdapter extends CursorAdapter {\n\n    public MyCursorAdapter(Context context, Cursor c, int flags) {\n        super(context, c, flags);\n    }\n\n    @Override\n    public void bindView(View view, Context context, Cursor cursor) {\n        // Retrieve data from the cursor and set it in the view\n        TextView nameTextView = (TextView) view.findViewById(R.id.lblEname);\n        TextView salaryTextView = (TextView) view.findViewById(R.id.lblSalary);\n        TextView designationTextView = (TextView) view.findViewById(R.id.lblDesignation);\n        ImageView photoImageView = (ImageView) view.findViewById(R.id.empdp);\n\n        String name = cursor.getString(cursor.getColumnIndexOrThrow(DBHelper.C_ENAME));\n        String salary = cursor.getString(cursor.getColumnIndexOrThrow(DBHelper.C_SALARY));\n        String designation = cursor.getString(cursor.getColumnIndexOrThrow(DBHelper.C_DESIGNATION));\n        byte[] photoBytes = cursor.getBlob(cursor.getColumnIndexOrThrow(DBHelper.C_Dp));\n        Bitmap photoBitmap = BitmapFactory.decodeByteArray(photoBytes, 0, photoBytes.length);\n\n        nameTextView.setText(name);\n        salaryTextView.setText(salary);\n        designationTextView.setText(designation);\n        photoImageView.setImageBitmap(photoBitmap);\n    }\n\n    @Override\n    public View newView(Context context, Cursor cursor, ViewGroup parent) {\n        // Inflate the view for each row of the ListView\n        LayoutInflater inflater = LayoutInflater.from(context);\n        return inflater.inflate(R.layout.row, parent, false);\n    }\n}\n\nThen, modify your fetchData() method to use the custom CursorAdapter:\n\nprivate void fetchData() {\n    db = helper.getReadableDatabase();\n    Cursor c = db.query(DBHelper.TABLE, null, null, null, null, null, null);\n    MyCursorAdapter adapter = new MyCursorAdapter(this, c, 0);\n    lvEmployees.setAdapter(adapter);\n}\n\n<<<explanation>>>: The error you are encountering is caused by trying to convert the BLOB data to a string. You need to use a custom CursorAdapter and decode the byte array into a Bitmap before setting it in the ImageView. Additionally, make sure that the layout file 'row' includes an ImageView with the id 'empdp'."
            },
            "finish_reason": "stop"
        },
        {
            "index": 4,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n<<<code>>>: Change the following line in your fetchData() method:\nadapter = new SimpleCursorAdapter(\n            this,\n            R.layout.row,\n            c,\n            new String[] { DBHelper.C_ENAME, DBHelper.C_SALARY, DBHelper.C_DESIGNATION ,DBHelper.C_Dp},\n            new int[] { R.id.lblEname, R.id.lblSalary, R.id.lblDesignation,R.id.empdp });\nto\nadapter = new SimpleCursorAdapter(\n            this,\n            R.layout.row,\n            c,\n            new String[] { DBHelper.C_ENAME, DBHelper.C_SALARY, DBHelper.C_DESIGNATION },\n            new int[] { R.id.lblEname, R.id.lblSalary, R.id.lblDesignation});\nAnd then modify your bindView() method as below:\n@Override\npublic void bindView(View view, Context context, Cursor cursor) {\n    ImageView imageView = (ImageView) view.findViewById(R.id.empdp);\n    byte[] photobytes = cursor.getBlob(cursor.getColumnIndex(DBHelper.C_Dp));\n    ByteArrayInputStream imageStream = new ByteArrayInputStream(photobytes);\n    Bitmap theImage = BitmapFactory.decodeStream(imageStream);\n    imageView.setImageBitmap(theImage);\n}\n<<<explanation>>>: The error you are getting \"android.database.sqlite.SQLiteException: unable to convert BLOB to string\" is because you are trying to convert the BLOB data type from the database to a string. You should not include the C_Dp column in the String array of column names that you pass to the SimpleCursorAdapter constructor. Additionally, you need to update the bindView() method to handle the loading of the image from the BLOB data type and setting it to the ImageView."
            },
            "finish_reason": "stop"
        },
        {
            "index": 5,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n<<<code>>>: byte[] photo = cursor.getBlob(cursor.getColumnIndex(DBHelper.C_Dp));\n\n// create a Bitmap from the byte array\nBitmap bmp = BitmapFactory.decodeByteArray(photo, 0, photo.length);\n\n// set the Bitmap to an ImageView or use it as desired\n\n<<<explanation>>>: The error \"Unable to convert BLOB to string\" occurs because you are trying to retrieve the image data as a string using getString() method. However, the image data is stored as a byte array (BLOB) in the database, so you need to use the getBlob() method to retrieve it. Then, you can convert the byte array to a Bitmap using BitmapFactory and use it as desired, such as setting it to an ImageView."
            },
            "finish_reason": "stop"
        },
        {
            "index": 6,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n<<<code>>>: Instead of using SimpleCursorAdapter, you can extend BaseAdapter class and override the getView() method to display the image from the SQLite database. Here is an example of how you can achieve this:\n\n// Declare a custom adapter class\npublic class EmployeeAdapter extends BaseAdapter {\n    private LayoutInflater inflater;\n    private Context context;\n    private Cursor cursor;\n\n    public EmployeeAdapter(Context context, Cursor cursor) {\n        this.context = context;\n        this.cursor = cursor;\n        inflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public int getCount() {\n        return cursor.getCount();\n    }\n\n    @Override\n    public Object getItem(int position) {\n        cursor.moveToPosition(position);\n        return cursor;\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        ViewHolder viewHolder;\n        if (convertView == null) {\n            convertView = inflater.inflate(R.layout.row, parent, false);\n            viewHolder = new ViewHolder();\n            viewHolder.name = (TextView) convertView.findViewById(R.id.lblEname);\n            viewHolder.salary = (TextView) convertView.findViewById(R.id.lblSalary);\n            viewHolder.designation = (TextView) convertView.findViewById(R.id.lblDesignation);\n            viewHolder.empdp = (ImageView) convertView.findViewById(R.id.empdp);\n            convertView.setTag(viewHolder);\n        } else {\n            viewHolder = (ViewHolder) convertView.getTag();\n        }\n\n        cursor.moveToPosition(position);\n        String name = cursor.getString(cursor.getColumnIndex(DBHelper.C_ENAME));\n        String salary = cursor.getString(cursor.getColumnIndex(DBHelper.C_SALARY));\n        String designation = cursor.getString(cursor.getColumnIndex(DBHelper.C_DESIGNATION));\n        byte[] empdp = cursor.getBlob(cursor.getColumnIndex(DBHelper.C_Dp));\n\n        viewHolder.name.setText(name);\n        viewHolder.salary.setText(salary);\n        viewHolder.designation.setText(designation);\n        viewHolder.empdp.setImageBitmap(BitmapFactory.decodeByteArray(empdp, 0, empdp.length));\n\n        return convertView;\n    }\n\n    // Define a ViewHolder class to hold references to the views in the row layout\n    private static class ViewHolder {\n        TextView name;\n        TextView salary;\n        TextView designation;\n        ImageView empdp;\n    }\n}\n\n// In fetchData() method, use the custom adapter instead of SimpleCursorAdapter\nprivate void fetchData() {\n    db = helper.getReadableDatabase();\n    Cursor c = db.query(DBHelper.TABLE, null, null, null, null, null, null);\n    adapter = new EmployeeAdapter(this, c);\n    lvEmployees.setAdapter(adapter);\n}\n\n<<<explanation>>>: The error \"Unable to convert BLOB to string\" occurs because SimpleCursorAdapter expects the value of the image column to be a string, but you are storing the image as a BLOB in the database. By extending BaseAdapter and overriding the getView() method, you can handle the BLOB data and display the image in the ImageView directly."
            },
            "finish_reason": "stop"
        },
        {
            "index": 7,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n<<<code>>>: \n// Define the columns you want to retrieve from the database\nString[] columns = {DBHelper.C_ENAME, DBHelper.C_DESIGNATION, DBHelper.C_SALARY, DBHelper.C_Dp};\n// Specify the condition for the query\nString selection = null;\n// Specify the values for the condition\nString[] selectionArgs = null;\n// Specify how the results should be sorted\nString sortOrder = null;\n\n// Execute the query\ndb = helper.getReadableDatabase();\nCursor c = db.query(DBHelper.TABLE, columns, selection, selectionArgs, null, null, sortOrder);\nadapter = new SimpleCursorAdapter(\n        this,\n        R.layout.row,\n        c,\n        new String[] { DBHelper.C_ENAME, DBHelper.C_SALARY, DBHelper.C_DESIGNATION ,DBHelper.C_Dp},\n        new int[] { R.id.lblEname, R.id.lblSalary, R.id.lblDesignation,R.id.empdp }\n);\nlvEmployees.setAdapter(adapter);\n\n<<<explanation>>>: \nIn the code given above, we define the columns we want to retrieve from the database using the array \"columns\".\nWe specify the condition for the query using the \"selection\" string and the values for the condition using the \"selectionArgs\" array.\nWe leave the sortOrder parameter as null to indicate that we want the results to be returned in the default order.\nFinally, we execute the query using the db.query() method and pass the resulting cursor to the SimpleCursorAdapter to display the data in the ListView."
            },
            "finish_reason": "stop"
        },
        {
            "index": 8,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n<<<code>>>: \n1. First, make sure that the column C_Dp is of type BLOB in your table creation query:\n\n    db.execSQL(\"CREATE TABLE \" + TABLE + \" ( \" + C_ID\n            + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" + C_ENAME + \" text, \"\n            + C_DESIGNATION + \" text, \" + C_SALARY + \" text, \" + C_Dp + \" BLOB )\");\n\n2. Update the fetchData() method to include the column name in the query:\n\n    private void fetchData() {\n        db = helper.getReadableDatabase();\n        Cursor c = db.query(DBHelper.TABLE, null, null, null, null, null, null);\n        adapter = new SimpleCursorAdapter(this, R.layout.row, c,\n                new String[] { DBHelper.C_ENAME, DBHelper.C_SALARY,\n                        DBHelper.C_DESIGNATION, DBHelper.C_Dp },\n                new int[] { R.id.lblEname, R.id.lblSalary, R.id.lblDesignation,\n                        R.id.empdp });\n        lvEmployees.setAdapter(adapter);\n    }\n\n3. Implement the bindView() method in your SimpleCursorAdapter implementation (or use SimpleCursorAdapter.ViewBinder) to handle the special case of the BLOB column:\n\n    adapter.setBinder(new SimpleCursorAdapter.ViewBinder() {\n        @Override\n        public boolean setViewValue(View view, Cursor cursor, int columnIndex) {\n            if (columnIndex == cursor.getColumnIndex(DBHelper.C_Dp)) {\n                byte[] photo = cursor.getBlob(columnIndex);\n                Bitmap bitmap = BitmapFactory.decodeByteArray(photo, 0, photo.length);\n                ImageView imageView = (ImageView) view;\n                imageView.setImageBitmap(bitmap);\n                return true;\n            }\n            return false;\n        }\n    });\n\nNote that you will need to update the layout file (row.xml) to include an ImageView with the id \"empdp\" to display the image.\n\n<<<explanation>>>: The error message \"Unable to convert BLOB to string\" suggests that the Android CursorAdapter is trying to convert the byte array of the image to a string. To display an image from a BLOB column in a ListView, you need to create a custom implementation of the CursorAdapter to handle the BLOB column separately and bind it to an ImageView in the layout file."
            },
            "finish_reason": "stop"
        },
        {
            "index": 9,
            "message": {
                "role": "assistant",
                "content": "<<<api>>>: SQLiteDatabase.query\n<<<code>>>:\nIn your fetchData() method, you are trying to fetch the image data from the database using \"DBHelper.C_Dp\" column. However, the SimpleCursorAdapter cannot directly handle the display of a byte array (i.e., the image data). You will need to create a custom Adapter to handle this.\n\nFirst, create a custom adapter class that extends SimpleCursorAdapter:\n\nprivate class CustomAdapter extends SimpleCursorAdapter {\n    private LayoutInflater inflater;\n    private byte[] imageData;\n\n    public CustomAdapter(Context context, int layout, Cursor c, String[] from,\n            int[] to, int flags) {\n        super(context, layout, c, from, to, flags);\n        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        ViewHolder holder;\n\n        if (convertView == null) {\n            convertView = inflater.inflate(R.layout.row, parent, false);\n\n            holder = new ViewHolder();\n            holder.lblEname = (TextView) convertView.findViewById(R.id.lblEname);\n            holder.lblSalary = (TextView) convertView.findViewById(R.id.lblSalary);\n            holder.lblDesignation = (TextView) convertView.findViewById(R.id.lblDesignation);\n            holder.empdp = (ImageView) convertView.findViewById(R.id.empdp);\n\n            convertView.setTag(holder);\n        } else {\n            holder = (ViewHolder) convertView.getTag();\n        }\n\n        Cursor cursor = (Cursor) getItem(position);\n\n        String name = cursor.getString(cursor.getColumnIndex(DBHelper.C_ENAME));\n        String salary = cursor.getString(cursor.getColumnIndex(DBHelper.C_SALARY));\n        String designation = cursor.getString(cursor.getColumnIndex(DBHelper.C_DESIGNATION));\n        byte[] dp = cursor.getBlob(cursor.getColumnIndex(DBHelper.C_Dp));\n\n        holder.lblEname.setText(name);\n        holder.lblSalary.setText(salary);\n        holder.lblDesignation.setText(designation);\n        holder.empdp.setImageBitmap(BitmapFactory.decodeByteArray(dp, 0, dp.length));\n\n        return convertView;\n    }\n\n    private class ViewHolder {\n        TextView lblEname;\n        TextView lblSalary;\n        TextView lblDesignation;\n        ImageView empdp;\n    }\n}\n\nThen, replace the following line in fetchData() method:\nadapter = new SimpleCursorAdapter(\n        this,\n        R.layout.row,\n        c,\n        new String[] { DBHelper.C_ENAME, DBHelper.C_SALARY, DBHelper.C_DESIGNATION, DBHelper.C_Dp },\n        new int[] { R.id.lblEname, R.id.lblSalary, R.id.lblDesignation, R.id.empdp });\n\nWith this line:\nadapter = new CustomAdapter(\n        this,\n        R.layout.row,\n        c,\n        new String[] { DBHelper.C_ENAME, DBHelper.C_SALARY, DBHelper.C_DESIGNATION, DBHelper.C_Dp },\n        new int[] { R.id.lblEname, R.id.lblSalary, R.id.lblDesignation, R.id.empdp });\n\nAlso, make sure that the layout file row.xml contains an ImageView with id \"empdp\".\n\nNote: This code assumes that the image data stored in the database is in a valid image format, such as JPEG or PNG.\n\n<<<explanation>>>: The error you are seeing in the logcat is because SimpleCursorAdapter cannot directly convert a byte array (i.e., the image data) to a string. Therefore, you need to create a custom Adapter class that extends SimpleCursorAdapter and overrides the getView() method to handle the display of the image data. In"
            },
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 3381,
        "completion_tokens": 4547,
        "total_tokens": 7928
    },
    "prompt": "Please answer my code questions using the given API following this format: <<<api>>>: $API\n<<<code>>>: $CODE\n<<<explanation>>>: $EXPLANATION.\nQuestion: How to query using SQLiteDatabase.query: How can I make query using SQLiteDatabase.query ?\n\n\"Select * from table where col1 = something AND col2 IS NOT NULL\"\nI tried it by putting the col2 with a =? in selection String and NOT NULL in selection argument but it doesn't work.\n\nPlease tell me where m going wrong.\n\nPlease using this api: SQLiteDatabase.query.\nAnswer:<<<api>>>: SQLiteDatabase.query\n<<<code>>>: db.query(\"MyTable\", null,\n         \"col1 = ? AND col2 IS NOT NULL\",\n         new String[] { \"something\" },\n         null, null, null);\n         db.close();\n<<<explanation>>>: selectionArgs is an array of strings, and can be used only for string values.\n\nWhen you use col2 = ? with the string NOT NULL, you are telling the database to check if the column's value is the eight-character string \"NOT NULL\".\n\nYou must write col2 IS NOT NULL directly into the selection string:\nQuestion: How to retrieve image from sqlite to list view?: :My code here EmployeeAppActivityMy code is working well in list view without image. I need employee photo in list view, getting error when image is added from database to list view. Please help me.// Primitive VariablesString selected_ID = \"\";// Widget GUI DeclareEditText txtEname, txtDesig, txtSalary;Button btnAddEmployee, btnUpdate, btnDelete;ListView lvEmployees;// DB ObjectsDBHelper helper;SQLiteDatabase db;// Adapter ObjectSimpleCursorAdapter adapter;/** Called when the activity is first created. */@Overridepublic void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.main);    // Init DB Objects    helper = new DBHelper(this);    // Widget GUI Init    txtEname = (EditText) findViewById(R.id.txtEname);    txtDesig = (EditText) findViewById(R.id.txtDesig);    txtSalary = (EditText) findViewById(R.id.txtSalary);    lvEmployees = (ListView) findViewById(R.id.lvEmployees);    btnAddEmployee = (Button) findViewById(R.id.btnAdd);    btnUpdate = (Button) findViewById(R.id.btnUpdate);    btnDelete = (Button) findViewById(R.id.btnDelete);    // Attached Listener    btnAddEmployee.setOnClickListener(this);    btnUpdate.setOnClickListener(this);    btnDelete.setOnClickListener(this);    lvEmployees.setOnItemClickListener(new OnItemClickListener() {        @Override        public void onItemClick(AdapterView<?> adapter, View v,                int position, long id) {            String name, desig, salary;            byte[] empphoto;            // Display Selected Row of Listview into EditText widget            Cursor row = (Cursor) adapter.getItemAtPosition(position);            selected_ID = row.getString(0);            name = row.getString(1);            desig = row.getString(2);            salary = row.getString(3);            empphoto=row.getBlob(4);            txtEname.setText(name);            txtDesig.setText(desig);            txtSalary.setText(salary);        }    });    // Fetch Data from database    fetchData();}@Overridepublic void onClick(View v) {    // Perform CRUD Operation    if (v == btnAddEmployee) {        // Add Record with help of ContentValues and DBHelper class object        Bitmap b=BitmapFactory.decodeResource(getResources(), R.drawable.icon);        //Bitmap b=BitmapFactory.decodeFile(imagepath);        //ContentValues cv=new ContentValues();        ByteArrayOutputStream bos=new ByteArrayOutputStream();        b.compress(Bitmap.CompressFormat.JPEG, 90, bos);        byte[] photo=bos.toByteArray();        ContentValues values = new ContentValues();        values.put(DBHelper.C_ENAME, txtEname.getText().toString());        values.put(DBHelper.C_DESIGNATION, txtDesig.getText().toString());        values.put(DBHelper.C_SALARY, txtSalary.getText().toString());        values.put(DBHelper.C_Dp, photo);        // Call insert method of SQLiteDatabase Class and close after        // performing task        db = helper.getWritableDatabase();        db.insert(DBHelper.TABLE, null, values);        db.close();        clearFields();        Toast.makeText(this, \"Employee Added Successfully\",                Toast.LENGTH_LONG).show();        // Fetch Data from database and display into listview        fetchData();    }    if (v == btnUpdate) {        // Update Record with help of ContentValues and DBHelper class        // object        ContentValues values = new ContentValues();        values.put(DBHelper.C_ENAME, txtEname.getText().toString());        values.put(DBHelper.C_DESIGNATION, txtDesig.getText().toString());        values.put(DBHelper.C_SALARY, txtSalary.getText().toString());        // Call update method of SQLiteDatabase Class and close after        // performing task        db = helper.getWritableDatabase();        db.update(DBHelper.TABLE, values, DBHelper.C_ID + \"=?\",                new String[] { selected_ID });        db.close();        // Fetch Data from database and display into listview        fetchData();        Toast.makeText(this, \"Record Updated Successfully\",                Toast.LENGTH_LONG).show();        clearFields();    }    if (v == btnDelete) {        // Call delete method of SQLiteDatabase Class to delete record and        // close after performing task        db = helper.getWritableDatabase();        db.delete(DBHelper.TABLE, DBHelper.C_ID + \"=?\",                new String[] { selected_ID });        db.close();        // Fetch Data from database and display into listview        fetchData();        Toast.makeText(this, \"Record Deleted Successfully\",                Toast.LENGTH_LONG).show();        clearFields();    }}// Clear Fieldsprivate void clearFields() {    txtEname.setText(\"\");    txtDesig.setText(\"\");    txtSalary.setText(\"\");}// Fetch Fresh data from database and display into listviewprivate void fetchData() {    db = helper.getReadableDatabase();    Cursor c = db.query(DBHelper.TABLE, null, null, null, null, null, null);    adapter = new SimpleCursorAdapter(            this,            R.layout.row,            c,            new String[] { DBHelper.C_ENAME, DBHelper.C_SALARY, DBHelper.C_DESIGNATION ,DBHelper.C_Dp},            new int[] { R.id.lblEname, R.id.lblSalary, R.id.lblDesignation,R.id.empdp });    lvEmployees.setAdapter(adapter);}DBHelper class herestatic final String DATABASE = \"empapp.db\";static final int VERSION = 1;static final String TABLE = \"emp\";static final String C_ID = \"_id\";static final String C_ENAME = \"ename\";static final String C_DESIGNATION = \"designation\";static final String C_SALARY = \"salary\";static final String C_Dp = \"photo\";// Override constructorpublic DBHelper(Context context) {    super(context, DATABASE, null, VERSION);}// Override onCreate method@Overridepublic void onCreate(SQLiteDatabase db) {    // Create Employee table with following fields    // _ID, ENAME, DESIGNATION and SALARY    db.execSQL(\"CREATE TABLE \" + TABLE + \" ( \" + C_ID            + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" + C_ENAME + \" text, \"            + C_DESIGNATION + \" text, \" + C_SALARY + \" text, \" + C_Dp+ \" BLOB )\");}@Overridepublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {    // Drop old version table    db.execSQL(\"Drop table \" + TABLE);    // Create New Version table    onCreate(db);}Logcat error 09-30 03:45:38.139: E/AndroidRuntime(30628): FATAL EXCEPTION: main  09-30 03:45:38.139: E/AndroidRuntime(30628):  android.database.sqlite.SQLiteException: unknown error (code 0):  Unable to convert BLOB to string 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.database.CursorWindow.nativeGetString(Native Method) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.database.CursorWindow.getString(CursorWindow.java:434) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.database.AbstractWindowedCursor.getString(AbstractWindowedCursor.java:51)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.widget.SimpleCursorAdapter.bindView(SimpleCursorAdapter.java:150)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.widget.CursorAdapter.getView(CursorAdapter.java:250) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.widget.AbsListView.obtainView(AbsListView.java:2159) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.widget.ListView.makeAndAddView(ListView.java:1831) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.widget.ListView.fillDown(ListView.java:674) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.widget.ListView.fillFromTop(ListView.java:735) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.widget.ListView.layoutChildren(ListView.java:1652) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.widget.AbsListView.onLayout(AbsListView.java:1994) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.view.View.layout(View.java:14003) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.view.ViewGroup.layout(ViewGroup.java:4375) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.widget.LinearLayout.setChildFrame(LinearLayout.java:1663)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.widget.LinearLayout.layoutVertical(LinearLayout.java:1521)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.widget.LinearLayout.onLayout(LinearLayout.java:1434) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.view.View.layout(View.java:14003) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.view.ViewGroup.layout(ViewGroup.java:4375) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.widget.FrameLayout.onLayout(FrameLayout.java:448) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.view.View.layout(View.java:14003) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.view.ViewGroup.layout(ViewGroup.java:4375) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.widget.LinearLayout.setChildFrame(LinearLayout.java:1663)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.widget.LinearLayout.layoutVertical(LinearLayout.java:1521)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.widget.LinearLayout.onLayout(LinearLayout.java:1434) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.view.View.layout(View.java:14003) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.view.ViewGroup.layout(ViewGroup.java:4375) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.widget.FrameLayout.onLayout(FrameLayout.java:448) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.view.View.layout(View.java:14003) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.view.ViewGroup.layout(ViewGroup.java:4375) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.view.ViewRootImpl.performLayout(ViewRootImpl.java:1892) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1711)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:989) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:4351)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.view.Choreographer$CallbackRecord.run(Choreographer.java:749)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.view.Choreographer.doCallbacks(Choreographer.java:562) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.view.Choreographer.doFrame(Choreographer.java:532) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:735)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  android.os.Handler.handleCallback(Handler.java:725) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.os.Handler.dispatchMessage(Handler.java:92) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  android.os.Looper.loop(Looper.java:137) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  android.app.ActivityThread.main(ActivityThread.java:5039) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  java.lang.reflect.Method.invokeNative(Native Method) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  java.lang.reflect.Method.invoke(Method.java:511) 09-30 03:45:38.139:  E/AndroidRuntime(30628):  at  com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:793)  09-30 03:45:38.139: E/AndroidRuntime(30628):  at  com.android.internal.os.ZygoteInit.main(ZygoteInit.java:560) 09-30  03:45:38.139: E/AndroidRuntime(30628):    at  dalvik.system.NativeStart.main(Native Method)\nPlease using this api: SQLiteDatabase.query.\nAnswer:"
}